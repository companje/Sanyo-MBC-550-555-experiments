     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4 00000000 EB04                <1> jmp boot
     5                              <1> 
     6                              <1> NUM_SECTORS equ 40          ; number of sectors to read
     7                              <1> BAR_WIDTH equ 30
     8                              <1> COLS  equ 72
     9                              <1> ROWS  equ 50
    10                              <1> LINES equ 200
    11                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    12                              <1> RED   equ 0xf000
    13                              <1> GREEN equ 0x1c00
    14                              <1> BLUE  equ 0xf400
    15                              <1> DST   equ 0x38
    16                              <1> XD    equ 4
    17                              <1> YD    equ COLS*XD
    18                              <1> FONT equ 0xFF00
    19                              <1> BYTES_PER_ROW equ 8*COLS  ; 25 lines
    20                              <1> Color.R equ 0b100
    21                              <1> Color.G equ 0b010
    22                              <1> Color.B equ 0b001
    23                              <1> Color.W equ 0b111
    24                              <1> Color.C equ 0b011
    25                              <1> Color.M equ 0b101
    26                              <1> Color.Y equ 0b110
    27                              <1> Color.K equ 0b000
    28                              <1> CTRL equ 0b0000100000000000
    29                              <1> KEY_LEFT  equ 0b00011100
    30                              <1> KEY_RIGHT equ 0b00011101
    31                              <1> KEY_UP    equ 0b00011110
    32                              <1> KEY_DOWN  equ 0b00011111
    33                              <1> 
    34 00000002 00                  <1> cursor.x: db 0
    35 00000003 00                  <1> cursor.y: db 0
    36                              <1> key:
    37 00000004 00                  <1>   .code db 0
    38 00000005 00                  <1>   .ctrl db 0
    39                              <1> 
    40                              <1> ; %macro set_cursor_row 1
    41                              <1> ;   mov di,%1 * BYTES_PER_ROW
    42                              <1> ; %endmacro
    43                              <1> 
    44                              <1> %macro set_cursor 2
    45                              <1>   mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    46                              <1>   ; mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro print 1
    50                              <1>   jmp %%endstr 
    51                              <1>   %%str: db %1,0
    52                              <1>   %%endstr: 
    53                              <1>   mov bx,%%str
    54                              <1>   call write_string
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> boot:
    58 00000006 FA                  <1>   cli
    59 00000007 FC                  <1>   cld
    60                              <1> 
    61 00000008 E8C600              <1>   call clear_green          
    62 0000000B B005                <1>   mov al, 5
    63 0000000D E610                <1>   out 10h, al           ; select address 0x1c000 as green video page
    64                              <1> 
    65 0000000F B000                <1>   mov al,0
    66 00000011 E63A                <1>   out 0x3a,al           ; keyboard \force state/
    67 00000013 E63A                <1>   out 0x3a,al           ; keyboard \force state/
    68 00000015 B0FF                <1>   mov al,0xFF
    69 00000017 E63A                <1>   out 0x3a,al           ; keyboard \reset/
    70 00000019 E63A                <1>   out 0x3a,al           ; keyboard \mode/
    71 0000001B B037                <1>   mov al,0x37
    72 0000001D E63A                <1>   out 0x3a,al           ; keyboard \set command
    73                              <1> 
    74 0000001F B8001C              <1>   mov ax,GREEN      
    75 00000022 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
    76 00000024 B83800              <1>   mov ax,DST                
    77 00000027 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
    78 00000029 BF0000              <1>   mov di,0                  ;
    79 0000002C B200                <1>   mov dl,0                  ; track=0
    80 0000002E B601                <1>   mov dh,1                  ; sector=1
    81 00000030 B92800              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
    82 00000033 EB0B                <1>   jmp move_head
    83                              <1> 
    84                              <1> ; ───────────────────────────────────────────────────────────────────────────
    85                              <1> 
    86                              <1> next_sector:
    87 00000035 FEC6                <1>   inc dh                    ; sector++
    88 00000037 80FE0A              <1>   cmp dh,10
    89 0000003A 7218                <1>   jb read_sector            ; if (dh<9) read_sector
    90 0000003C B601                <1>   mov dh,1
    91 0000003E FEC2                <1>   inc dl                    ; else track++ ; sector=1
    92                              <1> 
    93                              <1> move_head:
    94 00000040 88D0                <1>   mov al,dl
    95 00000042 E60E                <1>   out 0Eh,al               ; set track number
    96 00000044 B018                <1>   mov al,18h     
    97 00000046 E608                <1>   out 8,al                 ; seek track, load head
    98 00000048 B000                <1>   mov al,0
    99 0000004A E61C                <1>   out 1Ch,al               ; set desired drive/side
   100 0000004C D40A                <1>   aam
   101                              <1> 
   102                              <1> head_moving:
   103 0000004E E408                <1>   in al,8
   104 00000050 A801                <1>   test al,1
   105 00000052 75FA                <1>   jnz head_moving
   106                              <1> 
   107                              <1> read_sector:
   108 00000054 88F0                <1>   mov al,dh
   109 00000056 E60C                <1>   out 0Ch,al                ; sector number
   110 00000058 B702                <1>   mov bh,2                  ; 00000010b
   111 0000005A B396                <1>   mov bl,96h                ; 10010110b
   112 0000005C B400                <1>   mov ah,0
   113 0000005E B080                <1>   mov al,80h
   114 00000060 E608                <1>   out 8,al                  ; read sector
   115 00000062 D40A<rep 4h>        <1>   times 4 aam               ; wait
   116                              <1> 
   117                              <1> check_status_1:
   118 0000006A E408                <1>   in al,8                   ; read status
   119 0000006C D0F8                <1>   sar al,1                  ; status/=2
   120 0000006E 731F                <1>   jnb check_status_3
   121 00000070 75F8                <1>   jnz check_status_1
   122                              <1> 
   123                              <1> wait_for_data:
   124 00000072 E408                <1>   in al,8                   ; read status
   125 00000074 20D8                <1>   and al,bl                 ; 96h
   126 00000076 74FA                <1>   jz wait_for_data
   127                              <1> 
   128                              <1> store_byte_1:
   129 00000078 E40E                <1>   in al,0Eh
   130 0000007A AA                  <1>   stosb
   131                              <1> 
   132                              <1> check_status_2:
   133 0000007B E408                <1>   in al,8                   ; read status
   134 0000007D 48                  <1>   dec ax                    ; status--
   135 0000007E 74FB                <1>   jz check_status_2         ; if (status==0) repeat
   136 00000080 38F8                <1>   cmp al, bh                ; bh=2
   137 00000082 750B                <1>   jnz check_status_3        ; if (status==1) 
   138                              <1> 
   139                              <1> store_byte_2:
   140 00000084 E40E                <1>   in al,0Eh  
   141 00000086 AA                  <1>   stosb
   142                              <1> 
   143                              <1> check_status_4:
   144 00000087 E408                <1>   in al,8                   ; read status
   145 00000089 38F8                <1>   cmp al, bh                ; bh=2
   146 0000008B 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   147 0000008D EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   148                              <1> 
   149                              <1> ; ───────────────────────────────────────────────────────────────────────────
   150                              <1> 
   151                              <1> check_status_3:
   152 0000008F E408                <1>   in al, 8                  ; read status
   153 00000091 A81C                <1>   test al, 1Ch              ; 00011100
   154 00000093 7402                <1>   jz while_sectors
   155 00000095 EBBD                <1>   jmp read_sector
   156                              <1> 
   157                              <1> ; ───────────────────────────────────────────────────────────────────────────
   158                              <1> 
   159                              <1> while_sectors:
   160 00000097 E80F00              <1>   call progress_bar
   161 0000009A E299                <1>   loop next_sector
   162                              <1> 
   163                              <1> done_reading:
   164 0000009C 0E                  <1>   push cs
   165 0000009D 17                  <1>   pop ss
   166 0000009E BC0000              <1>   mov sp,0
   167 000000A1 E82D00              <1>   call clear_green
   168 000000A4 0E                  <1>   push cs
   169 000000A5 1F                  <1>   pop ds
   170 000000A6 E90D02              <1>   jmp setup
   171                              <1> 
   172                              <1> ; ───────────────────────────────────────────────────────────────────────────
   173                              <1> 
   174                              <1> progress_bar:
   175                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   176 000000A9 52                  <1>   push dx
   177 000000AA 53                  <1>   push bx
   178 000000AB 31D2                <1>   xor dx,dx
   179 000000AD B81E00              <1>   mov ax,BAR_WIDTH
   180 000000B0 BB2800              <1>   mov bx,NUM_SECTORS    
   181 000000B3 F7E1                <1>   mul cx
   182 000000B5 F7F3                <1>   div bx
   183 000000B7 5B                  <1>   pop bx
   184 000000B8 5A                  <1>   pop dx
   185 000000B9 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   186 000000BB D1E6                <1>   shl si,1                  ; *=2
   187 000000BD D1E6                <1>   shl si,1                  ; *=2  
   188 000000BF BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   189 000000C2 29F5                <1>   sub bp,si
   190 000000C4 3EC64600FF          <1>   mov byte [ds:bp],-1
   191 000000C9 C3                  <1>   ret
   192                              <1> 
   193                              <1> clear_red:
   194 000000CA B800F0              <1>   mov ax,RED
   195 000000CD E81900              <1>   call clear_channel
   196 000000D0 C3                  <1>   ret
   197                              <1> 
   198                              <1> clear_green:
   199 000000D1 B8001C              <1>   mov ax,GREEN
   200 000000D4 E81200              <1>   call clear_channel
   201 000000D7 C3                  <1>   ret
   202                              <1> 
   203                              <1> clear_blue:
   204 000000D8 B800F4              <1>   mov ax,BLUE
   205 000000DB E80B00              <1>   call clear_channel
   206 000000DE C3                  <1>   ret
   207                              <1> 
   208                              <1> clear_screen:
   209 000000DF E8E8FF              <1>   call clear_red
   210 000000E2 E8ECFF              <1>   call clear_green
   211 000000E5 E8F0FF              <1>   call clear_blue
   212 000000E8 C3                  <1>   ret
   213                              <1> 
   214                              <1> clear_channel:
   215 000000E9 8EC0                <1>   mov es,ax
   216 000000EB B9201C              <1>   mov cx,COLS*ROWS*2
   217 000000EE 31FF                <1>   xor di,di
   218 000000F0 31C0                <1>   xor ax,ax
   219 000000F2 F3AB                <1>   rep stosw         ; clear screen
   220 000000F4 C3                  <1>   ret
   221                              <1> 
   222                              <1> ; ───────────────────────────────────────────────────────────────────────────
   223                              <1> 
   224                              <1> write_char:   ; ds=FONT, es=GREEN, al=charcode
   225                              <1>   ; zou ik hier ds moeten pushen? omdat je er vanuit wilt gaan dat DS en CS altijd gelijk zijn
   226                              <1>   
   227 000000F5 1E                  <1>   push ds
   228 000000F6 06                  <1>   push es
   229                              <1> 
   230 000000F7 50                  <1>   push ax
   231 000000F8 50                  <1>   push ax
   232 000000F9 B8001C              <1>   mov ax,GREEN
   233 000000FC 8EC0                <1>   mov es,ax
   234 000000FE B800FF              <1>   mov ax,FONT
   235 00000101 8ED8                <1>   mov ds,ax
   236 00000103 58                  <1>   pop ax
   237 00000104 B408                <1>   mov ah,8
   238 00000106 F6E4                <1>   mul ah        ; al*=ah
   239 00000108 89C6                <1>   mov si,ax
   240 0000010A A5                  <1>   movsw
   241 0000010B A5                  <1>   movsw
   242 0000010C 81C71C01            <1>   add di,0x11c
   243 00000110 A5                  <1>   movsw
   244 00000111 A5                  <1>   movsw
   245 00000112 81EF2001            <1>   sub di,0x120
   246 00000116 81FF4038            <1>   cmp di,14400   ; dit later oplossen met cursor positie
   247 0000011A 7202                <1>   jb .return
   248 0000011C 31FF                <1>   xor di,di      ; move to left top. change later to scroll
   249                              <1> .return
   250 0000011E 58                  <1>   pop ax
   251                              <1> 
   252 0000011F 07                  <1>   pop es
   253 00000120 1F                  <1>   pop ds
   254 00000121 C3                  <1>   ret
   255                              <1> 
   256                              <1> ; ───────────────────────────────────────────────────────────────────────────
   257                              <1> 
   258                              <1> write_string:
   259 00000122 2E8A07              <1>   mov al,[cs:bx]
   260 00000125 43                  <1>   inc bx
   261 00000126 08C0                <1>   or al,al
   262 00000128 7405                <1>   jz .return
   263 0000012A E8C8FF              <1>   call write_char
   264 0000012D EBF3                <1>   jmp short write_string
   265                              <1> .return
   266 0000012F C3                  <1>   ret
   267                              <1> 
   268                              <1> ; ───────────────────────────────────────────────────────────────────────────
   269                              <1> 
   270                              <1> write_binary_byte:    ; input AL
   271 00000130 50                  <1>   push ax
   272 00000131 88C3                <1>   mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   273 00000133 B90800              <1>   mov cx, 8           ; We gaan 8 bits schrijven
   274                              <1> .lp:
   275 00000136 D0C3                <1>   rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   276 00000138 B80000              <1>   mov ax, 0           ; AH leegmaken
   277 0000013B 1430                <1>   adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   278 0000013D 51                  <1>   push cx             ; CX opslaan
   279 0000013E E8B4FF              <1>   call write_char      ; Schrijf het karakter naar het scherm
   280 00000141 59                  <1>   pop cx              ; CX herstellen
   281 00000142 E2F2                <1>   loop .lp            ; Loop voor alle 8 bits
   282 00000144 58                  <1>   pop ax
   283 00000145 C3                  <1>   ret
   284                              <1> 
   285                              <1> ; ───────────────────────────────────────────────────────────────────────────
   286                              <1> 
   287                              <1> write_binary_word:    ; input AX
   288 00000146 50                  <1>   push ax
   289 00000147 52                  <1>   push dx            ; DX opslaan (we gebruiken het later)
   290 00000148 89C2                <1>   mov dx, ax         ; Kopieer AX naar DX (we werken op DX)
   291 0000014A B91000              <1>   mov cx, 16         ; We gaan 16 bits schrijven
   292                              <1> .lp:
   293 0000014D D1C2                <1>   rol dx, 1          ; Rotate DX naar links (hoogste bit komt in Carry Flag)
   294 0000014F B80000              <1>   mov ax, 0          ; AH leegmaken
   295 00000152 1430                <1>   adc al, 48         ; Als Carry Flag 1 is, wordt '1', anders '0'  
   296 00000154 51                  <1>   push cx            ; CX opslaan
   297 00000155 E89DFF              <1>   call write_char    ; Schrijf het karakter naar het scherm
   298 00000158 59                  <1>   pop cx             ; CX herstellen
   299 00000159 E2F2                <1>   loop .lp           ; Loop voor alle 16 bits
   300 0000015B 5A                  <1>   pop dx             ; DX herstellen
   301 0000015C 58                  <1>   pop ax
   302 0000015D C3                  <1>   ret
   303                              <1> 
   304                              <1> ; ───────────────────────────────────────────────────────────────────────────
   305                              <1> 
   306                              <1> write_number_word:
   307 0000015E 50                  <1>     push ax
   308 0000015F 52                  <1>     push dx
   309 00000160 31D2                <1>     xor dx,dx
   310 00000162 52                  <1>     push dx ;high byte is zero
   311 00000163 31D2                <1> .clp xor dx,dx
   312 00000165 2EF736[8101]        <1>     cs div word [.base]
   313 0000016A 92                  <1>     xchg ax,dx
   314 0000016B 05300E              <1>     add ax,0xe30
   315 0000016E 50                  <1>     push ax
   316 0000016F 92                  <1>     xchg ax,dx
   317 00000170 09C0                <1>     or ax,ax
   318 00000172 75EF                <1>     jnz .clp
   319 00000174 58                  <1> .dlp pop ax
   320 00000175 08E4                <1>     or ah,ah
   321 00000177 7405                <1>     jz .done
   322 00000179 E879FF              <1>     call write_char
   323 0000017C EBF6                <1>     jmp short .dlp
   324 0000017E 5A                  <1> .done pop dx
   325 0000017F 58                  <1>     pop ax
   326 00000180 C3                  <1>     ret
   327 00000181 0A00                <1> .base dw 10
   328                              <1> 
   329                              <1> ; ───────────────────────────────────────────────────────────────────────────
   330                              <1> 
   331                              <1> write_signed_number_word:    
   332 00000183 09C0                <1>     or ax,ax
   333 00000185 790A                <1>     jns .write_return        ; if >0 write and return
   334 00000187 50                  <1>     push ax
   335 00000188 B82D00              <1>     mov ax,'-'
   336 0000018B E867FF              <1>     call write_char
   337 0000018E 58                  <1>     pop ax
   338 0000018F F7D8                <1>     neg ax                   ; destroys ax when negative
   339                              <1> .write_return:
   340 00000191 E8CAFF              <1>     call write_number_word
   341 00000194 C3                  <1>     ret
   342                              <1> 
   343                              <1> ; ───────────────────────────────────────────────────────────────────────────
   344                              <1> 
   345                              <1> check_keys:
   346 00000195 E43A                <1>   in al,0x3a        ; get keyboard status
   347 00000197 88C4                <1>   mov ah,al
   348 00000199 2408                <1>   and al,0b00001000 ; keep only 1 for 'ctrl'
   349 0000019B 2EA2[0500]          <1>   mov [cs:key.ctrl],al
   350 0000019F F6C402              <1>   test ah,2         ; keypressed flag is in ah, not in al anymore
   351 000001A2 7410                <1>   jz .return
   352 000001A4 E438                <1>   in al,0x38        ; get data byte from keyboard  
   353 000001A6 2EA2[0400]          <1>   mov [cs:key.code],al
   354 000001AA B037                <1>   mov al,0x37
   355 000001AC E63A                <1>   out 0x3a,al       ; drop key?  
   356 000001AE 0C01                <1>   or al,1           ; set zero flag to false to indicate a keypress
   357 000001B0 2EA1[0400]          <1>   mov ax,[cs:key]   ; ctrl status in ah, keycode in al, ZF low means a key was pressed
   358 000001B4 C3                  <1> .return ret
   359                              <1> 
   360                              <1> 
   361                              <1> 
   362                              <1> ;fillscreen:  ; al=lower 3 bits = Color RGBWCMYK - 4th bit = method???? - support for mask?? - or dither pattern??
   363                              <1> ;   ret
   364                              <1> 
   365                              <1> ;fillarea (minx,miny,maxx,maxy) color, pattern
   366                              <1> 
   367                              <1> ;rect (x,y,width,height) stroke color, strokeweight, fill
   368                              <1> ; much faster and simpler on the grid than off the grid
   369                              <1> ; zou je de randen buiten het grid vooraf of naderhand kunnen doen. en het deel op het grid met de snelle methode
   370                              <1> 
   371                              <1> 
   372                              <1> ; wide font by stretching the font horizontally using bitshift
   373                              <1> 
   374                              <1> 
   375                              <1> fill_white:
   376 000001B5 B8FFFF              <1>   mov ax,0xffff
   377 000001B8 E84B00              <1>   call fill_red
   378 000001BB E84F00              <1>   call fill_green
   379 000001BE E85300              <1>   call fill_blue
   380 000001C1 C3                  <1>   ret
   381                              <1> 
   382                              <1> fill_pink:
   383 000001C2 B8FFFF              <1>   mov ax,0xffff
   384 000001C5 E83E00              <1>   call fill_red
   385 000001C8 B455                <1>   mov ah,0b01010101
   386 000001CA B0AA                <1>   mov al,0b10101010
   387 000001CC E83E00              <1>   call fill_green
   388 000001CF E84200              <1>   call fill_blue
   389 000001D2 C3                  <1>   ret
   390                              <1> 
   391                              <1> fill_pink2:
   392 000001D3 B8FFFF              <1>   mov ax,0xffff
   393 000001D6 E82D00              <1>   call fill_red
   394 000001D9 B4CC                <1>   mov ah,0b11001100
   395 000001DB B033                <1>   mov al,0b00110011
   396 000001DD E82D00              <1>   call fill_green
   397 000001E0 E83100              <1>   call fill_blue
   398 000001E3 C3                  <1>   ret
   399                              <1> 
   400                              <1> fill_pink3:
   401 000001E4 B8FFFF              <1>   mov ax,0xffff
   402 000001E7 E81C00              <1>   call fill_red
   403 000001EA B411                <1>   mov ah,0b00010001
   404 000001EC B044                <1>   mov al,0b01000100
   405 000001EE E81C00              <1>   call fill_green
   406 000001F1 E82000              <1>   call fill_blue
   407 000001F4 C3                  <1>   ret
   408                              <1> 
   409                              <1> fill_pink4:
   410 000001F5 B8FFFF              <1>   mov ax,0xffff
   411 000001F8 E80B00              <1>   call fill_red
   412 000001FB B4F7                <1>   mov ah,0b11110111
   413 000001FD B07F                <1>   mov al,0b01111111
   414 000001FF E80B00              <1>   call fill_green
   415 00000202 E80F00              <1>   call fill_blue
   416 00000205 C3                  <1>   ret
   417                              <1> 
   418                              <1> fill_red:
   419 00000206 BB00F0              <1>   mov bx,RED
   420 00000209 E80F00              <1>   call fill_channel
   421 0000020C C3                  <1>   ret
   422                              <1> fill_green:
   423 0000020D BB001C              <1>   mov bx,GREEN
   424 00000210 E80800              <1>   call fill_channel
   425 00000213 C3                  <1>   ret
   426                              <1> fill_blue:
   427 00000214 BB00F4              <1>   mov bx,BLUE
   428 00000217 E80100              <1>   call fill_channel
   429 0000021A C3                  <1>   ret
   430                              <1> 
   431                              <1> fill_channel: ;ax=pattern
   432 0000021B 8EC3                <1>   mov es,bx
   433 0000021D B9201C              <1>   mov cx,COLS*ROWS*2
   434 00000220 31FF                <1>   xor di,di
   435 00000222 F3AB                <1>   rep stosw
   436 00000224 C3                  <1>   ret
   437                              <1> 
   438                              <1> ; ───────────────────────────────────────────────────────────────────────────
   439                              <1> 
   440                              <1> draw_spr:
   441 00000225 8B1C                <1>   mov bx,[si]
   442 00000227 46<rep 2h>          <1>   times 2 inc si
   443                              <1> draw_pic:
   444 00000229 B800F0              <1>   mov ax, RED
   445 0000022C E80D00              <1>   call draw_channel
   446 0000022F B8001C              <1>   mov ax, GREEN
   447 00000232 E80700              <1>   call draw_channel
   448 00000235 B800F4              <1>   mov ax, BLUE
   449 00000238 E80100              <1>   call draw_channel
   450 0000023B C3                  <1>   ret
   451                              <1> 
   452                              <1> ; ───────────────────────────────────────────────────────────────────────────
   453                              <1> 
   454                              <1> draw_channel:
   455 0000023C 57                  <1>   push di
   456 0000023D 8EC0                <1>   mov es,ax
   457 0000023F 31C9                <1>   xor cx,cx
   458 00000241 88F9                <1>   mov cl,bh        ; rows (bl)
   459                              <1> .rows_loop:
   460 00000243 51                  <1>   push cx
   461 00000244 31C9                <1>   xor cx,cx
   462 00000246 88D9                <1>   mov cl,bl        ; cols (bh)
   463                              <1> .cols_loop:
   464 00000248 A5                  <1>   movsw
   465 00000249 A5                  <1>   movsw
   466 0000024A E2FC                <1>   loop .cols_loop
   467 0000024C 81C72001            <1>   add di,COLS*4    ; one row down
   468 00000250 B400                <1>   mov ah,0
   469 00000252 88D8                <1>   mov al,bl
   470 00000254 D1E0<rep 2h>        <1>   times 2 shl ax,1
   471 00000258 29C7                <1>   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   472 0000025A 59                  <1>   pop cx
   473 0000025B E2E6                <1>   loop .rows_loop
   474 0000025D 5F                  <1>   pop di
   475 0000025E C3                  <1>   ret
   476                              <1> 
   477                              <1> ; ───────────────────────────────────────────────────────────────────────────
   478                              <1> 
   479                              <1> calc_di_from_bx:  ; input bl,bh [0,0,71,49]
   480 0000025F B89000              <1>   mov ax,144      ; 2*72 cols
   481 00000262 F6E7                <1>   mul bh          ; bh*=144 resultaat in AX
   482 00000264 D1E0                <1>   shl ax,1        ; verdubbel AX
   483 00000266 89C7                <1>   mov di,ax       ; di=ax (=bh*288)
   484 00000268 D0E3                <1>   shl bl,1        ; bl*=2
   485 0000026A D0E3                <1>   shl bl,1        ; bl*=2
   486 0000026C B700                <1>   mov bh,0
   487 0000026E 01DF                <1>   add di,bx       ; di+=bl
   488 00000270 C3                  <1>   ret
   489                              <1> ; ───────────────────────────────────────────────────────────────────────────
   490                              <1> 
   491                              <1> 
   492                              <1> ; set_cursor:
   493                              <1> ; cursor_next_char
   494                              <1> 
   495                              <1> 
   496                              <1> 
   497                              <1> ; times (512)-($-$$) db 0             ; doesn't fit in the bootsector anymore
   498                              <1> 
     2                                  %include "player.asm"
     1                              <1> ; %include "sprite.asm"
     2                              <1> 
     3                              <1> ; player:
     4                              <1> 
     5                              <1> ; .mode dw .walk_left 
     6                              <1> 
     7                              <1> ; .update:
     8                              <1> 
     9                              <1> 
    10                              <1> ;   ret
    11                              <1> 
    12                              <1> ; .draw:
    13                              <1> ;   ; xor di,di
    14                              <1> ;   ; push cs
    15                              <1> ;   ; pop ds
    16                              <1> ;   ; mov si, img.stand_1
    17                              <1> ;   ; mov bh,4 ; cols 
    18                              <1> ;   ; mov bl,4 ; rows
    19                              <1> ;   ; call draw_pic
    20                              <1> ;   ; ret
    21                              <1> 
    22                              <1> ;   push cs
    23                              <1> ;   pop ds
    24                              <1> 
    25                              <1> ;   push bp
    26                              <1> ;   mov bp,[.mode]
    27                              <1> 
    28                              <1> ;   mov bx,[bp+pos]
    29                              <1> ;   call calc_di_from_bx
    30                              <1> ;   mov si,[bp+img_data]
    31                              <1> ;   mov cl,[bp+framesize]
    32                              <1> ;   mov byte al,[bp+frame]
    33                              <1> ;   mul cl
    34                              <1> ;   add si,ax
    35                              <1> ;   mov bx,[bp+size]
    36                              <1> ;   call draw_pic
    37                              <1> ;   call .next_frame
    38                              <1> ;   pop bp
    39                              <1> ;   ret
    40                              <1> 
    41                              <1> ; .next_frame:
    42                              <1> ;   ; mov bp, .stand
    43                              <1> ;   inc byte [bp+frame]
    44                              <1> ;   mov cl,[bp+frames]
    45                              <1> ;   cmp byte [bp+frame],cl
    46                              <1> ;   jb .done
    47                              <1> ;   mov byte [bp+frame],0
    48                              <1> ; .done
    49                              <1> ;   ret
    50                              <1> 
    51                              <1> ; ; ───────────────────────────────────────────────────────────────────────────
    52                              <1> 
    53                              <1> 
    54                              <1> ; player.stand:
    55                              <1> ;   .size.w db 4
    56                              <1> ;   .size.h db 4
    57                              <1> ;   .pos.x db 5
    58                              <1> ;   .pos.y db 36
    59                              <1> ;   .vel.vx db 1
    60                              <1> ;   .vel.vy db -1
    61                              <1> ;   .frame db 0
    62                              <1> ;   .frames db 4
    63                              <1> ;   .framesize db 192
    64                              <1> ;   .data dw img.stand_1
    65                              <1> 
    66                              <1> ; player.walk_fw:
    67                              <1> ;   .size.w db 4
    68                              <1> ;   .size.h db 4
    69                              <1> ;   .pos.x db 42
    70                              <1> ;   .pos.y db 5
    71                              <1> ;   .vel.vx db -1
    72                              <1> ;   .vel.vy db 1
    73                              <1> ;   .frame db 0
    74                              <1> ;   .frames db 2
    75                              <1> ;   .framesize db 192
    76                              <1> ;   .data dw img.walk_fw_1
    77                              <1> 
    78                              <1> ; player.walk_bw:
    79                              <1> ;   .size.w db 4
    80                              <1> ;   .size.h db 4
    81                              <1> ;   .pos.x db 38
    82                              <1> ;   .pos.y db 29
    83                              <1> ;   .vel.vx db -1
    84                              <1> ;   .vel.vy db 1
    85                              <1> ;   .frame db 0
    86                              <1> ;   .frames db 2
    87                              <1> ;   .framesize db 192
    88                              <1> ;   .data dw img.walk_bw_1
    89                              <1> 
    90                              <1> ; player.walk_left:
    91                              <1> ;   .size.w db 4
    92                              <1> ;   .size.h db 4
    93                              <1> ;   .pos.x db 31
    94                              <1> ;   .pos.y db 19
    95                              <1> ;   .vel.vx db 1
    96                              <1> ;   .vel.vy db 1
    97                              <1> ;   .frame db 0
    98                              <1> ;   .frames db 4
    99                              <1> ;   .framesize db 192
   100                              <1> ;   .data dw img.walk_left_1
   101                              <1> 
   102                              <1> ; player.walk_right:
   103                              <1> ;   .size.w db 4
   104                              <1> ;   .size.h db 4
   105                              <1> ;   .pos.x db 29
   106                              <1> ;   .pos.y db 13
   107                              <1> ;   .vel.vx db 1
   108                              <1> ;   .vel.vy db -1
   109                              <1> ;   .frame db 0
   110                              <1> ;   .frames db 4
   111                              <1> ;   .framesize db 192
   112                              <1> ;   .data dw img.walk_right_1
     3                                  
     4 00000271 4F74686572206B6579-     msg_other_key: db 'Other key   ',0
     4 0000027A 20202000           
     5 0000027E 202020202000            msg_spaces:    db '     ',0
     6 00000284 76783A2000              msg_vx:    db 'vx: ',0
     7                                  
     8                                  ship:
     9                                   .pos:
    10 00000289 0090                     .pos.x: dw 73728/2
    11 0000028B D06B                     .pos.y: dw 51200/2 + 2000
    12                                   .vel: 
    13 0000028D F6FF                     .vel.x: dw -10
    14 0000028F 0000                     .vel.y: dw 0
    15 00000291 0000                     .vel.flags: dw 0
    16                                   .acc:
    17 00000293 0000                     .acc.x: dw 0
    18 00000295 0000                     .acc.y: dw 0
    19                                   .forces:
    20 00000297 0000                     .forces.x: dw 0
    21 00000299 0000                     .forces.y: dw 0
    22 0000029B 0000                     .angle: dw 0
    23 0000029D 0000                     .prev_di: dw 0
    24                                  
    25 0000029F 02                      color: db Color.G
    26                                  
    27 000002A0 [C422][CA2B][D034]-     img_lut: dw img_down_right, img_down, img_down_left, img_NONE, img_right, img_NONE, img_left, img_NONE, img_up_right, img_up, img_up_left
    27 000002A6 [B004][BE19][B004]-
    27 000002AC [D63D][B004][B810]-
    27 000002B2 [B207][DC46]       
    28                                  
    29                                  ; ───────────────────────────────────────────────────────────────────────────
    30                                  
    31                                  setup:
    32 000002B6 31ED                      xor bp,bp
    33 000002B8 E9DF00                    jmp draw
    34                                  
    35                                  ; ───────────────────────────────────────────────────────────────────────────
    36                                  
    37                                  ; vec_mult:   ; cx scalar, ax=x, bx=y
    38                                    
    39                                  FRICTION equ 94
    40                                  
    41                                  update_ship:
    42                                    
    43                                    ; x+=vx
    44 000002BB A1[8902]                  mov ax,[ship.pos.x]       ; 0..73728  (65536)
    45 000002BE 0306[8D02]                add ax,[ship.vel.x]
    46 000002C2 A3[8902]                  mov [ship.pos.x],ax
    47                                  
    48                                    ; y+=vy
    49 000002C5 A1[8B02]                  mov ax,[ship.pos.y]       ; 0..51200  (=1024*50)
    50 000002C8 0306[8F02]                add ax,[ship.vel.y]
    51 000002CC A3[8B02]                  mov [ship.pos.y],ax
    52                                  
    53                                    ; vx*=98%
    54 000002CF A1[8D02]                  mov ax, [ship.vel.x]
    55 000002D2 99                        cwd                 ; Convert word to double word (sign-extend AX into DX)
    56 000002D3 B95E00                    mov cx, FRICTION
    57 000002D6 F7E9                      imul cx             ; Signed multiplication
    58 000002D8 B96400                    mov cx, 100
    59 000002DB F7F9                      idiv cx             ; Signed division
    60 000002DD A3[8D02]                  mov [ship.vel.x], ax
    61                                  
    62                                    ; vy*=98%
    63 000002E0 A1[8F02]                  mov ax, [ship.vel.y]
    64 000002E3 99                        cwd                 ; Convert word to double word (sign-extend AX into DX)
    65 000002E4 B95E00                    mov cx, FRICTION
    66 000002E7 F7E9                      imul cx             ; Signed multiplication
    67 000002E9 B96400                    mov cx, 100
    68 000002EC F7F9                      idiv cx             ; Signed division
    69 000002EE A3[8F02]                  mov [ship.vel.y], ax
    70                                  
    71                                    ; velocity flags
    72 000002F1 A1[8D02]                  mov ax,[ship.vel.x]
    73 000002F4 83C800                    or ax,0
    74 000002F7 9C                        pushf
    75 000002F8 58                        pop ax
    76 000002F9 B106                      mov cl,6
    77 000002FB D2E8                      shr al,cl
    78 000002FD 86D8                      xchg al,bl
    79 000002FF A1[8F02]                  mov ax,[ship.vel.y]
    80 00000302 83C800                    or ax,0
    81 00000305 9C                        pushf
    82 00000306 58                        pop ax
    83 00000307 B104                      mov cl,4
    84 00000309 D2E8                      shr al,cl
    85 0000030B 09D8                      or ax,bx
    86 0000030D 83E00F                    and ax,15
    87 00000310 A3[9102]                  mov word [ship.vel.flags],ax
    88                                  
    89                                    ; 0=down-right
    90                                    ; 1=down
    91                                    ; 2=down-left
    92                                    ; 3=################
    93                                    ; 4=rechts
    94                                    ; 5=#### IDLE ####
    95                                    ; 6=links
    96                                    ; 4=###############
    97                                    ; 8=up-right
    98                                    ; 9=up
    99                                    ; 10=up-left
   100                                  
   101 00000313 C3                        ret
   102                                  
   103                                  ; ───────────────────────────────────────────────────────────────────────────
   104                                  
   105                                  draw_ship:
   106                                  
   107 00000314 A1[8902]                  mov ax,[ship.pos.x]
   108 00000317 8B1E[8B02]                mov bx,[ship.pos.y]
   109 0000031B E88701                    call world2screen
   110 0000031E E83EFF                    call calc_di_from_bx
   111                                  
   112 00000321 393E[9D02]                cmp [ship.prev_di],di
   113 00000325 744A                      je .return
   114                                  
   115                                    ; call world2screen ; ax and bx are already set by pop bx, pop ax
   116                                    ; call calc_di_from_bx
   117                                  
   118 00000327 8B3E[9D02]                mov di,[ship.prev_di]
   119                                    
   120 0000032B B800F0                    mov ax,RED
   121 0000032E BB0808                    mov bx,0x0808  ; rows,cols
   122 00000331 E83E00                    call clear_area
   123                                  
   124 00000334 B8001C                    mov ax,GREEN
   125 00000337 BB0808                    mov bx,0x0808  ; rows,cols
   126 0000033A E83500                    call clear_area
   127                                  
   128 0000033D B800F4                    mov ax,BLUE
   129 00000340 BB0808                    mov bx,0x0808  ; rows,cols
   130 00000343 E82C00                    call clear_area
   131                                  
   132 00000346 A1[8902]                  mov ax,[ship.pos.x]
   133 00000349 8B1E[8B02]                mov bx,[ship.pos.y]
   134 0000034D E85501                    call world2screen
   135 00000350 E80CFF                    call calc_di_from_bx
   136 00000353 893E[9D02]                mov [ship.prev_di],di
   137                                  
   138                                    ; mov ax,GREEN
   139                                    ; mov es,ax
   140                                    ; mov ax,-1
   141                                    ; stosw
   142                                    ; stosw
   143                                  
   144                                    ;select sprite frame based on ship direction
   145 00000357 8B2E[9102]                mov bp,[ship.vel.flags]
   146 0000035B D1E5                      shl bp,1 ; *=2
   147 0000035D 8BB6[A002]                mov si,[img_lut+bp]
   148                                  
   149 00000361 A1[8902]                  mov ax,[ship.pos.x]
   150 00000364 8B1E[8B02]                mov bx,[ship.pos.y]
   151 00000368 E83A01                    call world2screen ; ax and bx are already set by pop bx, pop ax
   152 0000036B E8F1FE                    call calc_di_from_bx
   153                                  
   154 0000036E E8B4FE                    call draw_spr
   155                                  .return
   156 00000371 C3                        ret
   157                                  
   158                                  ; ───────────────────────────────────────────────────────────────────────────
   159                                  
   160                                  clear_area: ; ax=channel, bx=area, di=start pos
   161 00000372 53                        push bx
   162 00000373 57                        push di
   163 00000374 8EC0                      mov es,ax
   164 00000376 31C9                      xor cx,cx
   165 00000378 88F9                      mov cl,bh        ; rows (bl)
   166                                  .rows_loop:
   167 0000037A 51                        push cx
   168 0000037B 31C9                      xor cx,cx
   169 0000037D 88D9                      mov cl,bl        ; cols (bh)
   170                                  .cols_loop:
   171 0000037F B80000                    mov ax,0
   172 00000382 AB                        stosw
   173 00000383 AB                        stosw
   174 00000384 E2F9                      loop .cols_loop
   175 00000386 81C72001                  add di,COLS*4    ; one row down
   176 0000038A B400                      mov ah,0
   177 0000038C 88D8                      mov al,bl
   178 0000038E D1E0<rep 2h>              times 2 shl ax,1
   179 00000392 29C7                      sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   180 00000394 59                        pop cx
   181 00000395 E2E3                      loop .rows_loop
   182 00000397 5F                        pop di
   183 00000398 5B                        pop bx
   184 00000399 C3                        ret
   185                                    
   186                                  ; ───────────────────────────────────────────────────────────────────────────
   187                                  
   188                                  draw:
   189 0000039A 0E                        push cs
   190 0000039B 1F                        pop ds   ; make sure DS is set to CS for data lookups like [ship.pos.x]
   191                                  
   192 0000039C E81CFF                    call update_ship
   193 0000039F E872FF                    call draw_ship
   194                                  
   195 000003A2 E8F800                    call _wait
   196                                  
   197 000003A5 45                        inc bp
   198                                  
   199                                    set_cursor 12,45
    45 000003A6 BFB41B              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   200                                    print "frame: "
    50 000003A9 EB08                <1>  jmp %%endstr
    51 000003AB 6672616D653A2000    <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 000003B3 BB[AB03]            <1>  mov bx,%%str
    54 000003B6 E869FD              <1>  call write_string
   201 000003B9 89E8                      mov ax,bp
   202 000003BB E8A0FD                    call write_number_word     ; draw frame counter
   203                                    print "  "
    50 000003BE EB03                <1>  jmp %%endstr
    51 000003C0 202000              <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 000003C3 BB[C003]            <1>  mov bx,%%str
    54 000003C6 E859FD              <1>  call write_string
   204                                  
   205                                    set_cursor 13,45
    45 000003C9 BFF41D              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   206                                    print "vx: "
    50 000003CC EB05                <1>  jmp %%endstr
    51 000003CE 76783A2000          <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 000003D3 BB[CE03]            <1>  mov bx,%%str
    54 000003D6 E849FD              <1>  call write_string
   207 000003D9 A1[8D02]                  mov ax,[ship.vel.x]  
   208 000003DC E8A4FD                    call write_signed_number_word
   209                                    print "  "
    50 000003DF EB03                <1>  jmp %%endstr
    51 000003E1 202000              <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 000003E4 BB[E103]            <1>  mov bx,%%str
    54 000003E7 E838FD              <1>  call write_string
   210                                  
   211                                    set_cursor 14,45
    45 000003EA BF3420              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   212                                    print "vy: "
    50 000003ED EB05                <1>  jmp %%endstr
    51 000003EF 76793A2000          <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 000003F4 BB[EF03]            <1>  mov bx,%%str
    54 000003F7 E828FD              <1>  call write_string
   213 000003FA A1[8F02]                  mov ax,[ship.vel.y]
   214 000003FD E883FD                    call write_signed_number_word     ; draw vy
   215                                    print "  "
    50 00000400 EB03                <1>  jmp %%endstr
    51 00000402 202000              <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 00000405 BB[0204]            <1>  mov bx,%%str
    54 00000408 E817FD              <1>  call write_string
   216                                  
   217                                    set_cursor 15,45
    45 0000040B BF7422              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   218                                    print "flags: "
    50 0000040E EB08                <1>  jmp %%endstr
    51 00000410 666C6167733A2000    <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 00000418 BB[1004]            <1>  mov bx,%%str
    54 0000041B E804FD              <1>  call write_string
   219 0000041E A1[9102]                  mov ax,[ship.vel.flags]
   220 00000421 E83AFD                    call write_number_word     
   221                                    print "  "
    50 00000424 EB03                <1>  jmp %%endstr
    51 00000426 202000              <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 00000429 BB[2604]            <1>  mov bx,%%str
    54 0000042C E8F3FC              <1>  call write_string
   222                                  
   223                                    set_cursor 16,45
    45 0000042F BFB424              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   224                                    print "flags: "
    50 00000432 EB08                <1>  jmp %%endstr
    51 00000434 666C6167733A2000    <1>  %%str: db %1,0
    52                              <1>  %%endstr:
    53 0000043C BB[3404]            <1>  mov bx,%%str
    54 0000043F E8E0FC              <1>  call write_string
   225 00000442 A1[9102]                  mov ax,[ship.vel.flags]
   226 00000445 E8FEFC                    call write_binary_word     ; flags
   227                                  
   228 00000448 E84AFD                    call check_keys
   229 0000044B 7503                      jnz on_key
   230                                    ;else
   231 0000044D E94AFF                    jmp draw          ; this code is only getting called when no key is pressed
   232                                  
   233                                  ; ───────────────────────────────────────────────────────────────────────────
   234                                  
   235                                  on_key:
   236                                    set_cursor 2,10
    45 00000450 BFA804              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   237 00000453 A1[0400]                  mov ax,[key]
   238 00000456 E8EDFC                    call write_binary_word
   239 00000459 83F877                    cmp ax,'w'
   240 0000045C 7418                      je on_key_w
   241 0000045E 83F861                    cmp ax,'a'
   242 00000461 741B                      je on_key_a
   243 00000463 83F873                    cmp ax,'s'
   244 00000466 741E                      je on_key_s
   245 00000468 83F864                    cmp ax,'d'
   246 0000046B 7421                      je on_key_d
   247 0000046D BB[7102]                  mov bx, msg_other_key             ; msg_other_key
   248 00000470 E82300                    call print_msg
   249                                  .done
   250 00000473 E924FF                    jmp draw  ; no ret here because onkey is called by jnz
   251                                  
   252                                  
   253                                  STEP equ 500
   254                                  
   255                                  ; ───────────────────────────────────────────────────────────────────────────
   256                                  
   257                                  on_key_w:
   258 00000476 812E[8F02]F401            sub word [ship.vel.y], STEP
   259 0000047C EBF5                      jmp on_key.done
   260                                  
   261                                  ; ───────────────────────────────────────────────────────────────────────────
   262                                  
   263                                  on_key_a:
   264 0000047E 812E[8D02]F401            sub word [ship.vel.x], STEP
   265 00000484 EBED                      jmp on_key.done
   266                                  
   267                                  ; ───────────────────────────────────────────────────────────────────────────
   268                                  
   269                                  on_key_s:
   270 00000486 8106[8F02]F401            add word [ship.vel.y], STEP
   271 0000048C EBE5                      jmp on_key.done
   272                                  
   273                                  ; ───────────────────────────────────────────────────────────────────────────
   274                                  
   275                                  on_key_d:
   276 0000048E 8106[8D02]F401            add word [ship.vel.x], STEP
   277 00000494 EBDD                      jmp on_key.done
   278                                  
   279                                  ; ───────────────────────────────────────────────────────────────────────────
   280                                  
   281                                  print_msg:
   282                                    set_cursor 1,10
    45 00000496 BF6802              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   283 00000499 E886FC                    call write_string
   284 0000049C C3                        ret
   285                                  
   286                                  ; ───────────────────────────────────────────────────────────────────────────
   287                                  
   288                                  _wait:
   289                                    DELAY EQU 250
   290 0000049D B9FA00                    mov cx,DELAY
   291 000004A0 D40A                      .lp aam
   292 000004A2 E2FC                      loop .lp
   293 000004A4 C3                        ret
   294                                  
   295                                  ; ───────────────────────────────────────────────────────────────────────────
   296                                  
   297                                  world2screen:  ; input (ax,bx) = (world.x, world.y)   ; screen (row,col)
   298                                    ; WORLD:
   299                                    ;   0..73728  (65536) -> col
   300                                    ;   0..51200  (=1024*50) -> row
   301                                    ; SCREEN (ROW,COL):
   302                                    ;   0..49 (row)
   303                                    ;   0..71 (col)
   304 000004A5 B10A                      mov cl,10
   305 000004A7 D3EB                      shr bx,cl   ; //bl=row 0..49
   306 000004A9 D3E8                      shr ax,cl   ; 
   307 000004AB 88C7                      mov bh,al   ; //bh=col 0..71
   308 000004AD 86DF                      xchg bh,bl
   309 000004AF C3                        ret
   310                                  
   311                                  ; ───────────────────────────────────────────────────────────────────────────
   312                                  
   313                                  ; 180 items but full 360 range divide AX by 2 or SHR AX,1 then do XLAT
   314                                  ; lut_sin: db 0,3,6,10,13,17,20,24,27,30,34,37,40,43,46,50,52,55,58,61,64,66,69,71,74,76,78,80,82,84,86,88,89,91,92,93,95,96,97,97,98,99,99,99,99,100,99,99,99,99,98,97,97,96,95,93,92,91,89,88,86,84,82,80,78,76,74,71,69,66,64,61,58,55,52,50,46,43,40,37,34,30,27,24,20,17,13,10,6,3,0,-3,-6,-10,-13,-17,-20,-24,-27,-30,-34,-37,-40,-43,-46,-49,-52,-55,-58,-61,-64,-66,-69,-71,-74,-76,-78,-80,-82,-84,-86,-88,-89,-91,-92,-93,-95,-96,-97,-97,-98,-99,-99,-99,-99,-100,-99,-99,-99,-99,-98,-97,-97,-96,-95,-93,-92,-91,-89,-88,-86,-84,-82,-80,-78,-76,-74,-71,-69,-66,-64,-61,-58,-55,-52,-50,-46,-43,-40,-37,-34,-30,-27,-24,-20,-17,-13,-10,-6,-3
   315                                  ; lut_cos: db 100,99,99,99,99,98,97,97,96,95,93,92,91,89,88,86,84,82,80,78,76,74,71,69,66,64,61,58,55,52,49,46,43,40,37,34,30,27,24,20,17,13,10,6,3,0,-3,-6,-10,-13,-17,-20,-24,-27,-30,-34,-37,-40,-43,-46,-50,-52,-55,-58,-61,-64,-66,-69,-71,-74,-76,-78,-80,-82,-84,-86,-88,-89,-91,-92,-93,-95,-96,-97,-97,-98,-99,-99,-99,-99,-100,-99,-99,-99,-99,-98,-97,-97,-96,-95,-93,-92,-91,-89,-88,-86,-84,-82,-80,-78,-76,-74,-71,-69,-66,-64,-61,-58,-55,-52,-49,-46,-43,-40,-37,-34,-30,-27,-24,-20,-17,-13,-10,-6,-3,0,3,6,10,13,17,20,24,27,30,34,37,40,43,46,49,52,55,58,61,64,66,69,71,74,76,78,80,82,84,86,88,89,91,92,93,95,96,97,97,98,99,99,99,99
   316                                  
   317                                  ; FIXME
   318 000004B0 <bin 302h>              img_NONE: incbin "data/ship-24.spr"
   319                                  
   320                                  
   321                                  img_up:
   322 000007B2 <bin 302h>              img1: incbin "data/ship-1.spr" ;up
   323 00000AB4 <bin 302h>              img2: incbin "data/ship-2.spr"
   324 00000DB6 <bin 302h>              img3: incbin "data/ship-3.spr"
   325                                  img_up_right:
   326 000010B8 <bin 302h>              img4: incbin "data/ship-4.spr" ;up-right
   327 000013BA <bin 302h>              img5: incbin "data/ship-5.spr"
   328 000016BC <bin 302h>              img6: incbin "data/ship-6.spr"
   329                                  img_right:
   330 000019BE <bin 302h>              img7: incbin "data/ship-7.spr" ;right
   331 00001CC0 <bin 302h>              img8: incbin "data/ship-8.spr"
   332 00001FC2 <bin 302h>              img9: incbin "data/ship-9.spr"
   333                                  img_down_right:
   334 000022C4 <bin 302h>              img10: incbin "data/ship-10.spr" ;down-right
   335 000025C6 <bin 302h>              img11: incbin "data/ship-11.spr"
   336 000028C8 <bin 302h>              img12: incbin "data/ship-12.spr"
   337                                  img_down:
   338 00002BCA <bin 302h>              img13: incbin "data/ship-13.spr" ;down
   339 00002ECC <bin 302h>              img14: incbin "data/ship-14.spr"
   340 000031CE <bin 302h>              img15: incbin "data/ship-15.spr"
   341                                  img_down_left:
   342 000034D0 <bin 302h>              img16: incbin "data/ship-16.spr" ;down-left
   343 000037D2 <bin 302h>              img17: incbin "data/ship-17.spr"
   344 00003AD4 <bin 302h>              img18: incbin "data/ship-18.spr"
   345                                  img_left:
   346 00003DD6 <bin 302h>              img19: incbin "data/ship-19.spr" ;left
   347 000040D8 <bin 302h>              img20: incbin "data/ship-20.spr"
   348 000043DA <bin 302h>              img21: incbin "data/ship-21.spr"
   349                                  img_up_left:
   350 000046DC <bin 302h>              img22: incbin "data/ship-22.spr" ;up-left
   351 000049DE <bin 302h>              img23: incbin "data/ship-23.spr"
   352 00004CE0 <bin 302h>              img24: incbin "data/ship-24.spr"
   353                                  
   354                                  
   355 00004FE2 00<rep 2801Eh>          times (180*1024)-($-$$) db 0
   356                                  
   357                                  
   358                                  
