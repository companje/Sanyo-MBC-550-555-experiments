     1                                  org 0
     2                                  cpu 8086
     3                                  ; CPU 186
     4                                  
     5                                  RED   equ 0xf000
     6                                  GREEN equ 0x0c00
     7                                  BLUE  equ 0xf400
     8                                  COLS  equ 72
     9                                  
    10                                  FONT equ 0xFF00
    11                                  ; FONT_BASE equ 0x1000   ; Startadres van de font-tabel in ROM
    12                                  ; CHAR_SIZE equ 8        ; Aantal bytes per karakter in de font-tabel
    13                                  ; ROW_OFFSET equ 4*COLS-4  ; Offset naar de volgende rij voor de onderste helft van een karakter
    14                                  
    15                                  LINES_PER_ROW equ 4
    16                                  COLS_PER_ROW equ 72
    17                                  
    18 00000000 EB1D                    jmp setup
    19                                  
    20 00000002 53616E796F312E3202-     db 'Sanyo1.2',2,0,1,0,0,2,112,0,0,0,2,0,253,2,0,9,0,2,0
    20 0000000B 000100000270000000-
    20 00000014 0200FD020009000200 
    21                                  
    22 0000001D 00                      row: db 0
    23 0000001E 00                      col: db 0
    24                                  
    25                                  setup:
    26                                    ; call blue_bg
    27                                  
    28                                    ; call rom_to_vram
    29                                  
    30                                    ; hlt
    31                                    
    32                                    ; mov bh,10
    33                                    ; mov bl,30
    34                                    ; call draw_char_at
    35                                    ; call calculate_di
    36                                  
    37                                    ; mov ax,GREEN           ; Laad het videosegment in ES
    38                                    ; mov es,ax 
    39                                  
    40                                    ; mov di,0
    41                                    ; mov cx,0x1000
    42                                    ; mov al,255
    43                                    ; rep stosb
    44                                  
    45 0000001F B8000C                    mov ax,GREEN           ; Laad het videosegment in ES
    46 00000022 8EC0                      mov es,ax
    47 00000024 B80100                    mov ax,1
    48 00000027 B90400                    mov cx,4
    49 0000002A F7E1                      mul cx 
    50 0000002C 89C7                      mov di,ax
    51                                  
    52                                  
    53 0000002E B98000                    mov cx,128
    54                                  print_loop:
    55 00000031 88C8                      mov al,cl
    56 00000033 E80300                    call draw_char
    57 00000036 E2F9                      loop print_loop
    58                                  
    59                                    ; mov al,66
    60                                    ; call draw_char
    61                                  
    62                                  draw:
    63 00000038 F4                        hlt
    64                                  
    65                                  draw_string:
    66                                  
    67                                  draw_char:   ; al=char
    68 00000039 51                        push cx
    69 0000003A B900FF                    mov cx,FONT
    70 0000003D 8ED9                      mov ds,cx
    71 0000003F 30E4                      xor ah,ah
    72 00000041 B90800                    mov cx,8
    73 00000044 F7E1                      mul cx
    74 00000046 96                        xchg si,ax
    75 00000047 D1E9                      shr cx,1     ; = mov cx,4 want cx was hiervoor 8
    76 00000049 51                        push cx
    77 0000004A F3A4                      rep movsb
    78 0000004C 81C71C01                  add di,4*COLS-4
    79 00000050 59                        pop cx
    80 00000051 F3A4                      rep movsb
    81 00000053 81EF2001                  sub di, 4*COLS
    82 00000057 59                        pop cx
    83 00000058 C3                        ret
    84                                  
    85                                  ; calculate_di:
    86                                      ; Bereken BH * LINES_PER_ROW * COLS_PER_ROW
    87                                      ; mov al, bh               ; Zet de waarde van BH in AL
    88                                      ; cbw                      ; Zet AL naar AX (breid uit met tekenextensie)
    89                                      ; mov cx, LINES_PER_ROW    ; Zet LINES_PER_ROW in CX
    90                                      ; imul cx                  ; AX = BH * LINES_PER_ROW
    91                                  
    92                                      ; mov cx, COLS_PER_ROW     ; Zet COLS_PER_ROW in CX
    93                                      ; imul cx                  ; AX = AX * COLS_PER_ROW
    94                                      ; mov di, ax               ; Zet het resultaat in DI
    95                                  
    96                                      ; ; Bereken BL * COLS_PER_ROW en tel het op bij DI
    97                                      ; mov al, bl               ; Zet kolomwaarde (BL) in AL
    98                                      ; cbw                      ; Zet AL naar AX (tekenextensie)
    99                                      ; imul cx                  ; AX = BL * COLS_PER_ROW
   100                                      ; add di, ax               ; DI = DI + AX (het uiteindelijke offset)
   101                                  
   102                                      ; mov ax,RED
   103                                      ; mov es,ax
   104                                      ; ret                      ; Keer terug, DI bevat nu het berekende adres
   105                                  
   106                                  ; set_pos:
   107                                  ;   mov ax, 0xFE00           ; Laad het segmentadres van de ROM in DS
   108                                  ;   mov ds, ax               ; DS = ROM-segment
   109                                  ;   mov ax, 0x0C00           ; Laad het videosegment in ES
   110                                  ;   mov es, ax               ; ES = video-segment
   111                                  ;   mov di, 0                ; Zet DI op het startadres in videogeheugen
   112                                  
   113                                  
   114                                  ; draw_char_at:
   115                                  ;   mov ax, 0xFF00       ; Laad het segmentadres van de ROM in DS
   116                                  ;   mov ds, ax           ; DS = ROM-segment
   117                                  ;   mov ax, 0x0C00       ; Laad het videosegment in ES
   118                                  ;   mov es, ax           ; ES = video-segment
   119                                  ;   mov si, 0       ; Offset voor karakter 0x01 in de font-tabel (0x01 * 8 bytes = 0x08)
   120                                    
   121                                  ;   ; add si, ax
   122                                  
   123                                  
   124                                  ;   mov di, 0             ; Zet DI op het startadres in videogeheugen voor de bovenste helft
   125                                  ;   mov cx, 4            ; Aantal bytes voor de bovenste helft
   126                                  ;   rep movsb            ; Kopieer de eerste 4 bytes van DS:SI naar ES:DI
   127                                  ;   add di, 4*COLS-4         ; Zet DI naar de positie voor de onderste helft (4 rijen verder)
   128                                  ;   mov cx, 4            ; Aantal bytes voor de onderste helft
   129                                  ;   rep movsb            ; Kopieer de volgende 4 bytes van DS:SI naar ES:DI
   130                                  ;   ret
   131                                  
   132                                  blue_bg:
   133 00000059 B800F4                    mov ax,BLUE
   134 0000005C 50                        push ax
   135 0000005D 07                        pop es
   136 0000005E BF0000                    mov di,0
   137 00000061 B90040                    mov cx,0x4000
   138 00000064 B0FF                      mov al,255
   139 00000066 F3AA                      rep stosb
   140 00000068 C3                        ret
   141                                  
   142                                  rom_to_vram:
   143 00000069 B800FE                    mov ax, 0xFE00
   144 0000006C 8ED8                      mov ds, ax       ; DS source segment
   145 0000006E B8000C                    mov ax, 0x0C00
   146 00000071 8EC0                      mov es, ax       ; ES dest segment
   147 00000073 BE0010                    mov si, 0x1000   ; FONT offset in ROM
   148 00000076 BF0000                    mov di, 0        ; dest index
   149 00000079 B90040                    mov cx, 0x4000   ; 8000 bytes (0x4000 in hexadecimal)
   150 0000007C F3A4                      rep movsb        ; Kopieer CX bytes van DS:SI naar ES:DI
   151 0000007E C3                        ret
   152                                  
   153                                  img: 
   154 0000007F <bin BB84h>               incbin "zwembad.pic"
   155                                  
   156                                  %assign num $-$$
   157                                  
   158 0000BC03 00<rep 4E3FDh>          times 368640-num db  0
