     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4                              <1> NUM_SECTORS equ 40          ; number of sectors to read
     5                              <1> BAR_WIDTH equ 30
     6                              <1> COLS  equ 72
     7                              <1> ROWS  equ 50
     8                              <1> LINES equ 200
     9                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    10                              <1> RED   equ 0xf000
    11                              <1> GREEN equ 0x1c00
    12                              <1> BLUE  equ 0xf400
    13                              <1> DST   equ 0x38              ; absolute addres: 32592
    14                              <1> XD    equ 4
    15                              <1> YD    equ COLS*XD
    16                              <1> 
    17                              <1> boot:
    18 00000000 FA                  <1>   cli
    19 00000001 FC                  <1>   cld
    20 00000002 E8AF00              <1>   call clear_green          
    21 00000005 B005                <1>   mov al, 5
    22 00000007 E610                <1>   out 10h, al               ; select address 0x1c000 as green video page
    23 00000009 B8001C              <1>   mov ax,GREEN      
    24 0000000C 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
    25 0000000E B83800              <1>   mov ax,DST                
    26 00000011 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
    27 00000013 BF0000              <1>   mov di,0                  ;
    28 00000016 B200                <1>   mov dl,0                  ; track=0
    29 00000018 B601                <1>   mov dh,1                  ; sector=1
    30 0000001A B92800              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
    31 0000001D EB0B                <1>   jmp move_head
    32                              <1> 
    33                              <1> ; ───────────────────────────────────────────────────────────────────────────
    34                              <1> 
    35                              <1> next_sector:
    36 0000001F FEC6                <1>   inc dh                    ; sector++
    37 00000021 80FE0A              <1>   cmp dh,10
    38 00000024 7218                <1>   jb read_sector           ; if (dh<9) read_sector
    39 00000026 B601                <1>   mov dh,1
    40 00000028 FEC2                <1>   inc dl                    ; else track++ ; sector=1
    41                              <1> 
    42                              <1> move_head:
    43 0000002A 88D0                <1>   mov al,dl
    44 0000002C E60E                <1>   out 0Eh,al               ; set track number
    45 0000002E B018                <1>   mov al,18h     
    46 00000030 E608                <1>   out 8,al                 ; seek track, load head
    47 00000032 B000                <1>   mov al,0
    48 00000034 E61C                <1>   out 1Ch,al               ; set desired drive/side
    49 00000036 D40A                <1>   aam
    50                              <1> 
    51                              <1> head_moving:
    52 00000038 E408                <1>   in al,8
    53 0000003A A801                <1>   test al,1
    54 0000003C 75FA                <1>   jnz head_moving
    55                              <1> 
    56                              <1> read_sector:
    57 0000003E 88F0                <1>   mov al,dh
    58 00000040 E60C                <1>   out 0Ch,al                ; sector number
    59 00000042 B702                <1>   mov bh,2                  ; 00000010b
    60 00000044 B396                <1>   mov bl,96h                ; 10010110b
    61 00000046 B400                <1>   mov ah,0
    62 00000048 B080                <1>   mov al,80h
    63 0000004A E608                <1>   out 8,al                  ; read sector
    64 0000004C D40A<rep 4h>        <1>   times 4 aam               ; wait
    65                              <1> 
    66                              <1> check_status_1:
    67 00000054 E408                <1>   in al,8                   ; read status
    68 00000056 D0F8                <1>   sar al,1                  ; status/=2
    69 00000058 731F                <1>   jnb check_status_3
    70 0000005A 75F8                <1>   jnz check_status_1
    71                              <1> 
    72                              <1> wait_for_data:
    73 0000005C E408                <1>   in al,8                   ; read status
    74 0000005E 20D8                <1>   and al,bl                 ; 96h
    75 00000060 74FA                <1>   jz wait_for_data
    76                              <1> 
    77                              <1> store_byte_1:
    78 00000062 E40E                <1>   in al,0Eh
    79 00000064 AA                  <1>   stosb
    80                              <1> 
    81                              <1> check_status_2:
    82 00000065 E408                <1>   in al,8                   ; read status
    83 00000067 48                  <1>   dec ax                    ; status--
    84 00000068 74FB                <1>   jz check_status_2         ; if (status==0) repeat
    85 0000006A 38F8                <1>   cmp al, bh                ; bh=2
    86 0000006C 750B                <1>   jnz check_status_3        ; if (status==1) 
    87                              <1> 
    88                              <1> store_byte_2:
    89 0000006E E40E                <1>   in al,0Eh  
    90 00000070 AA                  <1>   stosb
    91                              <1> 
    92                              <1> check_status_4:
    93 00000071 E408                <1>   in al,8                   ; read status
    94 00000073 38F8                <1>   cmp al, bh                ; bh=2
    95 00000075 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
    96 00000077 EBEC                <1>   jmp check_status_2        ; else: was jmp SI
    97                              <1> 
    98                              <1> ; ───────────────────────────────────────────────────────────────────────────
    99                              <1> 
   100                              <1> check_status_3:
   101 00000079 E408                <1>   in al, 8                  ; read status
   102 0000007B A81C                <1>   test al, 1Ch              ; 00011100
   103 0000007D 7402                <1>   jz while_sectors
   104 0000007F EBBD                <1>   jmp read_sector
   105                              <1> 
   106                              <1> ; ───────────────────────────────────────────────────────────────────────────
   107                              <1> 
   108                              <1> while_sectors:
   109 00000081 E80F00              <1>   call progress_bar
   110 00000084 E299                <1>   loop next_sector
   111                              <1> 
   112                              <1> done_reading:
   113 00000086 0E                  <1>   push cs
   114 00000087 17                  <1>   pop ss
   115 00000088 BC0000              <1>   mov sp,0
   116 0000008B E82600              <1>   call clear_green
   117 0000008E 0E                  <1>   push cs
   118 0000008F 1F                  <1>   pop ds
   119 00000090 E97201              <1>   jmp setup
   120                              <1> 
   121                              <1> ; ───────────────────────────────────────────────────────────────────────────
   122                              <1> 
   123                              <1> progress_bar:
   124                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   125 00000093 52                  <1>   push dx
   126 00000094 53                  <1>   push bx
   127 00000095 31D2                <1>   xor dx,dx
   128 00000097 B81E00              <1>   mov ax,BAR_WIDTH
   129 0000009A BB2800              <1>   mov bx,NUM_SECTORS    
   130 0000009D F7E1                <1>   mul cx
   131 0000009F F7F3                <1>   div bx
   132 000000A1 5B                  <1>   pop bx
   133 000000A2 5A                  <1>   pop dx
   134 000000A3 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   135 000000A5 D1E6                <1>   shl si,1                  ; *=2
   136 000000A7 D1E6                <1>   shl si,1                  ; *=2  
   137 000000A9 BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   138 000000AC 29F5                <1>   sub bp,si
   139 000000AE 3EC64600FF          <1>   mov byte [ds:bp],-1
   140 000000B3 C3                  <1>   ret
   141                              <1> 
   142                              <1> clear_green:
   143 000000B4 B9201C              <1>   mov cx,COLS*ROWS*2
   144 000000B7 B8001C              <1>   mov ax,GREEN
   145 000000BA 8EC0                <1>   mov es,ax
   146 000000BC 31FF                <1>   xor di,di
   147 000000BE 31C0                <1>   xor ax,ax
   148 000000C0 F3AB                <1>   rep stosw         ; clear screen
   149 000000C2 C3                  <1>   ret
   150                              <1> 
   151                              <1> ; ───────────────────────────────────────────────────────────────────────────
   152                              <1> 
   153 000000C3 00<rep 13Dh>        <1> times (512)-($-$$) db 0
   154                              <1> 
     2                                  
     3                                  W equ 72
     4                                  H equ 50
     5 00000200 00                      x: db 0
     6 00000201 00                      y: db 0
     7 00000202 48                      w: db W
     8 00000203 32                      h: db H
     9                                  
    10 00000204 02                      frame: db 2
    11                                  
    12                                  setup:
    13 00000205 EB00                      jmp draw
    14                                  
    15                                  ; ───────────────────────────────────────────────────────────────────────────
    16                                  
    17                                  draw:
    18 00000207 E81701                    call _wait
    19                                  
    20 0000020A B300                      mov bl,0              ; col
    21 0000020C B700                      mov bh,0              ; row
    22 0000020E BE[2B33]                  mov si,img.donut_1    ; first image
    23 00000211 E8C500                    call update_frame
    24 00000214 E89800                    call draw_animation
    25                                  
    26 00000217 B304                      mov bl,4              ; col
    27 00000219 B700                      mov bh,0              ; row
    28 0000021B BE[2B24]                  mov si,img.stars_1    ; first image
    29 0000021E E8B800                    call update_frame
    30 00000221 E88B00                    call draw_animation
    31                                  
    32 00000224 B308                      mov bl,8              ; col
    33 00000226 B700                      mov bh,0              ; row
    34 00000228 BE[2B36]                  mov si,img.sqr_ani_1    ; first image
    35 0000022B E8AB00                    call update_frame
    36 0000022E E87E00                    call draw_animation
    37                                  
    38 00000231 B30C                      mov bl,12              ; col
    39 00000233 B700                      mov bh,0              ; row
    40 00000235 BE[2B27]                  mov si,img.walk_bw_1    ; first image
    41 00000238 E89E00                    call update_frame
    42 0000023B E87100                    call draw_animation
    43                                  
    44 0000023E B310                      mov bl,16              ; col
    45 00000240 B700                      mov bh,0              ; row
    46 00000242 BE[2B30]                  mov si,img.stand_1    ; first image
    47 00000245 E89100                    call update_frame
    48 00000248 E86400                    call draw_animation
    49                                  
    50 0000024B B314                      mov bl,20              ; col
    51 0000024D B700                      mov bh,0              ; row
    52 0000024F BE[2B2A]                  mov si,img.walk_left_1    ; first image
    53 00000252 E88400                    call update_frame
    54 00000255 E85700                    call draw_animation
    55                                  
    56 00000258 B318                      mov bl,24              ; col
    57 0000025A B700                      mov bh,0              ; row
    58 0000025C BE[2B2D]                  mov si,img.walk_right_1    ; first image
    59 0000025F E87700                    call update_frame
    60 00000262 E84A00                    call draw_animation
    61                                  
    62 00000265 B31C                      mov bl,28              ; col
    63 00000267 B700                      mov bh,0               ; row
    64 00000269 BE[2B39]                  mov si,img.flower_1    ; first image
    65 0000026C E86A00                    call update_frame
    66 0000026F E83D00                    call draw_animation
    67                                  
    68 00000272 B320                      mov bl,32              ; col
    69 00000274 B700                      mov bh,0               ; row
    70 00000276 BE[2B3C]                  mov si,img.explode_1    ; first image
    71 00000279 E85D00                    call update_frame
    72 0000027C E83000                    call draw_animation
    73                                  
    74 0000027F B324                      mov bl,36              ; col
    75 00000281 B700                      mov bh,0               ; row
    76 00000283 BE[2B3F]                  mov si,img.creep_1    ; first image
    77 00000286 E85000                    call update_frame
    78 00000289 E82300                    call draw_animation
    79                                  
    80 0000028C B328                      mov bl,40              ; col
    81 0000028E B700                      mov bh,0               ; row
    82 00000290 BE[2B42]                  mov si,img.bouncer_1    ; first image
    83 00000293 E84300                    call update_frame
    84 00000296 E81600                    call draw_animation
    85                                  
    86                                    ; after draw
    87                                  
    88 00000299 FE06[0402]                inc byte [frame]
    89 0000029D 803E[0402]03              cmp byte [frame],3
    90 000002A2 7303E960FF                jb draw
    91 000002A7 C606[0402]00              mov byte [frame],0
    92                                  
    93 000002AC E958FF                    jmp draw
    94                                  
    95                                  ; ───────────────────────────────────────────────────────────────────────────
    96                                  
    97                                  
    98                                  draw_animation:
    99 000002AF E83100                    call calc_di          ; calculates di from bh and bx
   100 000002B2 B704                      mov bh,4              ; width in cols (1 col = 8px)
   101 000002B4 B304                      mov bl,4              ; height in rows (1 row = 4px)
   102 000002B6 E83C00                    call draw_pic
   103 000002B9 C3                        ret
   104                                  
   105                                  ; ───────────────────────────────────────────────────────────────────────────
   106                                  
   107                                  draw4x12:               ; bx should be zero when called
   108 000002BA 53                        push bx
   109 000002BB E82500                    call calc_di
   110 000002BE B704                      mov bh,4              ; width in cols (1 col = 8px)
   111 000002C0 B304                      mov bl,4              ; height in rows (1 row = 4px)
   112 000002C2 E83000                    call draw_pic
   113 000002C5 5B                        pop bx
   114 000002C6 80C304                    add bl,4
   115 000002C9 80FB20                    cmp bl,4*8
   116 000002CC 7CEC                      jl draw4x12
   117 000002CE B300                      mov bl,0
   118 000002D0 80C704                    add bh,4
   119 000002D3 80FF30                    cmp bh,4*12
   120 000002D6 7CE2                      jl draw4x12
   121 000002D8 C3                        ret
   122                                  
   123                                  update_frame:
   124 000002D9 B1C0                      mov cl,4*4*4*3
   125 000002DB A0[0402]                  mov byte al,[frame]
   126 000002DE F6E1                      mul cl
   127 000002E0 01C6                      add si,ax
   128 000002E2 C3                        ret        
   129                                  
   130                                  ; ───────────────────────────────────────────────────────────────────────────
   131                                  
   132                                  calc_di:          ; input bl,bh [0,0,71,49]
   133 000002E3 B89000                    mov ax,144      ; 2*72 cols
   134 000002E6 F6E7                      mul bh          ; bh*=144 resultaat in AX
   135 000002E8 D1E0                      shl ax,1        ; verdubbel AX
   136 000002EA 89C7                      mov di,ax       ; di=ax (=bh*288)
   137 000002EC D0E3                      shl bl,1        ; bl*=2
   138 000002EE D0E3                      shl bl,1        ; bl*=2
   139 000002F0 B700                      mov bh,0
   140 000002F2 01DF                      add di,bx       ; di+=bl
   141 000002F4 C3                        ret
   142                                  
   143                                  ; ───────────────────────────────────────────────────────────────────────────
   144                                  
   145                                  draw_pic:          ; DI=offset, [BH,BL]=rows,cols
   146 000002F5 B800F0                    mov ax, RED
   147 000002F8 E80D00                    call draw_channel
   148 000002FB B8001C                    mov ax, GREEN
   149 000002FE E80700                    call draw_channel
   150 00000301 B800F4                    mov ax, BLUE
   151 00000304 E80100                    call draw_channel
   152 00000307 C3                        ret
   153                                  
   154                                  ; ───────────────────────────────────────────────────────────────────────────
   155                                  
   156                                  draw_channel: 
   157 00000308 57                        push di
   158 00000309 8EC0                      mov es,ax
   159 0000030B 31C9                      xor cx,cx  
   160 0000030D 88F9                      mov cl,bh        ; rows (bh)
   161 0000030F 51                      .rows push cx
   162 00000310 31C9                      xor cx,cx
   163 00000312 88D9                      mov cl,bl        ; cols (bl)
   164 00000314 A5<rep 2h>              .cols times 2 movsw
   165 00000316 E2FC                      loop .cols
   166 00000318 81C71001                  add di,COLS*4-4*4
   167 0000031C 59                        pop cx
   168 0000031D E2F0                      loop .rows
   169 0000031F 5F                        pop di
   170 00000320 C3                        ret 
   171                                  
   172                                  ; ───────────────────────────────────────────────────────────────────────────
   173                                  
   174                                  _wait:
   175 00000321 51                        push cx
   176 00000322 B98813                    mov cx,5000
   177                                  .lp 
   178 00000325 D40A                      aam
   179 00000327 E2FC                      loop .lp
   180 00000329 59                        pop cx
   181 0000032A C3                        ret
   182                                  
   183                                  ; ───────────────────────────────────────────────────────────────────────────
   184                                  
   185                                  img:
   186 0000032B <bin C0h>                 .keylock incbin "data/keylock.bin"
   187 000003EB <bin C0h>                 .key incbin "data/key.bin"
   188 000004AB <bin C0h>                 .owl incbin "data/owl.bin"
   189 0000056B <bin C0h>                 .crown incbin "data/crown.bin"
   190 0000062B <bin C0h>                 .goblet incbin "data/goblet.bin"
   191 000006EB <bin C0h>                 .ring incbin "data/ring.bin"
   192 000007AB <bin C0h>                 .globe incbin "data/globe.bin"
   193 0000086B <bin C0h>                 .feather incbin "data/feather.bin"
   194 0000092B <bin C0h>                 .totum incbin "data/totum.bin"
   195 000009EB <bin C0h>                 .scroll incbin "data/scroll.bin"
   196 00000AAB <bin C0h>                 .building incbin "data/building.bin"
   197 00000B6B <bin C0h>                 .mirror incbin "data/mirror.bin"
   198 00000C2B <bin C0h>                 .harp incbin "data/harp.bin"
   199 00000CEB <bin C0h>                 .nar incbin "data/nar.bin"
   200 00000DAB <bin C0h>                 .computer incbin "data/computer.bin"
   201 00000E6B <bin C0h>                 .way_down incbin "data/way_down.bin"
   202 00000F2B <bin C0h>                 .way_left incbin "data/way_left.bin"
   203 00000FEB <bin C0h>                 .way_up incbin "data/way_up.bin"
   204 000010AB <bin C0h>                 .way_right incbin "data/way_right.bin"
   205 0000116B <bin C0h>                 .pinkbox incbin "data/pinkbox.bin"
   206 0000122B <bin C0h>                 .greenwall_1 incbin "data/greenwall_1.bin"
   207 000012EB <bin C0h>                 .greenwall_2 incbin "data/greenwall_2.bin"
   208 000013AB <bin C0h>                 .greenwall_3 incbin "data/greenwall_3.bin"
   209 0000146B <bin C0h>                 .redwall_1 incbin "data/redwall_1.bin"
   210 0000152B <bin C0h>                 .redwall_2 incbin "data/redwall_2.bin"
   211 000015EB <bin C0h>                 .redwall_3 incbin "data/redwall_3.bin"
   212 000016AB <bin C0h>                 .box incbin "data/box.bin"
   213 0000176B <bin C0h>                 .vbar incbin "data/vbar.bin"
   214 0000182B <bin C0h>                 .hbar incbin "data/hbar.bin"
   215 000018EB <bin C0h>                 .treetop_1 incbin "data/treetop_1.bin"
   216 000019AB <bin C0h>                 .treetop_2 incbin "data/treetop_2.bin"
   217 00001A6B <bin C0h>                 .treetop_3 incbin "data/treetop_3.bin"
   218 00001B2B <bin C0h>                 .treething incbin "data/treething.bin"
   219 00001BEB <bin C0h>                 .treetop_a incbin "data/treetop_a.bin"
   220 00001CAB <bin C0h>                 .treetop_b incbin "data/treetop_b.bin"
   221 00001D6B <bin C0h>                 .treeroot_a incbin "data/treeroot_a.bin"
   222 00001E2B <bin C0h>                 .treeroot_b incbin "data/treeroot_b.bin"
   223 00001EEB <bin C0h>                 .cactus_top incbin "data/cactus_top.bin"
   224 00001FAB <bin C0h>                 .cactus_bottom incbin "data/cactus_bottom.bin"
   225 0000206B <bin C0h>                 .roof_1 incbin "data/roof_1.bin"
   226 0000212B <bin C0h>                 .roof_2 incbin "data/roof_2.bin"
   227 000021EB <bin C0h>                 .roof_3 incbin "data/roof_3.bin"
   228 000022AB <bin C0h>                 .house1 incbin "data/house1.bin"
   229 0000236B <bin C0h>                 .question incbin "data/question.bin"
   230 0000242B <bin C0h>                 .stars_1 incbin "data/stars_1.bin"
   231 000024EB <bin C0h>                 .stars_2 incbin "data/stars_2.bin"
   232 000025AB <bin C0h>                 .stars_3 incbin "data/stars_3.bin"
   233 0000266B <bin C0h>                 .stars_4 incbin "data/stars_4.bin"
   234 0000272B <bin C0h>                 .walk_bw_1 incbin "data/walk_bw_1.bin"
   235 000027EB <bin C0h>                 .walk_bw_2 incbin "data/walk_bw_2.bin"
   236 000028AB <bin C0h>                 .walk_fw_1 incbin "data/walk_fw_1.bin"
   237 0000296B <bin C0h>                 .walk_fw_2 incbin "data/walk_fw_2.bin"
   238 00002A2B <bin C0h>                 .walk_left_1 incbin "data/walk_left_1.bin"
   239 00002AEB <bin C0h>                 .walk_left_2 incbin "data/walk_left_2.bin"
   240 00002BAB <bin C0h>                 .walk_left_3 incbin "data/walk_left_3.bin"
   241 00002C6B <bin C0h>                 .walk_left_4 incbin "data/walk_left_4.bin"
   242 00002D2B <bin C0h>                 .walk_right_1 incbin "data/walk_right_1.bin"
   243 00002DEB <bin C0h>                 .walk_right_2 incbin "data/walk_right_2.bin"
   244 00002EAB <bin C0h>                 .walk_right_3 incbin "data/walk_right_3.bin"
   245 00002F6B <bin C0h>                 .walk_right_4 incbin "data/walk_right_4.bin"
   246 0000302B <bin C0h>                 .stand_1 incbin "data/stand_1.bin"
   247 000030EB <bin C0h>                 .stand_2 incbin "data/stand_2.bin"
   248 000031AB <bin C0h>                 .stand_3 incbin "data/stand_3.bin"
   249 0000326B <bin C0h>                 .stand_4 incbin "data/stand_4.bin"
   250 0000332B <bin C0h>                 .donut_1 incbin "data/donut_1.bin"
   251 000033EB <bin C0h>                 .donut_2 incbin "data/donut_2.bin"
   252 000034AB <bin C0h>                 .donut_3 incbin "data/donut_3.bin"
   253 0000356B <bin C0h>                 .donut_4 incbin "data/donut_4.bin"
   254 0000362B <bin C0h>                 .sqr_ani_1 incbin "data/sqr_ani_1.bin"
   255 000036EB <bin C0h>                 .sqr_ani_2 incbin "data/sqr_ani_2.bin"
   256 000037AB <bin C0h>                 .sqr_ani_3 incbin "data/sqr_ani_3.bin"
   257 0000386B <bin C0h>                 .sqr_ani_4 incbin "data/sqr_ani_4.bin"
   258 0000392B <bin C0h>                 .flower_1 incbin "data/flower_1.bin"
   259 000039EB <bin C0h>                 .flower_2 incbin "data/flower_2.bin"
   260 00003AAB <bin C0h>                 .flower_3 incbin "data/flower_3.bin"
   261 00003B6B <bin C0h>                 .flower_4 incbin "data/flower_4.bin"
   262 00003C2B <bin C0h>                 .explode_1 incbin "data/explode_1.bin"
   263 00003CEB <bin C0h>                 .explode_2 incbin "data/explode_2.bin"
   264 00003DAB <bin C0h>                 .explode_3 incbin "data/explode_3.bin"
   265 00003E6B <bin C0h>                 .explode_4 incbin "data/explode_4.bin"
   266 00003F2B <bin C0h>                 .creep_1 incbin "data/creep_1.bin"
   267 00003FEB <bin C0h>                 .creep_2 incbin "data/creep_2.bin"
   268 000040AB <bin C0h>                 .creep_3 incbin "data/creep_3.bin"
   269 0000416B <bin C0h>                 .creep_4 incbin "data/creep_4.bin"
   270 0000422B <bin C0h>                 .bouncer_1 incbin "data/bouncer_1.bin"
   271 000042EB <bin C0h>                 .bouncer_2 incbin "data/bouncer_2.bin"
   272 000043AB <bin C0h>                 .bouncer_3 incbin "data/bouncer_3.bin"
   273 0000446B <bin C0h>                 .bouncer_4 incbin "data/bouncer_4.bin"
   274 0000452B <bin C0h>                 .eye_1 incbin "data/eye_1.bin"
   275 000045EB <bin C0h>                 .eye_2 incbin "data/eye_2.bin"
   276 000046AB <bin C0h>                 .eye_3 incbin "data/eye_3.bin"
   277 0000476B <bin C0h>                 .eye_4 incbin "data/eye_4.bin"
   278 0000482B <bin C0h>                 .smurf_1 incbin "data/smurf_1.bin"
   279 000048EB <bin C0h>                 .smurf_2 incbin "data/smurf_2.bin"
   280 000049AB <bin C0h>                 .smurf_3 incbin "data/smurf_3.bin"
   281 00004A6B <bin C0h>                 .smurf_4 incbin "data/smurf_4.bin"
   282                                  
   283 00004B2B 00<rep 284D5h>          times (180*1024)-($-$$) db 0
   284                                  
