     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4 00000000 E9C700              <1> jmp boot
     5                              <1> 
     6                              <1> NUM_SECTORS equ 100          ; number of sectors to read
     7                              <1> BAR_WIDTH equ 30
     8                              <1> COLS  equ 72
     9                              <1> ROWS  equ 50
    10                              <1> LINES equ 200
    11                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    12                              <1> RED   equ 0xf000
    13                              <1> GREEN equ 0x1c00
    14                              <1> BLUE  equ 0xf400
    15                              <1> DST   equ 0x38
    16                              <1> XD    equ 4
    17                              <1> YD    equ COLS*XD
    18                              <1> FONT equ 0xFF00
    19                              <1> BYTES_PER_ROW equ 8*COLS  ; 25 lines
    20                              <1> Color.R equ 0b100
    21                              <1> Color.G equ 0b010
    22                              <1> Color.B equ 0b001
    23                              <1> Color.W equ 0b111
    24                              <1> Color.C equ 0b011
    25                              <1> Color.M equ 0b101
    26                              <1> Color.Y equ 0b110
    27                              <1> Color.K equ 0b000
    28                              <1> CTRL equ 0b0000100000000000
    29                              <1> KEY_LEFT  equ 0b00011100
    30                              <1> KEY_RIGHT equ 0b00011101
    31                              <1> KEY_UP    equ 0b00011110
    32                              <1> KEY_DOWN  equ 0b00011111
    33                              <1> 
    34                              <1> cursor:
    35 00000003 00                  <1> .col: db 0
    36 00000004 00                  <1> .row: db 0
    37                              <1> 
    38                              <1> key:
    39 00000005 00                  <1>   .code db 0
    40 00000006 00                  <1>   .ctrl db 0
    41                              <1> 
    42                              <1> %macro set_cursor 2
    43                              <1>   ; mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    44                              <1>   mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> %macro print 1
    48                              <1>   push ax
    49                              <1>   push bx
    50                              <1>   push cx
    51                              <1>   push dx
    52                              <1>   jmp %%endstr 
    53                              <1>   %%str: db %1,0
    54                              <1>   %%endstr: 
    55                              <1>   mov bx,%%str
    56                              <1>   call write_string
    57                              <1>   pop dx
    58                              <1>   pop cx
    59                              <1>   pop bx
    60                              <1>   pop ax
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> %macro println 1
    64                              <1>   print %1
    65                              <1>   call new_line
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro print_ax 0
    69                              <1>   call write_signed_number_word
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro print_ax_unsigned 0
    73                              <1>   call write_number_word
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro print_ax_hex 0
    77                              <1>   call write_ax_hex
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro print_ax_bin 0
    81                              <1>   call write_binary_word
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro print_char 1
    85                              <1>   push ax
    86                              <1>   mov al,%1
    87                              <1>   call write_char
    88                              <1>   pop ax
    89                              <1> %endmacro
    90                              <1> 
    91                              <1> %macro print_2chars 1
    92                              <1>   push ax
    93                              <1>   mov ax,%1
    94                              <1>   call write_2chars
    95                              <1>   pop ax
    96                              <1> %endmacro
    97                              <1> 
    98                              <1> ; ------------
    99                              <1> ; println
   100                              <1> 
   101                              <1> %macro println_ax 0
   102                              <1>   print_ax
   103                              <1>   call write_5spaces_newline
   104                              <1> %endmacro
   105                              <1> 
   106                              <1> %macro println_ax_unsigned 0
   107                              <1>   print_ax_unsigned
   108                              <1>   call write_5spaces_newline
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> %macro println_ax_hex 0
   112                              <1>   print_ax_hex
   113                              <1>   call write_5spaces_newline
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> %macro println_ax_bin 0
   117                              <1>   print_ax_bin
   118                              <1>   call write_5spaces_newline
   119                              <1> %endmacro
   120                              <1> 
   121                              <1> write_5spaces_newline:
   122 00000007 50                  <1>   push ax
   123 00000008 B82020              <1>   mov ax,"  "
   124 0000000B E80B00              <1>   call write_2chars
   125 0000000E E80800              <1>   call write_2chars
   126 00000011 E8B701              <1>   call write_char
   127 00000014 E8E602              <1>   call new_line
   128 00000017 58                  <1>   pop ax
   129 00000018 C3                  <1>   ret
   130                              <1> 
   131                              <1> write_2chars:
   132 00000019 E8AF01              <1>   call write_char
   133 0000001C 86C4                <1>   xchg ah,al
   134 0000001E E8AA01              <1>   call write_char
   135 00000021 C3                  <1>   ret
   136                              <1> 
   137                              <1> %macro register_interrupt 1
   138                              <1>   mov ax,%1
   139                              <1>   stosw
   140                              <1>   mov ax,cs
   141                              <1>   stosw
   142                              <1> %endmacro
   143                              <1> 
   144                              <1> ; int0: hlt
   145                              <1> ; int1: hlt
   146                              <1> ; int2: hlt
   147                              <1> ; int3: hlt
   148                              <1> ; int4: hlt
   149                              <1> 
   150                              <1> int0:; int0: Division by zero
   151 00000022 FC                  <1>   cld
   152 00000023 B800F4              <1>   mov ax,BLUE
   153 00000026 8EC0                <1>   mov es,ax
   154 00000028 31FF                <1>   xor di,di
   155 0000002A B9201C              <1>   mov cx,7200
   156 0000002D B8FFFF              <1>   mov ax,-1
   157 00000030 F3AB                <1>   rep stosw
   158                              <1>   set_cursor 1,1
    43                              <2> 
    44 00000032 BF0000              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   159                              <1>   print "Division by zero"
    48 00000035 50                  <2>  push ax
    49 00000036 53                  <2>  push bx
    50 00000037 51                  <2>  push cx
    51 00000038 52                  <2>  push dx
    52 00000039 EB11                <2>  jmp %%endstr
    53 0000003B 4469766973696F6E20- <2>  %%str: db %1,0
    53 00000044 6279207A65726F00    <2>
    54                              <2>  %%endstr:
    55 0000004C BB[3B00]            <2>  mov bx,%%str
    56 0000004F E8B401              <2>  call write_string
    57 00000052 5A                  <2>  pop dx
    58 00000053 59                  <2>  pop cx
    59 00000054 5B                  <2>  pop bx
    60 00000055 58                  <2>  pop ax
   160                              <1>   set_cursor 3,1
    43                              <2> 
    44 00000056 BF8004              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   161 00000059 58                  <1>   pop ax
   162                              <1>   print "IP="
    48 0000005A 50                  <2>  push ax
    49 0000005B 53                  <2>  push bx
    50 0000005C 51                  <2>  push cx
    51 0000005D 52                  <2>  push dx
    52 0000005E EB04                <2>  jmp %%endstr
    53 00000060 49503D00            <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 00000064 BB[6000]            <2>  mov bx,%%str
    56 00000067 E89C01              <2>  call write_string
    57 0000006A 5A                  <2>  pop dx
    58 0000006B 59                  <2>  pop cx
    59 0000006C 5B                  <2>  pop bx
    60 0000006D 58                  <2>  pop ax
   163                              <1>   println_ax_hex
   112                              <2>  print_ax_hex
    77 0000006E E8A902              <3>  call write_ax_hex
   113 00000071 E893FF              <2>  call write_5spaces_newline
   164 00000074 E88602              <1>   call new_line
   165                              <1>   print "CS="
    48 00000077 50                  <2>  push ax
    49 00000078 53                  <2>  push bx
    50 00000079 51                  <2>  push cx
    51 0000007A 52                  <2>  push dx
    52 0000007B EB04                <2>  jmp %%endstr
    53 0000007D 43533D00            <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 00000081 BB[7D00]            <2>  mov bx,%%str
    56 00000084 E87F01              <2>  call write_string
    57 00000087 5A                  <2>  pop dx
    58 00000088 59                  <2>  pop cx
    59 00000089 5B                  <2>  pop bx
    60 0000008A 58                  <2>  pop ax
   166 0000008B 58                  <1>   pop ax
   167                              <1>   println_ax_hex
   112                              <2>  print_ax_hex
    77 0000008C E88B02              <3>  call write_ax_hex
   113 0000008F E875FF              <2>  call write_5spaces_newline
   168 00000092 E86802              <1>   call new_line
   169                              <1>   print "FLAGS="
    48 00000095 50                  <2>  push ax
    49 00000096 53                  <2>  push bx
    50 00000097 51                  <2>  push cx
    51 00000098 52                  <2>  push dx
    52 00000099 EB07                <2>  jmp %%endstr
    53 0000009B 464C4147533D00      <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 000000A2 BB[9B00]            <2>  mov bx,%%str
    56 000000A5 E85E01              <2>  call write_string
    57 000000A8 5A                  <2>  pop dx
    58 000000A9 59                  <2>  pop cx
    59 000000AA 5B                  <2>  pop bx
    60 000000AB 58                  <2>  pop ax
   170 000000AC 58                  <1>   pop ax
   171 000000AD E87E01              <1>   call write_binary_word
   172 000000B0 F4                  <1>   hlt
   173                              <1> 
   174                              <1> int1:; int1: Single step debugging
   175 000000B1 B001                <1>   mov al,1
   176 000000B3 EB0C                <1>   jmp int_msg
   177                              <1> int2:; int2: Non maskable interrupt
   178 000000B5 B002                <1>   mov al,2
   179 000000B7 EB08                <1>   jmp int_msg
   180                              <1> int3:; int3: For one-byte interrupt
   181 000000B9 B003                <1>   mov al,3
   182 000000BB EB04                <1>   jmp int_msg
   183                              <1>   ; push ax
   184                              <1>   ; push bx
   185                              <1>   ; push cx
   186                              <1>   ; push dx
   187                              <1>   ; push si
   188                              <1>   ; push di
   189                              <1>   ; push bp
   190                              <1>   ; push ds
   191                              <1>   ; push es
   192                              <1> 
   193                              <1>   ; ; mov di,10*4
   194                              <1>   ; ; set_cursor 5,5
   195                              <1>   ; xor di,di
   196                              <1>   ; print "int3:"
   197                              <1>   ; ; mov ax,cx
   198                              <1>   ; ; call write_number_word
   199                              <1> 
   200                              <1>   ; pop es
   201                              <1>   ; pop ds
   202                              <1>   ; pop bp
   203                              <1>   ; pop di
   204                              <1>   ; pop si
   205                              <1>   ; pop dx
   206                              <1>   ; pop cx
   207                              <1>   ; pop bx
   208                              <1>   ; pop ax
   209                              <1>   ; iret
   210                              <1> 
   211                              <1> int4:; int4: Signed overflow
   212 000000BD B004                <1>   mov al,4
   213 000000BF EB00                <1>   jmp int_msg
   214                              <1> int_msg:
   215 000000C1 BFF401              <1>   mov di,500
   216                              <1>   ; xor di,di
   217                              <1>   ; mov ax,di
   218                              <1>   ; mov cx,8*72  
   219                              <1>   ; rep stosw
   220                              <1>   ; xor di,di
   221                              <1>   ; push ax
   222                              <1>   ; print "int: "
   223                              <1>   ; pop ax
   224 000000C4 0430                <1>   add al,'0'
   225 000000C6 E80201              <1>   call write_char
   226                              <1>   ; print "      "
   227                              <1>   
   228 000000C9 F4                  <1>   hlt
   229                              <1> 
   230                              <1> boot:
   231 000000CA FA                  <1>   cli
   232 000000CB FC                  <1>   cld
   233 000000CC E8E900              <1>   call clear_green    
   234                              <1> 
   235                              <1>   ; init video      
   236 000000CF B005                <1>   mov al, 5
   237 000000D1 E610                <1>   out 10h, al           ; select address 0x1c000 as green video page
   238                              <1>  
   239                              <1>   ; register interrupts
   240 000000D3 31FF                <1>   xor di,di ; offset 0
   241 000000D5 8EC7                <1>   mov es,di ; segment 0
   242                              <1>   register_interrupt int0
   138 000000D7 B8[2200]            <2>  mov ax,%1
   139 000000DA AB                  <2>  stosw
   140 000000DB 8CC8                <2>  mov ax,cs
   141 000000DD AB                  <2>  stosw
   243                              <1>   register_interrupt int1
   138 000000DE B8[B100]            <2>  mov ax,%1
   139 000000E1 AB                  <2>  stosw
   140 000000E2 8CC8                <2>  mov ax,cs
   141 000000E4 AB                  <2>  stosw
   244                              <1>   register_interrupt int2
   138 000000E5 B8[B500]            <2>  mov ax,%1
   139 000000E8 AB                  <2>  stosw
   140 000000E9 8CC8                <2>  mov ax,cs
   141 000000EB AB                  <2>  stosw
   245                              <1>   register_interrupt int3
   138 000000EC B8[B900]            <2>  mov ax,%1
   139 000000EF AB                  <2>  stosw
   140 000000F0 8CC8                <2>  mov ax,cs
   141 000000F2 AB                  <2>  stosw
   246                              <1>   register_interrupt int4
   138 000000F3 B8[BD00]            <2>  mov ax,%1
   139 000000F6 AB                  <2>  stosw
   140 000000F7 8CC8                <2>  mov ax,cs
   141 000000F9 AB                  <2>  stosw
   247                              <1> 
   248                              <1> 
   249                              <1>   ; init other hardware
   250 000000FA B000                <1>   mov al,0
   251 000000FC E63A                <1>   out 0x3a,al           ; keyboard \force state/
   252 000000FE E63A                <1>   out 0x3a,al           ; keyboard \force state/
   253 00000100 B0FF                <1>   mov al,0xFF
   254 00000102 E63A                <1>   out 0x3a,al           ; keyboard \reset/
   255 00000104 E63A                <1>   out 0x3a,al           ; keyboard \mode/
   256 00000106 B037                <1>   mov al,0x37
   257 00000108 E63A                <1>   out 0x3a,al           ; keyboard \set command
   258                              <1> 
   259 0000010A B8001C              <1>   mov ax,GREEN      
   260 0000010D 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
   261 0000010F B83800              <1>   mov ax,DST                
   262 00000112 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
   263 00000114 BF0000              <1>   mov di,0                  ;
   264 00000117 B200                <1>   mov dl,0                  ; track=0
   265 00000119 B601                <1>   mov dh,1                  ; sector=1
   266 0000011B B96400              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
   267 0000011E EB0B                <1>   jmp move_head
   268                              <1> 
   269                              <1> ; ───────────────────────────────────────────────────────────────────────────
   270                              <1> 
   271                              <1> next_sector:
   272 00000120 FEC6                <1>   inc dh                    ; sector++
   273 00000122 80FE0A              <1>   cmp dh,10
   274 00000125 7218                <1>   jb read_sector            ; if (dh<9) read_sector
   275 00000127 B601                <1>   mov dh,1
   276 00000129 FEC2                <1>   inc dl                    ; else track++ ; sector=1
   277                              <1> 
   278                              <1> move_head:
   279 0000012B 88D0                <1>   mov al,dl
   280 0000012D E60E                <1>   out 0Eh,al               ; set track number
   281 0000012F B018                <1>   mov al,18h     
   282 00000131 E608                <1>   out 8,al                 ; seek track, load head
   283 00000133 B000                <1>   mov al,0
   284 00000135 E61C                <1>   out 1Ch,al               ; set desired drive/side
   285 00000137 D40A                <1>   aam
   286                              <1> 
   287                              <1> head_moving:
   288 00000139 E408                <1>   in al,8
   289 0000013B A801                <1>   test al,1
   290 0000013D 75FA                <1>   jnz head_moving
   291                              <1> 
   292                              <1> read_sector:
   293 0000013F 88F0                <1>   mov al,dh
   294 00000141 E60C                <1>   out 0Ch,al                ; sector number
   295 00000143 B702                <1>   mov bh,2                  ; 00000010b
   296 00000145 B396                <1>   mov bl,96h                ; 10010110b
   297 00000147 B400                <1>   mov ah,0
   298 00000149 B080                <1>   mov al,80h
   299 0000014B E608                <1>   out 8,al                  ; read sector
   300 0000014D D40A<rep 4h>        <1>   times 4 aam               ; wait
   301                              <1> 
   302                              <1> check_status_1:
   303 00000155 E408                <1>   in al,8                   ; read status
   304 00000157 D0F8                <1>   sar al,1                  ; status/=2
   305 00000159 731F                <1>   jnb check_status_3
   306 0000015B 75F8                <1>   jnz check_status_1
   307                              <1> 
   308                              <1> wait_for_data:
   309 0000015D E408                <1>   in al,8                   ; read status
   310 0000015F 20D8                <1>   and al,bl                 ; 96h
   311 00000161 74FA                <1>   jz wait_for_data
   312                              <1> 
   313                              <1> store_byte_1:
   314 00000163 E40E                <1>   in al,0Eh
   315 00000165 AA                  <1>   stosb
   316                              <1> 
   317                              <1> check_status_2:
   318 00000166 E408                <1>   in al,8                   ; read status
   319 00000168 48                  <1>   dec ax                    ; status--
   320 00000169 74FB                <1>   jz check_status_2         ; if (status==0) repeat
   321 0000016B 38F8                <1>   cmp al, bh                ; bh=2
   322 0000016D 750B                <1>   jnz check_status_3        ; if (status==1) 
   323                              <1> 
   324                              <1> store_byte_2:
   325 0000016F E40E                <1>   in al,0Eh  
   326 00000171 AA                  <1>   stosb
   327                              <1> 
   328                              <1> check_status_4:
   329 00000172 E408                <1>   in al,8                   ; read status
   330 00000174 38F8                <1>   cmp al, bh                ; bh=2
   331 00000176 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   332 00000178 EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   333                              <1> 
   334                              <1> ; ───────────────────────────────────────────────────────────────────────────
   335                              <1> 
   336                              <1> check_status_3:
   337 0000017A E408                <1>   in al, 8                  ; read status
   338 0000017C A81C                <1>   test al, 1Ch              ; 00011100
   339 0000017E 7402                <1>   jz while_sectors
   340 00000180 EBBD                <1>   jmp read_sector
   341                              <1> 
   342                              <1> ; ───────────────────────────────────────────────────────────────────────────
   343                              <1> 
   344                              <1> while_sectors:
   345 00000182 E81200              <1>   call progress_bar
   346 00000185 E299                <1>   loop next_sector
   347                              <1> 
   348                              <1> done_reading:
   349 00000187 0E                  <1>   push cs
   350 00000188 17                  <1>   pop ss
   351 00000189 BC0000              <1>   mov sp,0
   352 0000018C E82900              <1>   call clear_green
   353 0000018F 0E                  <1>   push cs
   354 00000190 1F                  <1>   pop ds
   355                              <1>   set_cursor 1,1 ; nodig?
    43                              <2> 
    44 00000191 BF0000              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   356 00000194 E9B101              <1>   jmp setup
   357                              <1> 
   358                              <1> ; ───────────────────────────────────────────────────────────────────────────
   359                              <1> 
   360                              <1> progress_bar:
   361                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   362 00000197 52                  <1>   push dx
   363 00000198 53                  <1>   push bx
   364 00000199 31D2                <1>   xor dx,dx
   365 0000019B B81E00              <1>   mov ax,BAR_WIDTH
   366 0000019E BB6400              <1>   mov bx,NUM_SECTORS    
   367 000001A1 F7E1                <1>   mul cx
   368 000001A3 F7F3                <1>   div bx
   369 000001A5 5B                  <1>   pop bx
   370 000001A6 5A                  <1>   pop dx
   371 000001A7 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   372 000001A9 D1E6                <1>   shl si,1                  ; *=2
   373 000001AB D1E6                <1>   shl si,1                  ; *=2  
   374 000001AD BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   375 000001B0 29F5                <1>   sub bp,si
   376 000001B2 3EC64600FF          <1>   mov byte [ds:bp],-1
   377 000001B7 C3                  <1>   ret
   378                              <1> 
   379                              <1> ; clear_red:
   380                              <1> ;   mov ax,RED
   381                              <1> ;   call clear_channel
   382                              <1> ;   ret
   383                              <1> 
   384                              <1> clear_green:
   385 000001B8 B8001C              <1>   mov ax,GREEN
   386 000001BB E80100              <1>   call clear_channel
   387 000001BE C3                  <1>   ret
   388                              <1> 
   389                              <1> ; clear_blue:
   390                              <1> ;   mov ax,BLUE
   391                              <1> ;   call clear_channel
   392                              <1> ;   ret
   393                              <1> 
   394                              <1> ; clear_screen:
   395                              <1> ;   call clear_red
   396                              <1> ;   call clear_green
   397                              <1> ;   call clear_blue
   398                              <1> ;   ret
   399                              <1> 
   400                              <1> clear_channel:
   401 000001BF 8EC0                <1>   mov es,ax
   402 000001C1 B9201C              <1>   mov cx,COLS*ROWS*2
   403 000001C4 31FF                <1>   xor di,di
   404 000001C6 31C0                <1>   xor ax,ax
   405 000001C8 F3AB                <1>   rep stosw         ; clear screen
   406 000001CA C3                  <1>   ret
   407                              <1> 
   408                              <1> ; ───────────────────────────────────────────────────────────────────────────
   409                              <1> 
   410                              <1> ; write_char:   ; ds=FONT, es=GREEN, al=charcode
   411                              <1> ;   ; zou ik hier ds moeten pushen? omdat je er vanuit wilt gaan dat DS en CS altijd gelijk zijn
   412                              <1> ;   ; je zou de huidige kleur op een adres willen bewaren. nu doet ie alleen maar groen.
   413                              <1> ;   ; deze functie zou ook korter/lichter kunnen/moeten. wellicht twee functies maken. een slimme en een domme snelle..
   414                              <1> 
   415                              <1> ;   push ds
   416                              <1> ;   push es
   417                              <1> ;   push ax
   418                              <1> ;   push bx
   419                              <1> ;   push cx
   420                              <1> 
   421                              <1> ;   push ax
   422                              <1> ;   mov ax,GREEN
   423                              <1> ;   mov es,ax
   424                              <1> ;   mov ax,FONT
   425                              <1> ;   mov ds,ax
   426                              <1> ;   pop ax
   427                              <1> 
   428                              <1> ;   ; mov ax,65*8
   429                              <1> ;   ; mov al,'x'
   430                              <1> ;   mov ah,8
   431                              <1> ;   mul ah        ; ax=al*ah
   432                              <1> 
   433                              <1> ;   mov si,ax
   434                              <1> ;   movsw
   435                              <1> ;   movsw
   436                              <1> ;   add di,0x11c
   437                              <1> ;   movsw
   438                              <1> ;   movsw
   439                              <1> ;   mov bx,288
   440                              <1> ;   sub di,bx
   441                              <1>   
   442                              <1> ;   ; pop ax
   443                              <1> ;   ; pop es
   444                              <1> ;   ; pop ds
   445                              <1> ;   ; ret
   446                              <1> 
   447                              <1> 
   448                              <1> ;   ; row snap
   449                              <1> ;   xor dx,dx
   450                              <1> ;   mov ax,di
   451                              <1> ;   div bx
   452                              <1> ;   cmp dx,0
   453                              <1> ;   jne .return
   454                              <1> ;   add di,bx
   455                              <1> 
   456                              <1> 
   457                              <1> ;   ; wrap to top
   458                              <1> ;   cmp di,14400   ; dit later oplossen met cursor positie
   459                              <1> ;   jb .return
   460                              <1> ;   ; xor di,di      ; move to left top. change later to scroll
   461                              <1> 
   462                              <1> ;   ; TODO: call scroll_down
   463                              <1> ;   ; std
   464                              <1> ;   ; push di
   465                              <1> ;   ; push cx
   466                              <1> ;   ; mov cx,4*72*24
   467                              <1> ;   ; mov ax,0
   468                              <1> ;   ; rep stosw
   469                              <1> ;   ; pop cx
   470                              <1> ;   ; pop di
   471                              <1> ;   ; cld
   472                              <1> 
   473                              <1> ;   ; DONE: clear last line
   474                              <1> ;   sub di,bx
   475                              <1> ;   sub di,bx
   476                              <1> ;   push di
   477                              <1> ;   push cx
   478                              <1> ;   mov cx,COLS*ROWS*2
   479                              <1> ;   xor ax,ax
   480                              <1> ;   rep stosw         ; clear screen
   481                              <1> ;   pop cx
   482                              <1> ;   pop di
   483                              <1> 
   484                              <1> ; .return
   485                              <1> ;   push bx
   486                              <1> ;   push cx
   487                              <1> ;   pop ax
   488                              <1> ;   pop es
   489                              <1> ;   pop ds
   490                              <1> ;   ret
   491                              <1> 
   492                              <1> ; ; ───────────────────────────────────────────────────────────────────────────
   493                              <1> 
   494                              <1> write_char:   ; ds=FONT, es=GREEN, al=charcode
   495 000001CB 52                  <1>   push dx
   496 000001CC 1E                  <1>   push ds
   497 000001CD 06                  <1>   push es
   498 000001CE 50                  <1>   push ax
   499 000001CF 53                  <1>   push bx
   500 000001D0 31D2                <1>   xor dx,dx
   501 000001D2 50                  <1>   push ax  ; voor character pop
   502 000001D3 B8001C              <1>   mov ax,GREEN
   503 000001D6 8EC0                <1>   mov es,ax
   504 000001D8 B800FF              <1>   mov ax,FONT
   505 000001DB 8ED8                <1>   mov ds,ax
   506 000001DD 58                  <1>   pop ax
   507 000001DE B408                <1>   mov ah,8
   508 000001E0 F6E4                <1>   mul ah        ; al*=ah
   509 000001E2 89C6                <1>   mov si,ax  
   510                              <1> 
   511 000001E4 A5                  <1>   movsw
   512 000001E5 A5                  <1>   movsw
   513 000001E6 81C71C01            <1>   add di,0x11c
   514 000001EA A5                  <1>   movsw
   515 000001EB A5                  <1>   movsw
   516 000001EC 81EF2001            <1>   sub di,0x120
   517                              <1> 
   518                              <1> 
   519                              <1>   ; cmp di,14400   ; dit later oplossen met cursor positie
   520                              <1>   ; jb .return
   521                              <1>   ; xor di,di      ; move to left top. change later to scroll
   522                              <1> 
   523                              <1>   ; row snap
   524 000001F0 BB2001              <1>   mov bx,288   ; /////////// dit gaf problemen waarsch omdat bx niet gepushed werd
   525 000001F3 31D2                <1>   xor dx,dx
   526 000001F5 89F8                <1>   mov ax,di
   527 000001F7 F7F3                <1>   div bx       ; ///dit ook als BX 0 is
   528 000001F9 83FA00              <1>   cmp dx,0
   529 000001FC 7502                <1>   jne .return
   530 000001FE 01DF                <1>   add di,bx
   531                              <1> 
   532                              <1> .return
   533 00000200 5B                  <1>   pop bx
   534 00000201 58                  <1>   pop ax
   535 00000202 07                  <1>   pop es
   536 00000203 1F                  <1>   pop ds
   537 00000204 5A                  <1>   pop dx
   538 00000205 C3                  <1>   ret
   539                              <1> 
   540                              <1> write_string:
   541 00000206 2E8A07              <1>   mov al,[cs:bx]
   542 00000209 43                  <1>   inc bx
   543 0000020A 08C0                <1>   or al,al
   544 0000020C 7405                <1>   jz .return
   545 0000020E E8BAFF              <1>   call write_char
   546 00000211 EBF3                <1>   jmp short write_string
   547                              <1> .return
   548 00000213 C3                  <1>   ret
   549                              <1> 
   550                              <1> ; ───────────────────────────────────────────────────────────────────────────
   551                              <1> 
   552                              <1> write_binary_byte:    ; input AL
   553 00000214 53                  <1>   push bx
   554 00000215 51                  <1>   push cx
   555 00000216 50                  <1>   push ax
   556 00000217 88C3                <1>   mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   557 00000219 B90800              <1>   mov cx, 8           ; We gaan 8 bits schrijven
   558                              <1> .lp:
   559 0000021C D0C3                <1>   rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   560 0000021E B80000              <1>   mov ax, 0           ; AH leegmaken
   561 00000221 1430                <1>   adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   562 00000223 51                  <1>   push cx             ; CX opslaan
   563 00000224 E8A4FF              <1>   call write_char      ; Schrijf het karakter naar het scherm
   564 00000227 59                  <1>   pop cx              ; CX herstellen
   565 00000228 E2F2                <1>   loop .lp            ; Loop voor alle 8 bits
   566 0000022A 58                  <1>   pop ax
   567 0000022B 59                  <1>   pop cx
   568 0000022C 5B                  <1>   pop bx
   569 0000022D C3                  <1>   ret
   570                              <1> 
   571                              <1> ; ───────────────────────────────────────────────────────────────────────────
   572                              <1> 
   573                              <1> write_binary_word:    ; input AX
   574 0000022E 51                  <1>   push cx
   575 0000022F 50                  <1>   push ax
   576 00000230 52                  <1>   push dx            ; DX opslaan (we gebruiken het later)
   577 00000231 89C2                <1>   mov dx, ax         ; Kopieer AX naar DX (we werken op DX)
   578 00000233 B91000              <1>   mov cx, 16         ; We gaan 16 bits schrijven
   579                              <1> .lp:
   580 00000236 D1C2                <1>   rol dx, 1          ; Rotate DX naar links (hoogste bit komt in Carry Flag)
   581 00000238 B80000              <1>   mov ax, 0          ; AH leegmaken
   582 0000023B 1430                <1>   adc al, 48         ; Als Carry Flag 1 is, wordt '1', anders '0'  
   583 0000023D 51                  <1>   push cx            ; CX opslaan
   584 0000023E E88AFF              <1>   call write_char    ; Schrijf het karakter naar het scherm
   585 00000241 59                  <1>   pop cx             ; CX herstellen
   586 00000242 E2F2                <1>   loop .lp           ; Loop voor alle 16 bits
   587 00000244 5A                  <1>   pop dx             ; DX herstellen
   588 00000245 58                  <1>   pop ax
   589 00000246 59                  <1>   pop cx
   590 00000247 C3                  <1>   ret
   591                              <1> 
   592                              <1> 
   593                              <1> ; ───────────────────────────────────────────────────────────────────────────
   594                              <1> 
   595                              <1> write_number_word:
   596 00000248 50                  <1>     push ax
   597 00000249 52                  <1>     push dx
   598 0000024A 31D2                <1>     xor dx,dx
   599 0000024C 52                  <1>     push dx ;high byte is zero
   600 0000024D 31D2                <1> .clp xor dx,dx
   601 0000024F 2EF736[6B02]        <1>     cs div word [.base]
   602 00000254 92                  <1>     xchg ax,dx
   603 00000255 05300E              <1>     add ax,0xe30
   604 00000258 50                  <1>     push ax
   605 00000259 92                  <1>     xchg ax,dx
   606 0000025A 09C0                <1>     or ax,ax
   607 0000025C 75EF                <1>     jnz .clp
   608 0000025E 58                  <1> .dlp pop ax
   609 0000025F 08E4                <1>     or ah,ah
   610 00000261 7405                <1>     jz .done
   611 00000263 E865FF              <1>     call write_char
   612 00000266 EBF6                <1>     jmp short .dlp
   613 00000268 5A                  <1> .done pop dx
   614 00000269 58                  <1>     pop ax
   615 0000026A C3                  <1>     ret
   616 0000026B 0A00                <1> .base dw 10
   617                              <1> 
   618                              <1> ; ───────────────────────────────────────────────────────────────────────────
   619                              <1> 
   620                              <1> 
   621                              <1> ; ───────────────────────────────────────────────────────────────────────────
   622                              <1> 
   623                              <1> write_signed_number_word:  
   624 0000026D 50                  <1>     push ax
   625 0000026E 09C0                <1>     or ax,ax
   626 00000270 790A                <1>     jns .write_return        ; if >0 write and return
   627 00000272 50                  <1>     push ax
   628 00000273 B82D00              <1>     mov ax,'-'
   629 00000276 E852FF              <1>     call write_char
   630 00000279 58                  <1>     pop ax
   631 0000027A F7D8                <1>     neg ax                   ; destroys ax when negative
   632                              <1> .write_return:
   633 0000027C E8C9FF              <1>     call write_number_word
   634 0000027F 58                  <1>     pop ax
   635 00000280 C3                  <1>     ret
   636                              <1> 
   637                              <1> ; ───────────────────────────────────────────────────────────────────────────
   638                              <1> 
   639                              <1> check_keys:
   640 00000281 E43A                <1>   in al,0x3a        ; get keyboard status
   641 00000283 88C4                <1>   mov ah,al
   642 00000285 2408                <1>   and al,0b00001000 ; keep only 1 for 'ctrl'
   643 00000287 2EA2[0600]          <1>   mov [cs:key.ctrl],al
   644 0000028B F6C402              <1>   test ah,2         ; keypressed flag is in ah, not in al anymore
   645 0000028E 7410                <1>   jz .return
   646 00000290 E438                <1>   in al,0x38        ; get data byte from keyboard  
   647 00000292 2EA2[0500]          <1>   mov [cs:key.code],al
   648 00000296 B037                <1>   mov al,0x37
   649 00000298 E63A                <1>   out 0x3a,al       ; drop key?  
   650 0000029A 0C01                <1>   or al,1           ; set zero flag to false to indicate a keypress
   651 0000029C 2EA1[0500]          <1>   mov ax,[cs:key]   ; ctrl status in ah, keycode in al, ZF low means a key was pressed
   652 000002A0 C3                  <1> .return ret
   653                              <1> 
   654                              <1> ; ───────────────────────────────────────────────────────────────────────────
   655                              <1> 
   656                              <1> draw_spr:
   657 000002A1 53                  <1>   push bx
   658 000002A2 8B1C                <1>   mov bx,[si]
   659 000002A4 46                  <1>   inc si
   660 000002A5 46                  <1>   inc si
   661 000002A6 E80200              <1>   call draw_pic
   662 000002A9 5B                  <1>   pop bx
   663 000002AA C3                  <1>   ret
   664                              <1> 
   665                              <1> draw_pic:
   666 000002AB 50                  <1>   push ax
   667 000002AC B800F0              <1>   mov ax, RED
   668 000002AF E80E00              <1>   call draw_channel
   669 000002B2 B8001C              <1>   mov ax, GREEN
   670 000002B5 E80800              <1>   call draw_channel
   671 000002B8 B800F4              <1>   mov ax, BLUE
   672 000002BB E80200              <1>   call draw_channel
   673 000002BE 58                  <1>   pop ax
   674 000002BF C3                  <1>   ret
   675                              <1> 
   676                              <1> ; ───────────────────────────────────────────────────────────────────────────
   677                              <1> 
   678                              <1> draw_channel:
   679 000002C0 57                  <1>   push di
   680 000002C1 8EC0                <1>   mov es,ax
   681 000002C3 31C9                <1>   xor cx,cx
   682 000002C5 88F9                <1>   mov cl,bh        ; rows (bl)
   683                              <1> .rows_loop:
   684 000002C7 51                  <1>   push cx
   685 000002C8 31C9                <1>   xor cx,cx
   686 000002CA 88D9                <1>   mov cl,bl        ; cols (bh)
   687                              <1> .cols_loop:
   688 000002CC A5                  <1>   movsw
   689 000002CD A5                  <1>   movsw
   690 000002CE E2FC                <1>   loop .cols_loop
   691 000002D0 81C72001            <1>   add di,COLS*4    ; one row down
   692 000002D4 B400                <1>   mov ah,0
   693 000002D6 88D8                <1>   mov al,bl
   694 000002D8 D1E0<rep 2h>        <1>   times 2 shl ax,1
   695 000002DC 29C7                <1>   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   696 000002DE 59                  <1>   pop cx
   697 000002DF E2E6                <1>   loop .rows_loop
   698 000002E1 5F                  <1>   pop di
   699 000002E2 C3                  <1>   ret
   700                              <1> 
   701                              <1> ; ───────────────────────────────────────────────────────────────────────────
   702                              <1> 
   703                              <1> calc_di_from_bx:  ; input bl,bh [0,0,71,49]
   704 000002E3 B89000              <1>   mov ax,144      ; 2*72 cols
   705 000002E6 F6E7                <1>   mul bh          ; bh*=144 resultaat in AX
   706 000002E8 D1E0                <1>   shl ax,1        ; verdubbel AX
   707 000002EA 89C7                <1>   mov di,ax       ; di=ax (=bh*288)
   708 000002EC D0E3                <1>   shl bl,1        ; bl*=2
   709 000002EE D0E3                <1>   shl bl,1        ; bl*=2
   710 000002F0 B700                <1>   mov bh,0
   711 000002F2 01DF                <1>   add di,bx       ; di+=bl
   712 000002F4 83FF00              <1>   cmp di,0
   713 000002F7 7C01                <1>   jl .clamp_top
   714 000002F9 C3                  <1>   ret
   715                              <1> .clamp_top
   716 000002FA 31FF                <1>   xor di,di
   717 000002FC C3                  <1>   ret
   718                              <1> 
   719                              <1> 
   720                              <1> ; ───────────────────────────────────────────────────────────────────────────
   721                              <1> 
   722                              <1> new_line:         ; find the value of DI at start of the next line
   723 000002FD 50                  <1>   push ax
   724 000002FE 53                  <1>   push bx
   725 000002FF 52                  <1>   push dx
   726 00000300 BB2001              <1>   mov bx,288
   727 00000303 31D2                <1>   xor dx,dx
   728 00000305 89F8                <1>   mov ax,di
   729 00000307 F7F3                <1>   div bx
   730 00000309 31D2                <1>   xor dx,dx       ; cwd?
   731 0000030B BB2001              <1>   mov bx,288      ; can reuse x from above?
   732 0000030E 40                  <1>   inc ax
   733 0000030F F7E3                <1>   mul bx
   734 00000311 052001              <1>   add ax,288      ; use bx?
   735 00000314 89C7                <1>   mov di,ax
   736 00000316 5A                  <1>   pop dx
   737 00000317 5B                  <1>   pop bx
   738 00000318 58                  <1>   pop ax
   739 00000319 C3                  <1>   ret
   740                              <1> 
   741                              <1> ; ───────────────────────────────────────────────────────────────────────────
   742                              <1> 
   743                              <1> write_ax_hex:
   744 0000031A 50                  <1>   push ax
   745 0000031B 52                  <1>   push dx
   746 0000031C 31D2                <1>   xor dx,dx
   747 0000031E 52                  <1>   push dx ;high byte is zero
   748 0000031F 31D2                <1> .clp xor dx,dx
   749 00000321 2EF736[4303]        <1>   cs div word [.base]
   750 00000326 92                  <1>   xchg ax,dx
   751 00000327 3C0A                <1>   cmp al,10
   752 00000329 7202                <1>   jb .l1     ; 0-9
   753 0000032B 0407                <1>   add al,7   ; A-F
   754 0000032D 05300E              <1> .l1 add ax,0xe30
   755 00000330 50                  <1>   push ax
   756 00000331 92                  <1>   xchg ax,dx
   757 00000332 09C0                <1>   or ax,ax
   758 00000334 75E9                <1>   jnz .clp
   759 00000336 58                  <1> .dlp pop ax
   760 00000337 08E4                <1>   or ah,ah
   761 00000339 7405                <1>   jz .done
   762 0000033B E88DFE              <1>   call write_char
   763 0000033E EBF6                <1>   jmp short .dlp
   764 00000340 5A                  <1> .done pop dx
   765 00000341 58                  <1>   pop ax
   766 00000342 C3                  <1>   ret
   767 00000343 1000                <1> .base dw 16
   768                              <1> 
     2                                  
     3                                  ticks EQU 30 ; 50 ;787 ; 100Hz (10ms)
     4                                  len EQU 5000 ; endsound-sound
     5                                  sound1bit EQU 0x4000
     6                                  
     7 00000345 0000                    playhead: dw 0
     8 00000347 00                      prev: db 0
     9                                  
    10                                  setup:
    11                                    ; 8253 Timer
    12                                    ; Send Control Word (0x34 = 00110100) to port 0x26
    13                                    ;   Channel 0 (bits 7-6 = 00)
    14                                    ;   Access mode: lobyte/hibyte (bits 5-4 = 11)
    15                                    ;   Mode 2: rate generator (bits 3-1 = 010)
    16                                    ;   Binary mode (bit 0 = 0)
    17 00000348 B034                      mov al, 0x34
    18 0000034A E626                      out 0x26, al
    19 0000034C B01E                      mov al, ticks & 0xff
    20 0000034E E620                      out 0x20, al        ; lobyte
    21 00000350 B000                      mov al, ticks >> 8
    22 00000352 E620                      out 0x20, al        ; hibyte
    23                                  
    24                                  
    25                                    ;8259A interrupt controller
    26 00000354 B013                      mov al, 0x13
    27 00000356 E600                      out 0x00, al    ; ICW1: init, edge-triggered, ICW4 nodig
    28 00000358 B0F8                      mov al, 0xF8
    29 0000035A E602                      out 0x02, al    ; ICW2: interrupt vector offset
    30 0000035C B00F                      mov al, 0x0F
    31 0000035E E602                      out 0x02, al    ; ICW4: 8086 mode, auto EOI (end of interrupt)
    32 00000360 B0FE                      mov al, 0xFE
    33 00000362 E602                      out 0x02, al    ; OCW1: alleen IRQ0 ingeschakeld
    34                                  
    35                                  ; set all interrupt handlers to 0040:0040
    36 00000364 BF0000                    mov di,0
    37 00000367 8EC7                      mov es,di
    38 00000369 B90002                    mov cx,0x200
    39 0000036C B84000                    mov ax,0x0040
    40 0000036F F3AB                      rep stosw
    41                                  
    42                                  ; store iret at 0040:0040
    43 00000371 BF4000                    mov di,0x40
    44 00000374 8EC7                      mov es,di
    45 00000376 B0CF                      mov al,0xcf
    46 00000378 AA                        stosb
    47                                  
    48                                  
    49                                  ; set 0xF8 interrupt handler to CS:handler
    50 00000379 BF0000                    mov di,0
    51 0000037C 8EC7                      mov es,di
    52 0000037E BFE003                    mov di,0xf8*4
    53 00000381 B90100                    mov cx,1
    54                                  .store:        ; can remove the loop here since we're only setting 1 interrupt...
    55 00000384 B8[FC03]                  mov ax,onTimer
    56 00000387 AB                        stosw
    57 00000388 8CC8                      mov ax,cs
    58 0000038A AB                        stosw
    59 0000038B E2F7                      loop .store
    60                                  
    61                                  
    62 0000038D 0E                        push cs
    63 0000038E 1F                        pop ds
    64                                  
    65                                    set_cursor 1,1
    43                              <1> 
    44 0000038F BF0000              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
    66                                  
    67                                  
    68                                  
    69 00000392 E82000                    call unpack
    70                                  
    71                                  
    72                                  
    73 00000395 BE0040                    mov si,sound1bit
    74 00000398 C706[4503]0040            mov word [playhead], sound1bit
    75                                  
    76 0000039E B8001C                    mov ax,GREEN
    77 000003A1 8EC0                      mov es,ax
    78 000003A3 BF0000                    mov di,0
    79                                  
    80 000003A6 FB                        sti
    81                                  
    82                                  update:
    83 000003A7 EBFE                      jmp update
    84                                  
    85                                  ; bit: db 1
    86                                  store_bit:
    87 000003A9 50                        push ax
    88 000003AA D2E0                      shl al,cl
    89 000003AC B000                      mov al,0
    90 000003AE 7202                      jc .a
    91 000003B0 B008                      mov al,8
    92 000003B2 AA                        .a stosb
    93 000003B3 58                        pop ax
    94 000003B4 C3                        ret
    95                                  
    96                                  unpack:
    97 000003B5 BE[1704]                  mov si,sound
    98 000003B8 BF0040                    mov di,sound1bit
    99 000003BB 0E                        push cs
   100 000003BC 07                        pop es
   101                                  
   102 000003BD B98813                    mov cx,len
   103                                    .lp
   104 000003C0 AC                        lodsb
   105                                  
   106 000003C1 51                        push cx
   107 000003C2 B108                      mov cl,8
   108 000003C4 E8E2FF                    call store_bit
   109 000003C7 59                        pop cx
   110                                  
   111 000003C8 51                        push cx
   112 000003C9 B107                      mov cl,7
   113 000003CB E8DBFF                    call store_bit
   114 000003CE 59                        pop cx
   115                                  
   116 000003CF 51                        push cx
   117 000003D0 B106                      mov cl,6
   118 000003D2 E8D4FF                    call store_bit
   119 000003D5 59                        pop cx
   120                                  
   121 000003D6 51                        push cx
   122 000003D7 B105                      mov cl,5
   123 000003D9 E8CDFF                    call store_bit
   124 000003DC 59                        pop cx
   125                                  
   126 000003DD 51                        push cx
   127 000003DE B104                      mov cl,4
   128 000003E0 E8C6FF                    call store_bit
   129 000003E3 59                        pop cx
   130                                  
   131 000003E4 51                        push cx
   132 000003E5 B103                      mov cl,3
   133 000003E7 E8BFFF                    call store_bit
   134 000003EA 59                        pop cx
   135                                  
   136 000003EB 51                        push cx
   137 000003EC B102                      mov cl,2
   138 000003EE E8B8FF                    call store_bit
   139 000003F1 59                        pop cx
   140                                  
   141 000003F2 51                        push cx
   142 000003F3 B101                      mov cl,1
   143 000003F5 E8B1FF                    call store_bit
   144 000003F8 59                        pop cx
   145 000003F9 E2C5                      loop .lp
   146                                  
   147                                    ; ; push cx
   148                                    ; ; mov cx,8
   149                                    ; ; shl al,1
   150                                    ; ; push ax
   151                                    ; ; mov al,0
   152                                    ; ; jc .a
   153                                    ; ; mov al,8
   154                                    ; ; .a: stosb
   155                                    ; ; pop ax
   156                                    ; ; pop cx
   157                                    ; loop .lp
   158                                  
   159 000003FB C3                        ret
   160                                  
   161                                  ; low,high,rise,fall
   162                                  
   163                                  ; wave_shape:
   164                                  ; rise: dw 255,128,128,128
   165                                  ; fall: dw 1,1,1,255
   166                                  ; high: dw 255,0,0,0
   167                                  ; low: dw 0,0,0,255
   168                                  
   169                                  onTimer:
   170 000003FC AC                        lodsb
   171                                    ; mov bx,[playhead]
   172                                    ; mov al,[bx]
   173                                    ; inc word [playhead]
   174 000003FD E63A                      out 0x3a,al  
   175 000003FF AA                        stosb
   176                                  
   177 00000400 81FE8853                  cmp si,sound1bit+len
   178 00000404 7301                      jae .reset_sound
   179 00000406 CF                        iret
   180                                  
   181                                  .reset_sound:
   182 00000407 31FF                      xor di,di
   183 00000409 B9201C                    mov cx,7200
   184 0000040C 31C0                      xor ax,ax
   185 0000040E F3AB                      rep stosw
   186 00000410 31FF                      xor di,di
   187 00000412 BE0040                    mov si,sound1bit
   188 00000415 CF                        iret
   189                                  
   190                                  ; scroll first 4 lines 1 character to left
   191                                    ; push ax
   192                                    ; push si
   193                                    ; push cx
   194                                    ; push ds
   195                                    ; push es
   196                                    ; pop ds   ; ds=GREEN
   197                                    ; mov si,0
   198                                    ; mov di,-4
   199                                    ; mov cx,4*COLS-4
   200                                    ; rep movsb
   201                                    ; pop ds
   202                                    ; pop cx
   203                                    ; pop si
   204                                    ; pop ax
   205                                  
   206                                    ; draw high or low bit on the right
   207                                  ;   set_cursor 1,71
   208                                  ;   or al,al
   209                                  ;   jz .low
   210                                  
   211                                  ; .high:
   212                                  ;   mov ax,-1
   213                                  ;   stosw
   214                                  ;   mov ax,0
   215                                  ;   stosw
   216                                  ;   jmp .done
   217                                  
   218                                  ; .low:
   219                                  ;   mov ax,0
   220                                  ;   stosw
   221                                  ;   mov ax,-1
   222                                  ;   stosw
   223                                  
   224                                  .done:
   225                                  
   226                                  
   227                                    ; mov cl,3
   228                                    ; shr al,cl
   229                                  
   230                                    ; shl byte [history],1   ; move history to left
   231                                    ; or byte [history],al   ; 
   232                                  
   233                                    ; shr al,1  ; now 3rd bit is high if al==8
   234                                    ; shr al,1  ; now 2nd bit is high if al==8
   235                                  
   236                                    ; or al,al
   237                                    ; jz .draw_wave
   238                                    ; mov al,255
   239                                    ; .draw_wave:
   240                                    ; times 4 stosb
   241                                  
   242                                    ; cmp al,[prev]
   243                                    ; jb .fall
   244                                    ; ja .rise
   245                                    
   246                                    ; shr al,1
   247                                    ; mov byte [prev],al    ; store 
   248                                  
   249                                    ; mov ax,[playhead]
   250                                    ; print_ax_hex
   251                                    ; print_char ' '
   252                                  
   253                                    ; mov cl,32
   254                                    ; mul cl
   255                                  
   256                                    ; mov al,255
   257                                  
   258                                    ; 
   259 00000416 CF                        iret
   260                                  
   261                                  
   262                                  
   263                                  
   264                                  
   265                                  
   266                                  
   267                                  
   268                                  
   269                                  
   270                                  
   271                                  
   272                                  ;   test byte [bit],1
   273                                  ;   je .a
   274                                  ;   lodsb
   275                                  ; .a:
   276                                  ;   test al,[bit]
   277                                  ;   mov al,0
   278                                  ;   jz .b
   279                                  ;   mov al,8
   280                                  ; .b:
   281                                  
   282                                  ;   out 0x3a,al
   283                                  
   284                                  ;   ror byte [bit],1
   285                                  
   286                                  ;   iret
   287                                  
   288                                    ; setc al
   289                                  
   290                                  ;   rol byte [bit],1
   291                                  ;   jnz .nz
   292                                  ;   lodsb  ; al=[si]; si++
   293                                  ; .nz
   294                                  
   295                                  ;   push ax
   296                                  ;   and al,[bit]
   297                                  ;   mov al,0
   298                                  ;   jz .sendbit
   299                                  ;   mov al,8
   300                                  ; .sendbit
   301                                  ;   out 0x3a,al
   302                                  ;   pop ax
   303                                  ;   iret
   304                                  
   305                                  ;   ; mov al,[bit]
   306                                  ;   ; mov ah,0
   307                                  ;   ; set_cursor 1,1
   308                                  ;   ; print_ax
   309                                  ;   ; print_char ' '
   310                                  
   311                                  ;   pop ax
   312                                    
   313                                  ;   iret
   314                                  
   315                                    ; push ax
   316                                    ; push bx
   317                                    ; push cx
   318                                  
   319                                    ; mov ax,si
   320                                    ; mov cx,8
   321                                    ; div cx ; result in ax:dx  (ax=quotient, dh=0, dl=remainder 0..7)
   322                                  
   323                                    ; mov bx,ax
   324                                    ; add bx,sound ; offset
   325                                    ; mov al,[bx] ; get sound value
   326                                  
   327                                  ; play:
   328                                  ;   mov bl,8
   329                                  ;   mov bh,1
   330                                  ; .nextbit:
   331                                  ;   push ax
   332                                  ;   mov ah,al
   333                                  ;   mov al,0
   334                                  ;   and ah,bh
   335                                  ;   jz .sendbit
   336                                  ;   mov al,8
   337                                  ; .sendbit:
   338                                  ;   out 0x3A,al
   339                                  ;   push cx
   340                                  ;   mov dx,17
   341                                  ;   mov cx,dx
   342                                  ; .wait: loop .wait
   343                                  ;   pop cx
   344                                  ;   pop ax
   345                                  ;   shl bh,1
   346                                  ;   dec bl
   347                                  ;   jnz .nextbit
   348                                  
   349                                    ; iret
   350                                  
   351                                  ;   and al, [bit_counter]
   352                                  ;   mov al,0   ; if ah&bh==0
   353                                  ;   jz .sendbit
   354                                  ;   mov al,8   ; if ah&bh!=0
   355                                  ; .sendbit:
   356                                  
   357                                  
   358                                  ; wrap
   359                                  ; jnz .next1
   360                                  ; mov byte [bit_counter],1
   361                                  
   362                                  ; .next1:
   363                                  
   364                                  
   365                                    ; mov cl,dl
   366                                    ; shl al,cl
   367                                    ; mov al,8
   368                                    ; jc .send_bit
   369                                    ; mov al,0
   370                                  
   371                                  
   372                                  
   373                                    ; mov bl,8
   374                                    ; mov cl,dl
   375                                    ; mov bh,1
   376                                    ; shl bh,cl
   377                                  
   378                                  ; ; .nextbit:
   379                                  ;   mov ah,al
   380                                  ;   and ah,bh
   381                                  ;   mov al,0   ; if ah&bh==0
   382                                  ;   jz .sendbit
   383                                  ;   mov al,8   ; if ah&bh!=0
   384                                  ; .sendbit:
   385                                  
   386                                  
   387                                    ; mov cl,dl
   388                                    ; shl al,cl
   389                                    ; mov al,8
   390                                    ; jc .send_bit
   391                                    ; mov al,0
   392                                  
   393                                  ; cmp al,128
   394                                  ; mov al,0
   395                                  ; ja .send_bit
   396                                  ; mov al,8
   397                                  ; mov al,[bx]
   398                                  
   399                                  ; .send_bit:
   400                                  
   401                                    ; and al,[bit_counter]
   402                                  
   403                                    ; inc byte [bit_counter]
   404                                    ; cmp byte [bit_counter],8
   405                                  
   406                                    ; jmp .nextbyte
   407                                  
   408                                  
   409                                    
   410                                  
   411                                    ; rol byte [bit_counter],1
   412                                    ; jnz .done_inc
   413                                  ;   inc word [counter]
   414                                  ; ; .done_inc:
   415                                  
   416                                  
   417                                  ;   ; mov ax,[counter]
   418                                  ;   ; ; mov ah,0
   419                                  ;   ; print_ax
   420                                  ;   ; print_char ' '
   421                                  
   422                                  ;   ; inc word [counter]
   423                                  ;   ; pop cx
   424                                  ;   ; pop bx
   425                                  ;   ; pop ax
   426                                  ;   cmp word [counter],len*8 ; counter is de hoeveelste bit ipv byte
   427                                  ;   jae .reset_sound
   428                                  ;   iret
   429                                  ; .reset_sound:
   430                                  ;   mov word [counter],0
   431                                  ;   mov word [bit_counter],1
   432                                  ;   iret
   433                                  
   434                                  
   435                                  ; byte_counter: dw 0
   436                                  ; bit_counter: db 1
   437                                  
   438                                  ; %include "1bit-1khz.inc"
   439                                  ; %include "1bit-ramp_up_sound.inc"
   440                                  %include "8bit-ramp_up_sound.inc"
     1 00000417 FFFFFFFF030000F0FF- <1> sound: db 255,255,255,255,3,0,0,240,255,255,127,0,0,224,255,255,15,0,0,255,255,15,0,192,255,255,0,0,254,255,3,0,254,255,1,128,255,63,0,248,255,1,192,255,7,128,255,15,128,255,7,192,255,3,240,127,0,252,31,128,255,3,248,31,128,255,1,252,15,224,127,128,255,0,254,3,252,7,248,15,240,31,240,15,240,15,240,15,240,15,248,7,252,3,254,1,255,192,31,240,7,252,1,127,192,31,248,3,127,224,15,252,129,63,240,7,126,224,7,126,224,7,126,224,7,126,224,7,126,240,131,31,252,224,7,63,248,193,15,126,240,131,31,62,248,224,131,15,62,248,224,131,15,62,248,224,131,15,62,248,224,195,135,15,31,62,124,248,240,225,195,135,15,31,62,124,248,240,225,195,135,15,31,62,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,143,199,227,241,120,60,30,143,199,227,241,120,60,30,143,199,227,241,120,60,30,143,199,227,241,120,60,30,143,199,227,241,120,60,30,143,199,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,227,56,142,2...
     1 00000420 FF7F0000E0FFFF0F00- <1>
     1 00000429 00FFFF0F00C0FFFF00- <1>
     1 00000432 00FEFF0300FEFF0180- <1>
     1 0000043B FF3F00F8FF01C0FF07- <1>
     1 00000444 80FF0F80FF07C0FF03- <1>
     1 0000044D F07F00FC1F80FF03F8- <1>
     1 00000456 1F80FF01FC0FE07F80- <1>
     1 0000045F FF00FE03FC07F80FF0- <1>
     1 00000468 1FF00FF00FF00FF00F- <1>
     1 00000471 F807FC03FE01FFC01F- <1>
     1 0000047A F007FC017FC01FF803- <1>
     1 00000483 7FE00FFC813FF0077E- <1>
     1 0000048C E0077EE0077EE0077E- <1>
     1 00000495 E0077EF0831FFCE007- <1>
     1 0000049E 3FF8C10F7EF0831F3E- <1>
     1 000004A7 F8E0830F3EF8E0830F- <1>
     1 000004B0 3EF8E0830F3EF8E0C3- <1>
     1 000004B9 870F1F3E7CF8F0E1C3- <1>
     1 000004C2 870F1F3E7CF8F0E1C3- <1>
     1 000004CB 870F1F3E1E1E1E1E1E- <1>
     1 000004D4 1E1E1E1E1E1E1E1E1E- <1>
     1 000004DD 1E1E1E1E1E1E1E1E1E- <1>
     1 000004E6 1E1E1E1E1E1E1E8FC7- <1>
     1 000004EF E3F1783C1E8FC7E3F1- <1>
     1 000004F8 783C1E8FC7E3F1783C- <1>
     1 00000501 1E8FC7E3F1783C1E8F- <1>
     1 0000050A C7E3F1783C1E8FC7E3- <1>
     1 00000513 388EE3388EE3388EE3- <1>
     1 0000051C 388EE3388EE3388EE3- <1>
     1 00000525 388EE3388EE3388EE3- <1>
     1 0000052E 388EE3388EE3388EE3- <1>
     1 00000537 388EE3388EE3388EE3- <1>
     1 00000540 388EE3388EE3388EE3- <1>
     1 00000549 38CE39E79C73CE39E7- <1>
     1 00000552 9C73CE39E79C73CE39- <1>
     1 0000055B E79C73CE39E79C73CE- <1>
     1 00000564 39E79C73CE39E79C73- <1>
     1 0000056D CE39E79C73CE39E79C- <1>
     1 00000576 73CE39E79C73CE39E7- <1>
     1 0000057F 9C73CE39E79C73CE39- <1>
     1 00000588 E79C73CE39E79C73CE- <1>
     1 00000591 39E79C73CE39E79C73- <1>
     1 0000059A CECCCCCCCCCCCCCCCC- <1>
     1 000005A3 CCCCCCCCCCCCCCCCCC- <1>
     1 000005AC CCCCCCCCCCCCCCCCCC- <1>
     1 000005B5 CCCCCCCCCCCCCCCCCC- <1>
     1 000005BE CCCCCCCCCCCCCCCCCC- <1>
     1 000005C7 CCCCCCCCCCCCCCCCCC- <1>
     1 000005D0 CCCCCCCCCCCCCCCCCC- <1>
     1 000005D9 CCCCCCCCCCCCCCCCCC- <1>
     1 000005E2 CCCCCCCCCCCCCCCCCC- <1>
     1 000005EB CCCCCCCCCCCCCCCCCC- <1>
     1 000005F4 CCCCCCCCCCCCCCCCCC- <1>
     1 000005FD CCCCCCCCCCCCCCCCCC- <1>
     1 00000606 CCCCCCCCCCCCCCCCCC- <1>
     1 0000060F CCCCCCCCCCCCCCCCCC- <1>
     1 00000618 CCCCCCCCCCCCCCCCCC- <1>
     1 00000621 CCCCB66DDBB66DDBB6- <1>
     1 0000062A 6DDBB66DDBB66DDBB6- <1>
     1 00000633 6DDBB66DDBB66DDBB6- <1>
     1 0000063C 6DDBB66DDBB66DDBB6- <1>
     1 00000645 6DDBB66DDBB66DDBB6- <1>
     1 0000064E 6DDBB66DDBB66DDBB6- <1>
     1 00000657 6DDBB66DDBB66DDBB6- <1>
     1 00000660 6DDBB66DDBB66DDBB6- <1>
     1 00000669 6DDBB66DDBB66DDBB6- <1>
     1 00000672 6DDBB66DDBB66DDBB6- <1>
     1 0000067B 6DDBB66DDBB66DDBB6- <1>
     1 00000684 6DDBB66DDBB66DDBB6- <1>
     1 0000068D 6DDBB66DDBB66DDBB6- <1>
     1 00000696 6DDBB66DDBB66DDBB6- <1>
     1 0000069F 6DDBB66DDBB66DDBB6- <1>
     1 000006A8 6DDBB66DDBB66DDBB6- <1>
     1 000006B1 6DDBB66DDBB66DDBB6- <1>
     1 000006BA 6DDBB66DDBB66DDBB6- <1>
     1 000006C3 6DDBB66DDBB66DDBB6- <1>
     1 000006CC 6DDBB66DDBB66DDBB6- <1>
     1 000006D5 6DDBB66DDBB66DDBB6- <1>
     1 000006DE 6DDBB66DDBB66DDBB6- <1>
     1 000006E7 6DDBB66DDBB66DDBB6- <1>
     1 000006F0 6DDBB66DDBB66DDBB6- <1>
     1 000006F9 6DDBB66DDBB66DDBB6- <1>
     1 00000702 6DDBB66DDBB66DDBB6- <1>
     1 0000070B 6DDBB66DDBB66DDBB6- <1>
     1 00000714 6DDBB66DDBB66DDBB6- <1>
     1 0000071D 6DDBB66DDBB66DDBB6- <1>
     1 00000726 6DDBB66DDBB66DDBB6- <1>
     1 0000072F 6DDBB66D5555555555- <1>
     1 00000738 555555555555555555- <1>
     1 00000741 555555555555555555- <1>
     1 0000074A 555555555555555555- <1>
     1 00000753 555555555555555555- <1>
     1 0000075C 555555555555555555- <1>
     1 00000765 555555555555555555- <1>
     1 0000076E 555555555555555555- <1>
     1 00000777 555555555555555555- <1>
     1 00000780 555555555555555555- <1>
     1 00000789 555555555555555555- <1>
     1 00000792 555555555555555555- <1>
     1 0000079B 555555555555555555- <1>
     1 000007A4 555555555555555555- <1>
     1 000007AD 555555555555555555- <1>
     1 000007B6 555555555555555555- <1>
     1 000007BF 555555555555555555- <1>
     1 000007C8 555555555555555555- <1>
     1 000007D1 555555555555555555- <1>
     1 000007DA 555555555555555555- <1>
     1 000007E3 555555555555555555- <1>
     1 000007EC 555555555555555555- <1>
     1 000007F5 555555555555555555- <1>
     1 000007FE 55                  <1>
   441                                  ; %include "8bit-1khz.inc"
   442                                  ; %include "wonderful-days-1-short.inc"
   443                                  endsound:
   444                                  
   445                                  
   446                                  
   447                                  ; ---------- 
   448                                  ;   mov ax, 0x100      ; startsegment
   449                                  ; .loop_segment:
   450                                  ;   mov es, ax
   451                                  ;   push ax
   452                                  ;   xor di, di
   453                                  ;   mov cx, 0xFFFF
   454                                  ;   mov al, 0xF4
   455                                  ;   rep stosb
   456                                  ;   pop ax
   457                                    
   458                                  ;   add ax, 0x10     ; volgende segment (16 bytes hoger)
   459                                  ;   cmp ax, 0xf000   ; laatste bruikbare segment vóór 1MB
   460                                  ;   jbe .loop_segment
   461                                  
   462                                  
   463                                  ; ---------------
   464                                    ; mov ax, 0
   465                                    ; mov es, ax
   466                                  
   467                                    ; mov word [es:0x380+0], 0xA70
   468                                    ; mov word [es:0x380+2], 0
   469                                  
   470                                    ; mov word [es:4*0xE0+0], 0xA70
   471                                    ; mov word [es:4*0xE0+2], 0
   472                                  
   473                                    ; mov word [es:4*0xF8+0], 0xA70
   474                                    ; mov word [es:4*0xF8+2], 0
   475                                  
   476                                    ; mov word [es:4*0xF9+0], 0xA70
   477                                    ; mov word [es:4*0xF9+2], 0
   478                                  
   479                                    ; mov word [es:4*0xFA+0], 0xA70
   480                                    ; mov word [es:4*0xFA+2], 0
   481                                  
   482                                    ; mov al, 0x13
   483                                    ; out 0x00, al    ; ICW1: init, edge-triggered, ICW4 nodig
   484                                    ; mov al, 0xF8
   485                                    ; out 0x02, al    ; ICW2: interrupt vector offset
   486                                    ; mov al, 0x0F
   487                                    ; out 0x02, al    ; ICW4: 8086 mode, auto EOI
   488                                    ; mov al, 0xFE
   489                                    ; out 0x02, al    ; OCW1: alleen IRQ0 ingeschakeld
   490                                  
   491                                  ;8259A interrupt controller
   492                                      ; dw 0x0013, 0x02f8, 0x020f, 0x0296
   493                                      ; 
   494                                  
   495                                  ;   sti
   496                                  
   497                                  ; update:
   498                                  ;   mov al, 0x00
   499                                  ;   out 0x26, al
   500                                  ;   in al, 0x20
   501                                  ;   mov bl, al
   502                                  ;   in al, 0x20
   503                                  ;   mov bh, al
   504                                  ;   mov [counter],bx
   505                                  ;   ; jmp update
   506                                  ;   hlt
   507                                  
   508                                  ; onTimer:
   509                                  ;   mov byte [counter],0x99
   510                                  ;   ; times 1000 cli
   511                                  ;   iret
   512                                  
   513                                  
   514                                  
   515                                    ; mov si,sound
   516                                  
   517                                  
   518                                  ; .loop:
   519                                    
   520                                  
   521                                  ;     inc si
   522                                  ;     cmp si,endsound
   523                                  ;     ja .reset_sound
   524                                  
   525                                  ;     mov al,[si]
   526                                  ;     ; shl al,dl
   527                                  ;     out 0x3A, al
   528                                  
   529                                  ;   mov cx,10
   530                                  ;   .delay 
   531                                  ;   nop
   532                                  ;   loop .delay
   533                                  
   534                                  ;   jmp .loop
   535                                  
   536                                  ; .reset_sound
   537                                  ;   mov si,sound
   538                                  ;   jmp .loop
   539                                  
   540                                  
   541                                  
   542                                  
   543                                  
   544                                    ;   cmp bx, ticks/2
   545                                    ;   jb .low
   546                                  
   547                                    ; .high:
   548                                    ;   mov al, 8
   549                                    ;   out 0x3A, al
   550                                    ;   jmp .loop
   551                                    ; .low:
   552                                    ;   mov al, 0
   553                                    ;   out 0x3A, al
   554                                    ;   jmp .loop
   555                                  
   556                                   
   557                                  
   558                                  
   559                                  
   560                                  
   561                                  
   562                                  
   563                                  
   564                                  
   565                                  
   566                                  
   567                                  
   568                                  
   569                                  
   570                                  
   571                                  ; start:
   572                                   
   573                                  ;   mov al, 0x13
   574                                  ;   out 0x00, al    ; ICW1: init, edge-triggered, ICW4 nodig
   575                                  ;   mov al, 0xF8
   576                                  ;   out 0x02, al    ; ICW2: interrupt vector offset
   577                                  ;   mov al, 0x0F
   578                                  ;   out 0x02, al    ; ICW4: 8086 mode, auto EOI
   579                                  ;   mov al, 0xFE
   580                                  ;   out 0x02, al    ; OCW1: alleen IRQ0 ingeschakeld
   581                                  
   582                                  
   583                                  ;   ; cli
   584                                  ;   ; mov ax, 0
   585                                  ;   ; mov es, ax
   586                                  ;   ; mov word [es:0x3E0], onTimer
   587                                  ;   ; mov word [es:0x3E2], cs
   588                                    
   589                                  ; mov al, 0x34
   590                                  ;   out 0x26, al    ; Mode 2, lobyte/hibyte, counter 0
   591                                  ;   mov al, 11
   592                                  ;   out 0x20, al    ; Lobyte
   593                                  ;   mov al, 0
   594                                  ;   out 0x20, al    ; Hibyte
   595                                  
   596                                  
   597                                  ;   ; sti
   598                                  
   599                                  ; .lp:
   600                                  
   601                                    
   602                                  
   603                                  ;   mov al, 0x00        ; Command: latch counter 0
   604                                  ;   out 0x26, al        ; Command register is op poort 0x26
   605                                  
   606                                  ;   in al, 0x20         ; Lees lobyte van counter 0
   607                                  ;   mov bl, al
   608                                  
   609                                  ;   in al, 0x20         ; Lees hibyte van counter 0
   610                                  ;   mov bh, al
   611                                  
   612                                  ;   mov byte al, [cs:sound+bx]
   613                                  ;   times 3 shl al,1
   614                                  
   615                                  ;   ; mov byte cs:[counter], al
   616                                  
   617                                  ; ; inc byte cs:[counter]
   618                                  
   619                                  ;   out 0x3A, al
   620                                  
   621                                  ;   jmp .lp
   622                                  
   623                                  
   624                                  
   625                                  ;   hlt
   626                                  
   627                                  ; onTimer:
   628                                  ;   ; inc byte cs:[counter]
   629                                  ;   iret
   630                                  
   631                                  ; counter: dw 0
   632                                  
   633                                    
   634                                  
   635                                  
   636                                  ; ; ; ; play:
   637                                  ; ; ; ;   lodsb
   638                                  ; ; ; ;   mov bl,8
   639                                  ; ; ; ;   mov bh,1
   640                                  ; ; ; ; .nextbit:
   641                                  ; ; ; ;   push ax
   642                                  ; ; ; ;   mov ah,al
   643                                  ; ; ; ;   mov al,0
   644                                  ; ; ; ;   and ah,bh
   645                                  ; ; ; ;   jz .sendbit
   646                                  ; ; ; ;   mov al,8
   647                                  ; ; ; ; .sendbit:
   648                                  ; ; ; ;   out 0x3A,al
   649                                  ; ; ; ;   push cx
   650                                  ; ; ; ;   mov cx,dx
   651                                  ; ; ; ; .wait: loop .wait
   652                                  ; ; ; ;   pop cx
   653                                  ; ; ; ;   pop ax
   654                                  ; ; ; ;   shl bh,1
   655                                  ; ; ; ;   dec bl
   656                                  ; ; ; ;   jnz .nextbit
   657                                  ; ; ; ;   loop play
   658                                  ; ; ; ;   ret
   659                                  
   660                                  
   661                                  
   662                                  
   663                                  
   664                                  
   665                                  
   666                                  
   667                                  
   668                                  ;   ; cli
   669                                  
   670                                  ;   ; mov ax,RED
   671                                  ;   ; mov es,ax
   672                                  ;   ; xor di,di
   673                                  ;   ; mov ax,-1
   674                                  ;   ; stosw
   675                                  
   676                                  ;   ; call background
   677                                  
   678                                  ;   ; iret
   679                                  
   680                                  
   681                                  ;   ; 8259A interrupt controller
   682                                  ;   ; mov al,0x13
   683                                  ;   ; out 0x00,al ;ICW1
   684                                  ;   ; mov al,0xf8
   685                                  ;   ; out 0x02,al ;ICW2
   686                                  ;   ; mov al,0x0f
   687                                  ;   ; out 0x02,al ;ICW4
   688                                  ;   ; mov al,0x96
   689                                  ;   ; out 0x02,al ;mask
   690                                  
   691                                  ;   ; ; ;Timer init code
   692                                  ;   ; mov al,0x34
   693                                  ;   ; out 0x26,al
   694                                  ;   ; mov al,0xbf
   695                                  ;   ; out 0x20,al
   696                                  ;   ; mov al,0x21
   697                                  ;   ; out 0x20,al ;channel 0 (clock)
   698                                  
   699                                  ;   ; mov al,0x74
   700                                  ;   ; out 0x26,al
   701                                  ;   ; mov al,0x00
   702                                  ;   ; out 0x22,al
   703                                  ;   ; mov al,0x00
   704                                  ;   ; out 0x22,al ;channel 1 (2nd stage clock)
   705                                  ;   ; mov al,0xb6
   706                                  ;   ; out 0x26,al
   707                                  ;   ; mov al,0x5d
   708                                  ;   ; out 0x24,al
   709                                  ;   ; mov al,0x00
   710                                  ;   ; out 0x24,al ;channel 2 (add-in serial rate)
   711                                  
   712                                  
   713                                  ; ;   mov cx,0xff ; 0xe0
   714                                  ;   ; xor di,di
   715                                  ;   ; mov es,di
   716                                  ; ; .lp:
   717                                  ; ;   mov ax,onTimer
   718                                  ; ;   stosw
   719                                  ; ;   mov ax,cs
   720                                  ; ;   stosw
   721                                  ; ;   loop .lp
   722                                  
   723                                  ; ;   xor ax,ax
   724                                  ; ;   mov es,ax
   725                                  
   726                                  ; ;   mov word [es:4*0xf8+0], onTimer
   727                                  ; ;   mov word [es:4*0xf8+2], cs
   728                                  
   729                                  ; ;   mov word [es:4*0xf9+0], onTimer
   730                                  ; ;   mov word [es:4*0xf9+2], cs
   731                                  
   732                                  ; ; ; loop lp
   733                                  ; ;   sti
   734                                  
   735                                  ; ;   hlt
   736                                  
   737                                  
   738                                  
   739                                  ;   ; mov word [es:4*int_timer0],cs
   740                                  ;   ; mov word [es:4*int_timer0+2],onTimer
   741                                  
   742                                  ;   ;8259A interrupt controller
   743                                  ;   ; mov al,0x13
   744                                  ;   ; out 0x00,al ;ICW1
   745                                  ;   ; mov al,0xf8
   746                                  ;   ; out 0x02,al ;ICW2
   747                                  ;   ; mov al,0x0f
   748                                  ;   ; out 0x02,al ;ICW4
   749                                  ;   ; mov al,0x96
   750                                  ;   ; out 0x02,al ;mask
   751                                  
   752                                  ;   ; ; ;Timer init code
   753                                  ;   ; mov al,0x34
   754                                  ;   ; out 0x26,al
   755                                  ;   ; mov al,0xbf
   756                                  ;   ; out 0x20,al
   757                                  ;   ; mov al,0x21
   758                                  ;   ; out 0x20,al ;channel 0 (clock)
   759                                  
   760                                  ;   ; mov al,0x74
   761                                  ;   ; out 0x26,al
   762                                  ;   ; mov al,0x00
   763                                  ;   ; out 0x22,al
   764                                  ;   ; mov al,0x00
   765                                  ;   ; out 0x22,al ;channel 1 (2nd stage clock)
   766                                  ;   ; mov al,0xb6
   767                                  ;   ; out 0x26,al
   768                                  ;   ; mov al,0x5d
   769                                  ;   ; out 0x24,al
   770                                  ;   ; mov al,0x00
   771                                  ;   ; out 0x24,al ;channel 2 (add-in serial rate)
   772                                  
   773                                  ;   ; sti
   774                                  
   775                                  ;   ; hlt
   776                                  
   777                                  ;   ; ; cli
   778                                  
   779                                  ;   ; call background
   780                                  
   781                                  ;   ; hlt
   782                                  
   783                                  ;   ; .j jmp .j
   784                                  
   785                                  
   786                                  
   787                                  ; ; background:
   788                                  ; ;   mov ax,RED
   789                                  ; ;   mov es,ax
   790                                  ; ;   mov cx,1 ; 72*25*4
   791                                  ; ;   xor di,di
   792                                  ; ;   mov ax,-1
   793                                  ; ;   rep stosw
   794                                  ; ;   ret
   795                                  
   796                                  
   797                                  
   798                                  
   799                                  
   800                                  ; ; hlt
   801                                  
   802                                  ; ; RED   equ 0xf000
   803                                  ; ; GREEN equ 0x1c00
   804                                  ; ; BLUE  equ 0xf400
   805                                  
   806                                  
   807                                  ; ; ; mov si, 0x0000
   808                                  ; ; ; mov ax, 0x0038
   809                                  ; ; ; mov ds, ax
   810                                  ; ; ; mov di, 0x0000
   811                                  ; ; ; mov ax, 0x1000
   812                                  ; ; ; mov es, ax
   813                                  ; ; ; mov cx, 512
   814                                  ; ; ; rep movsb
   815                                  
   816                                  ; ; ; cs jmp setup
   817                                  
   818                                  ; ; ; setup:
   819                                  
   820                                  
   821                                  
   822                                  ; ; ; setup:
   823                                  
   824                                  
   825                                  ; ;   mov ax,0
   826                                  ; ;   mov es,ax
   827                                  ; ;   ; mov ds,cs
   828                                  ; ;   mov word [es:4*my_int],cs
   829                                  ; ;   mov word [es:4*my_int+2],onTimer
   830                                  
   831                                  ; ; hlt
   832                                  
   833                                  ; ;   ; mov ax,onTimer
   834                                  ; ;   ; mov di,4*0xf8
   835                                  
   836                                  
   837                                  ; ;   ;8259A interrupt controller
   838                                  ; ;   mov al,0x13
   839                                  ; ;   out 0x00,al ;ICW1
   840                                  ; ;   mov al,0xf8
   841                                  ; ;   out 0x02,al ;ICW2
   842                                  ; ;   mov al,0x0f
   843                                  ; ;   out 0x02,al ;ICW4
   844                                  ; ;   mov al,0x96
   845                                  ; ;   out 0x02,al ;mask
   846                                  
   847                                  ; ;   ;Timer init code
   848                                  ; ;   mov al,0x34
   849                                  ; ;   out 0x26,al
   850                                  ; ;   mov al,0xbf
   851                                  ; ;   out 0x20,al
   852                                  ; ;   mov al,0x21
   853                                  ; ;   out 0x20,al ;channel 0 (clock)
   854                                  ; ;   mov al,0x74
   855                                  ; ;   out 0x26,al
   856                                  ; ;   mov al,0x00
   857                                  ; ;   out 0x22,al
   858                                  ; ;   mov al,0x00
   859                                  ; ;   out 0x22,al ;channel 1 (2nd stage clock)
   860                                  ; ;   mov al,0xb6
   861                                  ; ;   out 0x26,al
   862                                  ; ;   mov al,0x5d
   863                                  ; ;   out 0x24,al
   864                                  ; ;   mov al,0x00
   865                                  ; ;   out 0x24,al ;channel 2 (add-in serial rate)
   866                                  
   867                                  
   868                                  ; ; ;   ; call background
   869                                  
   870                                  ; ; ;   hlt
   871                                  
   872                                  ; ; onTimer:
   873                                  ; ;   call background
   874                                  ; ;   iret
   875                                  
   876                                  
   877                                  ; ; background:
   878                                  ; ;   mov ax,RED
   879                                  ; ;   mov es,ax
   880                                  ; ;   mov cx,72*25*4
   881                                  ; ;   xor di,di
   882                                  ; ;   mov ax,-1
   883                                  ; ;   rep stosw
   884                                  ; ;   ret
   885                                  
   886                                  ; ; ; ;   mov dx,20 ; pitch (24=default)  loop delay
   887                                  ; ; ; ;   mov si,sound
   888                                  ; ; ; ;   lodsw
   889                                  ; ; ; ;   mov cx,endsound-sound  ; first 2 bytes loaded from sound: db (not yet for converted waves)
   890                                  ; ; ; ;   call play
   891                                  ; ; ; ;   ret
   892                                  
   893                                  ; ; ; ;   hlt
   894                                  
   895                                  
   896                                  ; ; ; ; play:
   897                                  ; ; ; ;   lodsb
   898                                  ; ; ; ;   mov bl,8
   899                                  ; ; ; ;   mov bh,1
   900                                  ; ; ; ; .nextbit:
   901                                  ; ; ; ;   push ax
   902                                  ; ; ; ;   mov ah,al
   903                                  ; ; ; ;   mov al,0
   904                                  ; ; ; ;   and ah,bh
   905                                  ; ; ; ;   jz .sendbit
   906                                  ; ; ; ;   mov al,8
   907                                  ; ; ; ; .sendbit:
   908                                  ; ; ; ;   out 0x3A,al
   909                                  ; ; ; ;   push cx
   910                                  ; ; ; ;   mov cx,dx
   911                                  ; ; ; ; .wait: loop .wait
   912                                  ; ; ; ;   pop cx
   913                                  ; ; ; ;   pop ax
   914                                  ; ; ; ;   shl bh,1
   915                                  ; ; ; ;   dec bl
   916                                  ; ; ; ;   jnz .nextbit
   917                                  ; ; ; ;   loop play
   918                                  ; ; ; ;   ret
   919                                  
   920                                  ; %include "assets/8bit-1khz.inc"
   921                                  ; ; ; endsound:
   922                                  
   923                                  ; ; sound: db 1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0
   924                                  
   925                                  ; print_ax
   926                                    ; print_char ' '
   927                                  
   928                                    ; mov al,dl
   929                                  
   930                                    
   931                                  
   932                                    ; mov cl,8
   933                                  
   934                                    ; mov ah,0 ; clear hibyte
   935                                  
   936                                    ; div cl   ; result in al, rest in ah ?
   937                                  
   938                                  ; of een extra variabele voor de AND bit waarde 1 2 4 8 ....
   939                                  ; liever geen div maar een extra variabele die optelt en na elke 7 de hoofdcounter 1 omhoog doet
   940                                  
   941                                  
   942                                    ; mov ah,0
   943                                    ; mov al,dl
   944                                  
   945                                  
   946                                  
   947                                    ; mov bx,ax
   948                                    ; mov al,[bx] ; get byte with 8 bits
   949                                  
   950                                    ; mov cl,dl ; cl bevat nu 0..7 (want dl is lobyte van rest waarde van deling door 8)
   951                                  
   952                                    ; shl al,cl ; carry bit bevat nu 0 of 1
   953                                  
   954                                    ; mov ah,0
   955                                  
   956                                    
   957                                  
   958                                  
   959                                  ; mov al,8
   960                                  ;   jc .sendbit
   961                                  ; mov al,0
   962                                  ;   .sendbit
   963                                  
   964                                  ; bovenstaande werkt nog niet maar zou wel ongeveer het idee moeten zijn
   965                                  
   966                                  
   967                                  
   968                                  
   969                                  
   970                                  ; mov cl,dl
   971                                  
   972                                  
   973                                  ; volgende stap is om 8 bits per byte aan audio op te slaan...
   974                                  ; zie voorbeeld in Sound2? 
   975                                  
   976                                  
   977                                  ; mov ax,GREEN
   978                                    ; mov es,ax
   979                                    ; mov cx,COLS*ROWS*2
   980                                    ; mov di,8*72
   981                                    ; mov ax,[counter]
   982                                    ; rep stosw         ; clear screen
   983                                    
   984                                  
   985                                    ; set_cursor 1,1
   986                                    ; print_ax
   987                                  
   988                                  
   989                                  %assign num $-$$
   990                                  %warning total num
   990          ******************       warning: total 2047 [-w+user]
   991                                  
   992 000007FF F4<rep 2C801h>          times (180*1024)-($-$$) db 0xf4
   993                                  
