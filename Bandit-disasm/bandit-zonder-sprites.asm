; Time Bandid for Sanyo MBC-555
; disassembled from LST file created with '?'. probably not IDA-pro.

; MZ header
; ....

; begin @ _0x90db


org 0
cpu 8086

; ─────────────────────────────────────────────────────────────────────

_0x0297:  mov di,0x51
_0x029a:  mov cx,0x46
_0x029d:  xor al,al
_0x029f:  rep stosb

_0x02a1:  ret

; ─────────────────────────────────────────────────────────────────────

_0x02a2:  push di
_0x02a3:  push si
_0x02a4:  push cx
_0x02a5:  mov cx,0x7
_0x02a8:  mov di,0x51
_0x02ab:  cmp word [di+0x4],byte +0x0
_0x02af:  jz _0x02b8
_0x02b1:  add di,byte +0xa
_0x02b4:  loop _0x02ab
_0x02b6:  jmp short _0x02cc

; ─────────────────────────────────────────────────────────────────────

_0x02b8:  mov cx,ax
_0x02ba:  shl ax,1
_0x02bc:  shl ax,1
_0x02be:  add ax,cx
_0x02c0:  shl ax,1
_0x02c2:  mov si,0x1
_0x02c5:  add si,ax
_0x02c7:  mov cx,0x5
_0x02ca:  rep movsw

_0x02cc:  pop cx
_0x02cd:  pop si
_0x02ce:  pop di
_0x02cf:  ret

; ─────────────────────────────────────────────────────────────────────

_0x02d0:  cmp byte [0x8db8],0x1
_0x02d5:  jz _0x02d8
_0x02d7:  ret

; ─────────────────────────────────────────────────────────────────────

_0x02d8:  mov si,0x51
_0x02db:  mov cx,0x7
_0x02de:  cmp word [si+0x4],byte +0x0
_0x02e2:  jz _0x02fd
_0x02e4:  dec word [si+0x4]
_0x02e7:  mov dx,[si+0x6]
_0x02ea:  mov bx,[si+0x8]
_0x02ed:  push cx
_0x02ee:  call _0x0303
_0x02f1:  pop cx
_0x02f2:  mov ax,[si]
_0x02f4:  add [si+0x6],ax
_0x02f7:  mov ax,[si+0x2]
_0x02fa:  add [si+0x8],ax
_0x02fd:  add si,byte +0xa
_0x0300:  loop _0x02de
_0x0302:  ret

; ─────────────────────────────────────────────────────────────────────

_0x0303:  cli
_0x0304:  mov al,0x3d
_0x0306:  out 0x3a,al        ; keyboard / beep
_0x0308:  mov cx,bx
_0x030a:  loop _0x30a
_0x030c:  mov al,0x35
_0x030e:  out 0x3a,al        ; keyboard / beep
_0x0310:  mov cx,bx
_0x0312:  loop _0x312
_0x0314:  dec dx
_0x0315:  jnz _0x303
_0x0317:  sti
_0x0318:  ret

; ─────────────────────────────────────────────────────────────────────

; DATA
_0x0319: times 0x5B8 db 0
; ........................
; ........................
; ........................
; ........................
; ........................
; ........................
; ........................
; ........................

; ─────────────────────────────────────────────────────────────────────

_0x08d1:  mov di,0x2
_0x08d4:  pushf
_0x08d5:  push dx
_0x08d6:  push di
_0x08d7:  push es
_0x08d8:  cli
_0x08d9:  cld
_0x08da:  mov al,dh
_0x08dc:  out 0xc,al      ; disk sector
_0x08de:  mov dx,0x8
_0x08e1:  mov si,0x70d
_0x08e4:  mov bp,bx
_0x08e6:  mov di,bx
_0x08e8:  mov ax,ds
_0x08ea:  mov es,ax
_0x08ec:  mov bh,0x2
_0x08ee:  mov bl,0x96
_0x08f0:  mov ah,0x0
_0x08f2:  mov al,0x80
_0x08f4:  out 0x8,al     ; floppy command
_0x08f6:  aam
_0x08f8:  aam
_0x08fa:  aam
_0x08fc:  aam
_0x08fe:  in al,dx       ; floppy status
_0x08ff:  sar al,1
_0x0901:  jnc _0x91f
_0x0903:  jnz _0x8fe
_0x0905:  in al,dx       ; floppy status
_0x0906:  and al,bl
_0x0908:  jz _0x905
_0x090a:  in al,0xe
_0x090c:  stosb
_0x090d:  in al,dx       ; floppy status
_0x090e:  dec ax
_0x090f:  jz _0x90d
_0x0911:  cmp al,bh
_0x0913:  jnz _0x91f
_0x0915:  in al,0xe      ; floppy data
_0x0917:  stosb
_0x0918:  in al,dx       ; floppy status
_0x0919:  cmp al,bh
_0x091b:  jz _0x915
_0x091d:  jmp si

; ─────────────────────────────────────────────────────────────────────

_0x091f:  mov bx,di
_0x0921:  pop es
_0x0922:  pop di
_0x0923:  pop dx
_0x0924:  popf
_0x0925:  in al,0x8      ; floppy status
_0x0927:  and al,0xff
_0x0929:  jnz _0x947
_0x092b:  loop _0x93a
_0x092d:  pop es
_0x092e:  pop di
_0x092f:  pop si
_0x0930:  pop bp
_0x0931:  pop dx
_0x0932:  pop cx
_0x0933:  pop bx
_0x0934:  pop ax
_0x0935:  call _0xb57
_0x0938:  clc
_0x0939:  ret
_0x093a:  inc dh
_0x093c:  cmp dh,0x9
_0x093f:  jc _0x8d1
_0x0941:  inc dl
_0x0943:  mov dh,0x1
_0x0945:  jmp short _0x8c9

; ─────────────────────────────────────────────────────────────────────

_0x0947:  mov bx,bp
_0x0949:  dec di
_0x094a:  jz _0x964
_0x094c:  test al,0x3c
_0x094e:  jz _0x95c
_0x0950:  test di,0x1
_0x0954:  jnz _0x95c
_0x0956:  call _0xb3f
_0x0959:  jmp _0x8c9

; ─────────────────────────────────────────────────────────────────────

_0x095c:  jmp _0x8d4

; ─────────────────────────────────────────────────────────────────────

_0x095f:  test al,0x80
_0x0961:  jz _0x964
_0x0963:  clc
_0x0964:  pop es
_0x0965:  pop di
_0x0966:  pop si
_0x0967:  pop bp
_0x0968:  pop dx
_0x0969:  pop cx
_0x096a:  pop bx
_0x096b:  lahf
_0x096c:  add sp,byte +0x2
_0x096f:  sahf
_0x0970:  call _0xb57
_0x0973:  jc _0x98f
_0x0975:  test al,0x80
_0x0977:  jnz _0x987
_0x0979:  test al,0x10
_0x097b:  jnz _0x993
_0x097d:  test al,0xc
_0x097f:  jnz _0x98b
_0x0981:  jmp short _0x99b

; ─────────────────────────────────────────────────────────────────────

_0x0983:  mov al,0x0
_0x0985:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x0987:  mov al,0x2
_0x0989:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x098b:  mov al,0x4
_0x098d:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x098f:  mov al,0x6
_0x0991:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x0993:  mov al,0x8
_0x0995:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x0997:  mov al,0xa
_0x0999:  jmp short _0x99d

; ─────────────────────────────────────────────────────────────────────

_0x099b:  mov al,0xc
_0x099d:  stc
_0x099e:  ret
_0x099f:  push ax
_0x09a0:  push bx
_0x09a1:  push cx
_0x09a2:  push dx
_0x09a3:  push bp
_0x09a4:  push di
_0x09a5:  push es
_0x09a6:  call _0xb5e
_0x09a9:  call _0xa8e
_0x09ac:  call _0xae0
_0x09af:  jnc _0x9b4
_0x09b1:  jmp _0xa50

; ─────────────────────────────────────────────────────────────────────

_0x09b4:  mov di,0xa
_0x09b7:  push cx
_0x09b8:  push dx
_0x09b9:  push si
_0x09ba:  push di
_0x09bb:  cli
_0x09bc:  cld
_0x09bd:  mov al,dh
_0x09bf:  out 0xc,al         ; disk sector
_0x09c1:  mov dx,0x8
_0x09c4:  mov di,0x7f6
_0x09c7:  mov bp,bx
_0x09c9:  mov si,bx
_0x09cb:  mov ax,ds
_0x09cd:  mov es,ax
_0x09cf:  mov al,0xa0
_0x09d1:  out 0x8,al         ; floppy
_0x09d3:  aam
_0x09d5:  aam
_0x09d7:  aam
_0x09d9:  aam
_0x09db:  mov ah,0xc
_0x09dd:  mov ch,0x0
_0x09df:  mov bh,0x2
_0x09e1:  mov bl,0xf6
_0x09e3:  lodsb
_0x09e4:  xchg ax,cx
_0x09e5:  in al,dx           ; floppy status
_0x09e6:  sar al,1
_0x09e8:  jnc _0xa0a
_0x09ea:  jnz _0x9e5
_0x09ec:  in al,dx           ; floppy status
_0x09ed:  and al,bl
_0x09ef:  jz _0x9ec
_0x09f1:  xchg ax,cx
_0x09f2:  out 0xe,al         ; floppy
_0x09f4:  jmp short _0xa01

; ─────────────────────────────────────────────────────────────────────

_0x09f6:  in al,dx           ; floppy status
_0x09f7:  dec ax
_0x09f8:  jz _0x9f6
_0x09fa:  cmp al,bh
_0x09fc:  jnz _0xa0a
_0x09fe:  xchg ax,cx
_0x09ff:  out 0xe,al         ; floppy
_0x0a01:  lodsb
_0x0a02:  xchg ax,cx
_0x0a03:  in al,dx           ; floppy status
_0x0a04:  and al,bh
_0x0a06:  jnz _0x9fe
_0x0a08:  jmp di

; ─────────────────────────────────────────────────────────────────────

_0x0a0a:  mov bx,bp
_0x0a0c:  add bx,0x200
_0x0a10:  pop di
_0x0a11:  pop si
_0x0a12:  pop dx
_0x0a13:  pop cx
_0x0a14:  in al,0x8           ; floppy status
_0x0a16:  and al,0xff
_0x0a18:  jnz _0xa38
_0x0a1a:  loop _0xa28
_0x0a1c:  pop es
_0x0a1d:  pop di
_0x0a1e:  pop bp
_0x0a1f:  pop dx
_0x0a20:  pop cx
_0x0a21:  pop bx
_0x0a22:  pop ax
_0x0a23:  call _0xb57
_0x0a26:  clc
_0x0a27:  ret
_0x0a28:  inc dh
_0x0a2a:  cmp dh,0x9
_0x0a2d:  jnc _0xa31
_0x0a2f:  jmp short _0x9b4

; ─────────────────────────────────────────────────────────────────────

_0x0a31:  inc dl
_0x0a33:  mov dh,0x1
_0x0a35:  jmp _0x9ac

; ─────────────────────────────────────────────────────────────────────

_0x0a38:  mov bx,bp
_0x0a3a:  dec di
_0x0a3b:  jz _0xa55
_0x0a3d:  test al,0x3c
_0x0a3f:  jz _0xa4d
_0x0a41:  test di,0x1
_0x0a45:  jnz _0xa4d
_0x0a47:  call _0xb3f
_0x0a4a:  jmp _0x9ac

; ─────────────────────────────────────────────────────────────────────

_0x0a4d:  jmp _0x9b7

; ─────────────────────────────────────────────────────────────────────

_0x0a50:  test al,0x80
_0x0a52:  jz _0xa55
_0x0a54:  clc
_0x0a55:  pop es
_0x0a56:  pop di
_0x0a57:  pop bp
_0x0a58:  pop dx
_0x0a59:  pop cx
_0x0a5a:  pop bx
_0x0a5b:  lahf
_0x0a5c:  add sp,byte +0x2
_0x0a5f:  sahf
_0x0a60:  call _0xb57
_0x0a63:  jnc _0xa68
_0x0a65:  jmp _0x98f

; ─────────────────────────────────────────────────────────────────────

_0x0a68:  test al,0x80
_0x0a6a:  jz _0xa6f
_0x0a6c:  jmp _0x987

; ─────────────────────────────────────────────────────────────────────

_0x0a6f:  test al,0x40
_0x0a71:  jz _0xa76
_0x0a73:  jmp _0x983

; ─────────────────────────────────────────────────────────────────────

_0x0a76:  test al,0x20
_0x0a78:  jz _0xa7d
_0x0a7a:  jmp _0x997

; ─────────────────────────────────────────────────────────────────────

_0x0a7d:  test al,0x10
_0x0a7f:  jz _0xa84
_0x0a81:  jmp _0x993

; ─────────────────────────────────────────────────────────────────────

_0x0a84:  test al,0xc
_0x0a86:  jz _0xa8b
_0x0a88:  jmp _0x98b

; ─────────────────────────────────────────────────────────────────────

_0x0a8b:  jmp _0x99b

; ─────────────────────────────────────────────────────────────────────

_0x0a8e:  push bx
_0x0a8f:  push ax
_0x0a90:  in al,0x1c      ; parallel/floppy control
_0x0a92:  and al,0x3
_0x0a94:  mov byte [cs:0x6b0],0xfc
_0x0a9a:  or [cs:0x6b0],al
_0x0a9f:  pop ax
_0x0aa0:  mov bh,0x0
_0x0aa2:  mov bl,[cs:0x6b0]
_0x0aa7:  mov [cs:0x6b0],al
_0x0aab:  and al,0x3
_0x0aad:  and bl,0x3
_0x0ab0:  cmp al,bl
_0x0ab2:  jz _0xad1
_0x0ab4:  push ax
_0x0ab5:  in al,0xa             ; floppy track ?
_0x0ab7:  mov [cs:bx+0x6b1],al
_0x0abc:  pop ax
_0x0abd:  mov bl,al
_0x0abf:  and al,0x3
_0x0ac1:  out 0x1c,al           ; floppy
_0x0ac3:  mov al,[cs:bx+0x6b1]
_0x0ac8:  out 0xa,al            ; floppy
_0x0aca:  cmp al,0x28
_0x0acc:  jc _0xad1
_0x0ace:  call _0xb3f
_0x0ad1:  mov ax,dx
_0x0ad3:  mov dl,0x8
_0x0ad5:  div dl
_0x0ad7:  inc ah
_0x0ad9:  mov dx,ax
_0x0adb:  and dh,0xf
_0x0ade:  pop bx
_0x0adf:  ret

; ─────────────────────────────────────────────────────────────────────

_0x0ae0:  push bx
_0x0ae1:  push cx
_0x0ae2:  push dx
_0x0ae3:  add dl,dl
_0x0ae5:  mov bx,0xa
_0x0ae8:  cmp dl,[cs:0x6b5]
_0x0aed:  jz _0xaf4
_0x0aef:  mov cx,0x14d
_0x0af2:  loop _0xaf2
_0x0af4:  mov al,dl
_0x0af6:  shr al,1
_0x0af8:  out 0xe,al        ; floppy
_0x0afa:  mov al,0x18
_0x0afc:  out 0x8,al        ; floppy
_0x0afe:  in al,0x1c        ; floppy
_0x0b00:  mov ah,dl
_0x0b02:  shl ah,1
_0x0b04:  shl ah,1
_0x0b06:  and ah,0x4
_0x0b09:  and al,0xfb
_0x0b0b:  or al,ah
_0x0b0d:  out 0x1c,al       ; floppy
_0x0b0f:  in al,0x8         ; floppy
_0x0b11:  test al,0x1
_0x0b13:  jnz _0xb0f
_0x0b15:  mov cx,0x8214
_0x0b18:  in al,0x8         ; floppy
_0x0b1a:  test al,0x80
_0x0b1c:  jz _0xb25
_0x0b1e:  loop _0xb18
_0x0b20:  dec bx
_0x0b21:  jnz _0xae8
_0x0b23:  jmp short _0xb36

; ─────────────────────────────────────────────────────────────────────

_0x0b25:  cmp dl,[cs:0x6b5]
_0x0b2a:  jz _0xb31
_0x0b2c:  mov cx,0x14d
_0x0b2f:  loop _0xb2f
_0x0b31:  mov [cs:0x6b5],dl
_0x0b36:  pop dx
_0x0b37:  pop cx
_0x0b38:  pop bx
_0x0b39:  and al,0x90
_0x0b3b:  jz _0xb3e
_0x0b3d:  stc
_0x0b3e:  ret

; ─────────────────────────────────────────────────────────────────────

_0x0b3f:  mov al,0x8
_0x0b41:  out 0x8,al         ; floppy
_0x0b43:  in al,0x8          ; floppy
_0x0b45:  test al,0x1
_0x0b47:  jnz _0xb43
_0x0b49:  push cx
_0x0b4a:  mov cx,0x1b51
_0x0b4d:  loop _0xb4d
_0x0b4f:  pop cx
_0x0b50:  mov byte [cs:0x6b5],0x0
_0x0b56:  ret

; ─────────────────────────────────────────────────────────────────────

_0x0b57:  push ax
_0x0b58:  mov al,0x27
_0x0b5a:  out 0x2a,al       ; serial ?
_0x0b5c:  pop ax
_0x0b5d:  ret

; ─────────────────────────────────────────────────────────────────────

_0x0b5e:  push ax
_0x0b5f:  mov al,0x5
_0x0b61:  out 0x2a,al       ; serial ?
_0x0b63:  pop ax
_0x0b64:  ret

; ─────────────────────────────────────────────────────────────────────

; DATA 

_0x0b65: times 0x793D db 0    ; veel blokken data. mogelijke startpunten:
                              ; _0x5a50, _0x6243, _0x7393, _0x7753, _0x7b2c, _0x7e0a, _0x8483

; _0x0c30, 64*192); //sprites
; _0x3c4e, 40*192); //sprites
; _0x6cf0, 1583);   // strings
; _0x7393, 5*192);  //sprites
; _0x7753, 984);    // strings
; _0x7e0a, 1656);   // strings
; _0x8bbb, 1167);   // strings

; _0x5a50: times 438 db 0 ; DATA
; times 2*478 db 0
; _0x6243: times XXXX db 0 ; DATA (level info?)
; _0x7393: times 0x960 db 0xFF
; _0x7753: times 0x3D9 db 0 ; DATA (messages)
; _0x7b2c: times 0x2DE db 0 ; DATA 
; _0x7e0a: times 0x697 db 0 ; DATA (strings PF1...SOLO etc)
; _0x8483: times 30 db 0  ; DATA 

; CODE

_0x84a1:  mov si,0xc03
_0x84a4:  add dl,dl
_0x84a6:  add cx,[si]
_0x84a8:  add dl,dl
_0x84aa:  add cx,[0xd200]
_0x84ae:  add cx,[si]
_0x84b0:  add dl,dl
_0x84b2:  add al,0x2
_0x84b4:  cmp dx,[0x7bd7]
_0x84b8:  jz _0x84f6
_0x84ba:  mov [0x7bd7],dx
_0x84be:  mov di,0x7b98
_0x84c1:  mov cx,0x3
_0x84c4:  xor ax,ax
_0x84c6:  xor bx,bx
_0x84c8:  shr dl,1
_0x84ca:  jnc _0x84cd
_0x84cc:  dec ax
_0x84cd:  shr dh,1
_0x84cf:  jnc _0x84d2
_0x84d1:  dec bx
_0x84d2:  mov [di],ax
_0x84d4:  mov [di+0xc],bx
_0x84d7:  and ax,0xaaaa
_0x84da:  and bx,0x5555
_0x84de:  or ax,bx
_0x84e0:  mov [di+0x2],ax
_0x84e3:  mov [di+0x6],ax
_0x84e6:  mov [di+0xa],ax
_0x84e9:  rol ax,1
_0x84eb:  mov [di+0x4],ax
_0x84ee:  mov [di+0x8],ax
_0x84f1:  add di,byte +0xe
_0x84f4:  loop _0x84c4
_0x84f6:  ret

; ─────────────────────────────────────────────────────────────────────

_0x84f7:  mov [0x81d0],ax
_0x84fa:  mov dl,[si]
_0x84fc:  inc si
_0x84fd:  or dl,dl
_0x84ff:  jz _0x8551
_0x8501:  cmp dl,0x1
_0x8504:  jnz _0x850e
_0x8506:  mov ax,[0x81d0]
_0x8509:  add bx,byte +0xc
_0x850c:  jmp short _0x84fa
_0x850e:  cmp dl,0x2
_0x8511:  jnz _0x8523
_0x8513:  push ax
_0x8514:  push bx
_0x8515:  mov dx,[si]
_0x8517:  add si,byte +0x2
_0x851a:  push si
_0x851b:  call _0x84b4
_0x851e:  pop si
_0x851f:  pop bx
_0x8520:  pop ax
_0x8521:  jmp short _0x84fa

; ─────────────────────────────────────────────────────────────────────

_0x8523:  cmp dl,0x3
_0x8526:  jnz _0x8534
_0x8528:  lodsw
_0x8529:  mov bl,ah
_0x852b:  xor ah,ah
_0x852d:  mov bh,ah
_0x852f:  mov [0x81d0],ax
_0x8532:  jmp short _0x84fa

; ─────────────────────────────────────────────────────────────────────

_0x8534:  cmp dl,0x4
_0x8537:  jnz _0x8543
_0x8539:  lodsw
_0x853a:  mov bx,ax
_0x853c:  lodsw
_0x853d:  xchg ax,bx
_0x853e:  mov [0x81d0],ax
_0x8541:  jmp short _0x84fa

; ─────────────────────────────────────────────────────────────────────

_0x8543:  push ax
_0x8544:  push bx
_0x8545:  push si
_0x8546:  call _0x8552
_0x8549:  pop si
_0x854a:  pop bx
_0x854b:  pop ax
_0x854c:  add ax,0x3
_0x854f:  jmp short _0x84fa
_0x8551:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8552:  mov si,0xfe20
_0x8555:  xor dh,dh
_0x8557:  shl dx,1
_0x8559:  shl dx,1
_0x855b:  shl dx,1
_0x855d:  mov cx,dx
_0x855f:  shl dx,1
_0x8561:  add dx,cx
_0x8563:  add si,dx
_0x8565:  cli
_0x8566:  mov [0x7bf8],sp
_0x856a:  xor dh,dh
_0x856c:  mov cx,ax
_0x856e:  shr cx,1
_0x8570:  jnc _0x8574
_0x8572:  dec dh
_0x8574:  mov bp,dx
_0x8576:  shl cx,1
_0x8578:  shl cx,1
_0x857a:  mov di,bx
_0x857c:  and di,0x3
_0x8580:  shr bx,1
_0x8582:  shr bx,1
_0x8584:  mov ax,[0x7bd1]
_0x8587:  mov sp,ax
_0x8589:  sub sp,byte +0x4
_0x858c:  mul bx
_0x858e:  mov dx,bp
_0x8590:  add di,ax
_0x8592:  add di,cx
_0x8594:  mov bp,0x7b98
_0x8597:  mov word [0x7bd5],0xf00
_0x859d:  or dh,dh
_0x859f:  jz _0x85a7
_0x85a1:  mov word [0x7bd5],0xf0
_0x85a7:  mov bx,[0x7bd3]
_0x85ab:  mov es,[bx]
_0x85ad:  mov [0x7bfc],di
_0x85b1:  mov [0x7bfa],bx
_0x85b5:  mov bx,[0x7bd5]
_0x85b9:  mov dl,0xfc
_0x85bb:  mov cx,0xc
_0x85be:  test byte [0x7bf7],0xff
_0x85c3:  jnz _0x85ff
_0x85c5:  lodsw
_0x85c6:  and ax,[bp+0x0]
_0x85c9:  shr dl,1
_0x85cb:  jnc _0x85d0
_0x85cd:  add bp,byte +0x2
_0x85d0:  ror dh,1
_0x85d2:  jnc _0x85e0
_0x85d4:  xchg ah,al
_0x85d6:  shr ax,1
_0x85d8:  shr ax,1
_0x85da:  shr ax,1
_0x85dc:  shr ax,1
_0x85de:  xchg ah,al
_0x85e0:  and [es:di],bl
_0x85e3:  and [es:di+0x4],bh
_0x85e7:  or [es:di],al
_0x85ea:  or [es:di+0x4],ah
_0x85ee:  inc di
_0x85ef:  test di,0x3
_0x85f3:  jz _0x85f9
_0x85f5:  loop _0x85c5
_0x85f7:  jmp short _0x8630

; ─────────────────────────────────────────────────────────────────────

_0x85f9:  add di,sp
_0x85fb:  loop _0x85c5
_0x85fd:  jmp short _0x8630

; ─────────────────────────────────────────────────────────────────────

_0x85ff:  lodsw
_0x8600:  and ax,[bp+0x0]
_0x8603:  shr dl,1
_0x8605:  jnc _0x860a
_0x8607:  add bp,byte +0x2
_0x860a:  ror dh,1
_0x860c:  jnc _0x861a
_0x860e:  xchg ah,al
_0x8610:  shr ax,1
_0x8612:  shr ax,1
_0x8614:  shr ax,1
_0x8616:  shr ax,1
_0x8618:  xchg ah,al
_0x861a:  xor [es:di],al
_0x861d:  xor [es:di+0x4],ah
_0x8621:  inc di
_0x8622:  test di,0x3
_0x8626:  jz _0x862c
_0x8628:  loop _0x85ff
_0x862a:  jmp short _0x8630

; ─────────────────────────────────────────────────────────────────────

_0x862c:  add di,sp
_0x862e:  loop _0x85ff
_0x8630:  mov di,[0x7bfc]
_0x8634:  mov bx,[0x7bfa]
_0x8638:  sub si,byte +0x18
_0x863b:  add bp,byte +0x2
_0x863e:  add bx,byte +0x2
_0x8641:  mov ax,[0x7bd3]
_0x8644:  add ax,0x6
_0x8647:  cmp ax,bx
_0x8649:  jz _0x864e
_0x864b:  jmp _0x85ab
_0x864e:  mov sp,[0x7bf8]
_0x8652:  sti
_0x8653:  mov ax,cs
_0x8655:  mov es,ax
_0x8657:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8658:  push si
_0x8659:  push di
_0x865a:  mov bx,0x279f
_0x865d:  add bx,0x5423
_0x8661:  call _0xad83
_0x8664:  mov cx,[0x7bf5]
_0x8668:  mov dx,[0x7bf3]
_0x866c:  mov si,cx
_0x866e:  mov di,dx
_0x8670:  mov al,ch
_0x8672:  mov ch,cl
_0x8674:  mov cl,dh
_0x8676:  mov dh,dl
_0x8678:  mov dl,al
_0x867a:  shr cx,1
_0x867c:  rcr dx,1
_0x867e:  sub dx,di
_0x8680:  sbb cx,si
_0x8682:  sub dx,di
_0x8684:  sbb cx,si
_0x8686:  sub dx,di
_0x8688:  sbb cx,si
_0x868a:  mov [0x7bf3],dx
_0x868e:  mov [0x7bf5],cx
_0x8692:  pop di
_0x8693:  pop si
_0x8694:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8695:  mov al,0xc
_0x8697:  out 0x30,al       ; CRT address
_0x8699:  xor al,al
_0x869b:  out 0x32,al       ; CRT data
_0x869d:  mov al,0xd
_0x869f:  out 0x30,al       ; CRT address
_0x86a1:  xor al,al
_0x86a3:  out 0x32,al       ; CRT data
_0x86a5:  mov al,0x5
_0x86a7:  out 0x10,al       ; video page

_0x86a9:  xor di,di
_0x86ab:  mov ax,di
_0x86ad:  mov es,[0x8932]
_0x86b1:  mov cx,0x2004
_0x86b4:  rep stosw

_0x86b6:  xor di,di
_0x86b8:  mov dx,0xf000    ; RED channel
_0x86bb:  mov es,dx
_0x86bd:  mov cx,0x4000
_0x86c0:  rep stosw

_0x86c2:  mov ax,cs
_0x86c4:  mov es,ax
_0x86c6:  ret

; ─────────────────────────────────────────────────────────────────────

_0x86c7:  shl bx,1
_0x86c9:  jmp [bx+0x7b90]

; ─────────────────────────────────────────────────────────────────────

_0x86cd:  mov word [0x7c05],0x0
_0x86d3:  mov ah,0x1
_0x86d5:  call _0x88d6
_0x86d8:  jz _0x86e2
_0x86da:  xor ah,ah
_0x86dc:  call _0x88d6
_0x86df:  mov [0x7c05],ax
_0x86e2:  ret

; ─────────────────────────────────────────────────────────────────────

_0x86e3:  mov ax,[0x7c05]
_0x86e6:  mov byte [0x7bfe],0x50
_0x86eb:  cmp ax,0x4b00
_0x86ee:  jz _0x8705
_0x86f0:  cmp ax,0x4700
_0x86f3:  jz _0x8705
_0x86f5:  cmp al,0xa
_0x86f7:  jz _0x8705
_0x86f9:  cmp al,0x34
_0x86fb:  jz _0x8705
_0x86fd:  cmp al,0x37
_0x86ff:  jz _0x8705
_0x8701:  cmp al,0x31
_0x8703:  jnz _0x870a
_0x8705:  mov byte [0x7bfe],0x19
_0x870a:  cmp ax,0x4d00
_0x870d:  jz _0x8725
_0x870f:  cmp ax,0x4900
_0x8712:  jz _0x8725
_0x8714:  cmp ax,0x5100
_0x8717:  jz _0x8725
_0x8719:  cmp al,0x36
_0x871b:  jz _0x8725
_0x871d:  cmp al,0x39
_0x871f:  jz _0x8725
_0x8721:  cmp al,0x33
_0x8723:  jnz _0x872a
_0x8725:  mov byte [0x7bfe],0x87
_0x872a:  mov byte [0x7bff],0x50
_0x872f:  cmp ax,0x4800
_0x8732:  jz _0x874a
_0x8734:  cmp ax,0x4700
_0x8737:  jz _0x874a
_0x8739:  cmp ax,0x4900
_0x873c:  jz _0x874a
_0x873e:  cmp al,0x37
_0x8740:  jz _0x874a
_0x8742:  cmp al,0x38
_0x8744:  jz _0x874a
_0x8746:  cmp al,0x39
_0x8748:  jnz _0x874f
_0x874a:  mov byte [0x7bff],0x19
_0x874f:  cmp ax,0x5000
_0x8752:  jz _0x8769
_0x8754:  cmp ax,0x5100
_0x8757:  jz _0x8769
_0x8759:  cmp al,0xa
_0x875b:  jz _0x8769
_0x875d:  cmp al,0x35
_0x875f:  jz _0x8769
_0x8761:  cmp al,0x31
_0x8763:  jz _0x8769
_0x8765:  cmp al,0x33
_0x8767:  jnz _0x876e
_0x8769:  mov byte [0x7bff],0x8c
_0x876e:  mov word [0x7c00],0x0
_0x8774:  cmp al,0x20
_0x8776:  jnz _0x877c
_0x8778:  inc byte [0x7c00]
_0x877c:  cmp al,0x41
_0x877e:  jc _0x8788
_0x8780:  cmp al,0x7a
_0x8782:  ja _0x8788
_0x8784:  inc byte [0x7c01]
_0x8788:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8789:  test byte [0x7c03],0xff
_0x878e:  jnz _0x87b6
_0x8790:  mov cl,0x1
_0x8792:  call _0x881f
_0x8795:  mov [0x7bfe],ah
_0x8799:  mov cl,0x2
_0x879b:  call _0x881f
_0x879e:  mov [0x7bff],ah
_0x87a2:  mov word [0x7c00],0x0
_0x87a8:  ror al,1
_0x87aa:  ror al,1
_0x87ac:  rcr byte [0x7c00],1
_0x87b0:  ror al,1
_0x87b2:  rcr byte [0x7c01],1
_0x87b6:  ret

; ─────────────────────────────────────────────────────────────────────

_0x87b7:  test byte [0x7c04],0xff
_0x87bc:  jnz _0x87e6
_0x87be:  mov cl,0x3
_0x87c0:  call _0x881f
_0x87c3:  mov [0x7bfe],ah
_0x87c7:  mov cl,0x4
_0x87c9:  call _0x881f
_0x87cc:  mov [0x7bff],ah
_0x87d0:  mov word [0x7c00],0x0
_0x87d6:  ror al,1
_0x87d8:  rcr byte [0x7c00],1
_0x87dc:  ror al,1
_0x87de:  ror al,1
_0x87e0:  ror al,1
_0x87e2:  rcr byte [0x7c01],1
_0x87e6:  ret

; ─────────────────────────────────────────────────────────────────────

_0x87e7:  pop bx
_0x87e8:  cmp bx,0x85f0
_0x87ec:  jz _0x8809
_0x87ee:  jmp bx

; ─────────────────────────────────────────────────────────────────────

_0x87f0:  mov cx,[bp+0xb]
_0x87f3:  dec byte [bp+0xd]
_0x87f6:  loopne 0x87f3
_0x87f8:  jcxz 0x87e7
_0x87fa:  push cx
_0x87fb:  mov dx,[bp+0x5]
_0x87fe:  mov cx,[bp+0x9]
_0x8801:  sub cx,[bp+0x7]
_0x8804:  shr cx,1
_0x8806:  mov si,[bp+0x7]
_0x8809:  lodsw
_0x880a:  add dx,ax
_0x880c:  rol dx,1
_0x880e:  loop _0x8809
_0x8810:  pop ax
_0x8811:  xor dx,[bp+0x3]
_0x8814:  jz _0x87e7
_0x8816:  mov word [0x8609],0xab
_0x881c:  jmp short _0x8806

; ─────────────────────────────────────────────────────────────────────

_0x881e:  ret

; ─────────────────────────────────────────────────────────────────────

_0x881f:  cli
_0x8820:  mov al,[0x7c02]
_0x8823:  out 0x1a,al      ; parallel port / joystick?
_0x8825:  mov ah,0x8
_0x8827:  shl ah,cl
_0x8829:  mov cx,0x800
_0x882c:  in al,0x1a       ; parallel port / joystick?
_0x882e:  and al,0x7f
_0x8830:  out 0x1a,al
_0x8832:  or al,0x80
_0x8834:  out 0x1a,al      ; parallel port / joystick?
_0x8836:  and al,0x7f
_0x8838:  out 0x1a,al      ; parallel port / joystick?
_0x883a:  shr al,1
_0x883c:  in al,0x18       ; joystick
_0x883e:  and al,ah
_0x8840:  loopne 0x883a
_0x8842:  in al,0x1a       ; parallel port  / joystick?
_0x8844:  mov [0x7c02],al
_0x8847:  in al,0x18       ; joystick
_0x8849:  sti
_0x884a:  mov ah,cl
_0x884c:  or ch,cl
_0x884e:  jnz _0x8852
_0x8850:  stc
_0x8851:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8852:  mov cl,ah
_0x8854:  xor ch,ch
_0x8856:  jcxz 0x8858
_0x8858:  neg ah
_0x885a:  clc
_0x885b:  ret

; ─────────────────────────────────────────────────────────────────────

_0x885c:  in al,0x1a       ; parallel port  / joystick?
_0x885e:  mov [0x7c02],al
_0x8861:  mov cl,0x1
_0x8863:  mov word [0x7c03],0x0
_0x8869:  call _0x881f
_0x886c:  jnc _0x8872
_0x886e:  inc byte [0x7c03]
_0x8872:  mov cl,0x3
_0x8874:  call _0x881f
_0x8877:  jnc _0x887d
_0x8879:  inc byte [0x7c04]
_0x887d:  ret
_0x887e:  in al,0x3a       ; keyboard command/status
_0x8880:  test al,0x2
_0x8882:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8883:  push ax
_0x8884:  push bx
_0x8885:  push es
_0x8886:  push ds
_0x8887:  call _0x887e
_0x888a:  jz _0x88ae
_0x888c:  mov bx,cs
_0x888e:  mov ds,bx
_0x8890:  test al,0x8
_0x8892:  les bx,[0x7beb]
_0x8896:  jz _0x889c
_0x8898:  les bx,[0x7bef]
_0x889c:  xor ax,ax
_0x889e:  in al,0x38         ; keyboard data
_0x88a0:  shl ax,1
_0x88a2:  add bx,ax
_0x88a4:  mov al,0x35
_0x88a6:  out 0x3a,al        ; keyboard command
_0x88a8:  mov ax,[es:bx]
_0x88ab:  call _0x88b3
_0x88ae:  pop ds
_0x88af:  pop es
_0x88b0:  pop bx
_0x88b1:  pop ax
_0x88b2:  iret

; ─────────────────────────────────────────────────────────────────────

_0x88b3:  xor bh,bh
_0x88b5:  mov bl,[0x7bd9]
_0x88b9:  mov [bx+0x7bdb],ax
_0x88bd:  add bl,0x2
_0x88c0:  and bl,0xf
_0x88c3:  mov bh,[0x7bda]
_0x88c7:  cmp bl,bh
_0x88c9:  jnz _0x88d1
_0x88cb:  sub bl,0x2
_0x88ce:  and bl,0xf
_0x88d1:  mov [0x7bd9],bx
_0x88d5:  ret

; ─────────────────────────────────────────────────────────────────────

_0x88d6:  push bx
_0x88d7:  dec ah
_0x88d9:  js _0x88df
_0x88db:  jz _0x8906
_0x88dd:  pop bx
_0x88de:  ret
_0x88df:  mov al,[0x7bda]
_0x88e2:  cmp al,[0x7bd9]
_0x88e6:  jz _0x88df
_0x88e8:  xor bh,bh
_0x88ea:  mov bl,al
_0x88ec:  mov ax,[bx+0x7bdb]
_0x88f0:  add bl,0x2
_0x88f3:  and bl,0xf
_0x88f6:  mov [0x7bda],bl
_0x88fa:  mov bx,0x8719
_0x88fd:  xchg bp,bx
_0x88ff:  push ax
_0x8900:  call _0x87f0
_0x8903:  pop ax
_0x8904:  pop bx
_0x8905:  ret

; ─────────────────────────────────────────────────────────────────────

_0x8906:  cli
_0x8907:  xor bh,bh
_0x8909:  mov al,[0x7bda]
_0x890c:  cmp al,[0x7bd9]
_0x8910:  mov bl,al
_0x8912:  mov ax,[bx+0x7bdb]
_0x8916:  sti
_0x8917:  pop bx
_0x8918:  ret

; ─────────────────────────────────────────────────────────────────────

; DATA

; times 0x7C3 db

; ─────────────────────────────────────────────────────────────────────

begin:

_0x90db:  cli
_0x90dc:  mov ax,cs
_0x90de:  mov ds,ax
_0x90e0:  mov es,ax
_0x90e2:  mov ss,ax
_0x90e4:  mov sp,0x8930
_0x90e7:  sti
_0x90e8:  call _0xadf7

_0x90eb:  call _0x96c8
_0x90ee:  jc _0x90eb

_0x90f0:  call _0x9dec
_0x90f3:  call _0x91f5
_0x90f6:  call _0xa799
_0x90f9:  call _0xa921
_0x90fc:  call _0xae2a
_0x90ff:  call _0xa81d
_0x9102:  call _0x9a9f
_0x9105:  mov sp,0x8930
_0x9108:  call _0x9dfa
_0x910b:  mov bx,0x8f1c
_0x910e:  cmp word [bx],byte +0x0
_0x9111:  jz _0x910b
_0x9113:  push bx
_0x9114:  call _[bx]
_0x9116:  pop bx
_0x9117:  add bx,byte +0x2
_0x911a:  jmp short _0x910e

; ─────────────────────────────────────────────────────────────────────

;  DATA ????

; ???????????????

; _0x911c:  xlatb
; _0x911d:  xchg ax,si
; _0x911e:  xchg ax,si
; _0x911f:  sahf
; _0x9120:  inc si
; _0x9121:  mov ax,[0x8f4a]
; _0x9124:  dec cx
; _0x9125:  mov al,[0x8fa1]
; _0x9128:  cli
; _0x9129:  wait cli
; _0x912b:  wait cmp ax,0xbc9f
; _0x912f:  lahf
; _0x9130:  xchg [bp+si-0x6a02],dx
; _0x9134:  repne nop
; _0x9136:  bound dx,[bp-0x69a3]
; _0x913a:  jpo 0x90ce
; _0x913c:  outsb
; _0x913d:  xchg ax,di
; _0x913e:  or ch,[di-0x5f1c]
; _0x9142:  rol byte [bx+si],1
; _0x9144:  test [bp+0xd0],ah
; _0x9148:  add [bx+si],al

; ─────────────────────────────────────────────────────────────────────

_0x914a:  mov si,0x894e
_0x914d:  call _0x9153
_0x9150:  mov si,0x8983
_0x9153:  test byte [si],0xff
_0x9156:  jns _0x9159
_0x9158:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9159:  mov di,[si+0x2f]
_0x915c:  mov dx,0x130
_0x915f:  mov bx,0x8930
_0x9162:  cmp byte [si+0x2e],0x0
_0x9166:  jnz _0x9190
_0x9168:  cmp byte [si],0x0
_0x916b:  jnz _0x9174
_0x916d:  cmp word [0x8df4],byte +0x0
_0x9172:  jnz _0x917f
_0x9174:  mov byte [si+0x31],0x3
_0x9178:  mov si,[0x8dd1]
_0x917c:  jmp _0xaea7
_0x917f:  cmp byte [si+0x31],0x1
_0x9183:  jnz _0x9186
_0x9185:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9186:  mov byte [si+0x31],0x1
_0x918a:  mov si,0xaf0
_0x918d:  jmp _0xaea7
_0x9190:  cmp byte [si+0x31],0x2
_0x9194:  jnz _0x9197
_0x9196:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9197:  mov byte [si+0x31],0x2
_0x919b:  mov si,0xa30
_0x919e:  jmp _0xaea7
_0x91a1:  cmp byte [0x894e],0x0
_0x91a6:  jnz _0x91a9
_0x91a8:  ret

; ─────────────────────────────────────────────────────────────────────

_0x91a9:  cmp byte [0x8983],0x0
_0x91ae:  jnz _0x91b1
_0x91b0:  ret

; ─────────────────────────────────────────────────────────────────────

_0x91b1:  inc byte [0x8dd3]
_0x91b5:  cmp byte [0x8dd3],0x5
_0x91ba:  jnc _0x91bd
_0x91bc:  ret

; ─────────────────────────────────────────────────────────────────────

_0x91bd:  mov dx,0x1
_0x91c0:  mov cx,0x3f
_0x91c3:  push dx
_0x91c4:  push cx
_0x91c5:  call _0x84b4
_0x91c8:  mov ax,[0x8dc1]
_0x91cb:  mov bx,[0x8dc3]
_0x91cf:  mov si,0x8ccb
_0x91d2:  call _0x84f7
_0x91d5:  mov cx,0x2ee
_0x91d8:  loop _0x91d8
_0x91da:  pop cx
_0x91db:  pop dx
_0x91dc:  add dx,0x101
_0x91e0:  and dx,0x707
_0x91e4:  loop _0x91c3
_0x91e6:  mov si,0x894e
_0x91e9:  call _0x9c0b
_0x91ec:  mov si,0x8983
_0x91ef:  call _0x9c0b
_0x91f2:  jmp _0x90f3

; ─────────────────────────────────────────────────────────────────────

_0x91f5:  mov word [0x8da8],0x7c6e
_0x91fb:  mov byte [0x8ddd],0x17
_0x9200:  mov word [0x8959],0xb50
_0x9206:  mov byte [0x8979],0x3
_0x920b:  mov byte [0x8dd9],0x0
_0x9210:  mov byte [0x8da6],0xff
_0x9215:  mov byte [0x8da7],0x0
_0x921a:  ret

; ─────────────────────────────────────────────────────────────────────

_0x921b:  mov word [0x7c00],0x0
_0x9221:  mov byte [0x7bfe],0x50
_0x9226:  mov byte [0x7bff],0x50
_0x922b:  mov bl,[0x8da6]
_0x922f:  cmp bl,0x4
_0x9232:  ja _0x923c
_0x9234:  dec byte [0x8da7]
_0x9238:  jz _0x923c
_0x923a:  jmp short _0x924b
_0x923c:  mov si,[0x8da8]
_0x9240:  mov bl,[si]
_0x9242:  mov [0x8da6],bl
_0x9246:  inc si
_0x9247:  mov [0x8da8],si
_0x924b:  xor bh,bh
_0x924d:  shl bx,1
_0x924f:  cmp bx,byte +0x8
_0x9252:  ja _0x9263
_0x9254:  test byte [0x8da7],0xff
_0x9259:  jnz _0x9263
_0x925b:  lodsb
_0x925c:  mov [0x8da7],al
_0x925f:  mov [0x8da8],si
_0x9263:  jmp [bx-0x7137]
_0x9267:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9268:  mov byte [0x7bfe],0x50
_0x926d:  mov byte [0x7bff],0x0
_0x9272:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9273:  mov byte [0x7bfe],0x96
_0x9278:  mov byte [0x7bff],0x50
_0x927d:  ret

; ─────────────────────────────────────────────────────────────────────

_0x927e:  mov byte [0x7bfe],0x50
_0x9283:  mov byte [0x7bff],0x96
_0x9288:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9289:  mov byte [0x7bfe],0x0
_0x928e:  mov byte [0x7bff],0x50
_0x9293:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9294:  push si
_0x9295:  mov dx,0x706
_0x9298:  call _0x84b4
_0x929b:  pop si
_0x929c:  mov ax,0x9
_0x929f:  mov bx,0x8
_0x92a2:  call _0x84f7
_0x92a5:  mov [0x8da8],si
_0x92a9:  ret

; ─────────────────────────────────────────────────────────────────────

_0x92aa:  mov ax,0x9
_0x92ad:  mov bx,0x8
_0x92b0:  mov si,0x8e89
_0x92b3:  jmp _0x84f7
_0x92b6:  mov byte [0x7c00],0x1
_0x92bb:  ret

; ─────────────────────────────────────────────────────────────────────

_0x92bc:  mov [0x8da8],si
_0x92c0:  add word [0x8da8],byte +0x4
_0x92c5:  mov di,si
_0x92c7:  call _0x937e
_0x92ca:  call _0x936b
_0x92cd:  xchg di,si
_0x92cf:  lodsw
_0x92d0:  mov [di],ax
_0x92d2:  shl al,1
_0x92d4:  shl ah,1
_0x92d6:  mov [di+0x4],ax
_0x92d9:  lodsw
_0x92da:  mov [di+0x8],al
_0x92dd:  mov [di+0x9],ah
_0x92e0:  xchg si,di
_0x92e2:  call _0x9455
_0x92e5:  cmp byte [0x8ddd],0x18
_0x92ea:  jz _0x92ed
_0x92ec:  ret

; ─────────────────────────────────────────────────────────────────────

_0x92ed:  mov byte [si+0xa],0xff
_0x92f1:  ret

; ─────────────────────────────────────────────────────────────────────

_0x92f2:  mov bx,0x8936
_0x92f5:  mov bp,0x60e9
_0x92f8:  mov al,[0x8e0a]
_0x92fb:  inc al
_0x92fd:  and al,0x3
_0x92ff:  mov [0x8e0a],al
_0x9302:  mov ah,0xc0
_0x9304:  mul ah
_0x9306:  mov si,0x3a4e
_0x9309:  add si,ax
_0x930b:  mov cx,[0x8df8]
_0x930f:  push si
_0x9310:  call _0x932f
_0x9313:  pop si
_0x9314:  add si,0x300
_0x9318:  mov [0x8dd1],si
_0x931c:  mov cx,0x1
_0x931f:  mov bp,0x8e06
_0x9322:  cmp byte [0x8ddd],0x1
_0x9327:  jnz _0x932f
_0x9329:  mov cx,0x15
_0x932c:  mov bp,0x6094
_0x932f:  mov dx,[0x8e04]
_0x9333:  push cx
_0x9334:  xor ah,ah
_0x9336:  mov al,[bp+0x0]
_0x9339:  inc bp
_0x933a:  mov di,ax
_0x933c:  shl di,1
_0x933e:  shl di,1
_0x9340:  shl di,1
_0x9342:  shl di,1
_0x9344:  mov al,[bp+0x0]
_0x9347:  inc bp
_0x9348:  or al,al
_0x934a:  js _0x9367
_0x934c:  mul byte [0x8e01]
_0x9350:  shl ax,1
_0x9352:  shl ax,1
_0x9354:  shl ax,1
_0x9356:  shl ax,1
_0x9358:  shl ax,1
_0x935a:  shl ax,1
_0x935c:  add di,ax
_0x935e:  mov ax,si
_0x9360:  push bp
_0x9361:  call _0xaea7
_0x9364:  pop bp
_0x9365:  mov si,ax
_0x9367:  pop cx
_0x9368:  loop _0x9333
_0x936a:  ret

; ─────────────────────────────────────────────────────────────────────

_0x936b:  push di
_0x936c:  mov di,si
_0x936e:  mov cx,0x11
_0x9371:  mov al,0x0
_0x9373:  rep stosb

_0x9375:  mov byte [si+0xf8],0xff
_0x937a:  dec byte [si]
_0x937c:  pop di
_0x937d:  ret

; ─────────────────────────────────────────────────────────────────────

_0x937e:  mov si,0x8a6f
_0x9381:  mov cx,0xa
_0x9384:  cmp byte [si],0xff
_0x9387:  jz _0x938f
_0x9389:  add si,byte +0x11
_0x938c:  loop _0x9384
_0x938e:  pop ax
_0x938f:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9390:  mov dx,0x406
_0x9393:  cmp si,0x894e
_0x9397:  jnz _0x939c
_0x9399:  mov dx,0x307
_0x939c:  mov bp,0x8c2b
_0x939f:  mov cx,0x8
_0x93a2:  test byte [bp+0x0],0xff
_0x93a6:  jz _0x93ae
_0x93a8:  add bp,byte +0xa
_0x93ab:  loop _0x93a2
_0x93ad:  ret

; ─────────────────────────────────────────────────────────────────────

_0x93ae:  mov [bp+0x5],dx
_0x93b1:  mov byte [bp+0x0],0x1f
_0x93b5:  mov dl,0xa
_0x93b7:  div dl
_0x93b9:  or ax,0x3030
_0x93bc:  mov [bp+0x7],ax
_0x93bf:  mov ax,[si+0x1b]
_0x93c2:  mov bl,ah
_0x93c4:  xor ah,ah
_0x93c6:  xor bh,bh
_0x93c8:  mov cl,0x3
_0x93ca:  shl ax,cl
_0x93cc:  inc cl
_0x93ce:  shl bx,cl
_0x93d0:  inc ax
_0x93d1:  add bx,byte +0x2
_0x93d4:  mov [bp+0x1],ax
_0x93d7:  mov [bp+0x3],bx
_0x93da:  ret

; ─────────────────────────────────────────────────────────────────────

_0x93db:  mov bx,[0x8dfa]
_0x93df:  shl bx,1
_0x93e1:  mov ax,[bx+0x60e9]
_0x93e5:  shr bx,1
_0x93e7:  inc bx
_0x93e8:  cmp bx,[0x8df8]
_0x93ec:  jc _0x93f0
_0x93ee:  xor bx,bx
_0x93f0:  mov [0x8dfa],bx
_0x93f4:  ret

; ─────────────────────────────────────────────────────────────────────

_0x93f5:  call _0x937e
_0x93f8:  call _0x936b
_0x93fb:  call _0x93db
_0x93fe:  mov [si],ax
_0x9400:  shl al,1
_0x9402:  shl ah,1
_0x9404:  mov [si+0x4],ax
_0x9407:  call _0x8658
_0x940a:  and ch,0x3
_0x940d:  mov [si+0x7],ch
_0x9410:  mov [si+0x9],ch
_0x9413:  mov ax,0x145
_0x9416:  cmp byte [0x8dde],0x0
_0x941b:  jnz _0x9420
_0x941d:  mov ax,0x258
_0x9420:  cmp byte [0x8dde],0xd
_0x9425:  jc _0x942a
_0x9427:  mov ax,0x14
_0x942a:  cmp [0x8dcf],ax
_0x942e:  ja _0x943a
_0x9430:  test dh,0x70
_0x9433:  jnz _0x944b
_0x9435:  and dh,0x7
_0x9438:  jnz _0x943e
_0x943a:  mov dh,0x9
_0x943c:  jmp short _0x9452

; ─────────────────────────────────────────────────────────────────────

_0x943e:  dec dh
_0x9440:  cmp dh,0x6
_0x9443:  jz _0x944b
_0x9445:  add dh,0x3
_0x9448:  jmp short _0x9452

; ─────────────────────────────────────────────────────────────────────

_0x944a:  nop
_0x944b:  and dh,0x1
_0x944e:  add dh,[0x8dff]
_0x9452:  mov [si+0x8],dh
_0x9455:  mov al,[si+0x8]
_0x9458:  mov ah,al
_0x945a:  mov bx,0x8d9c
_0x945d:  xlatb
_0x945e:  and cl,0x7
_0x9461:  rol al,cl
_0x9463:  cmp byte [0x8dde],0x6
_0x9468:  jc _0x946c
_0x946a:  mov al,0xff
_0x946c:  mov [si+0xa],al
_0x946f:  mov al,ah
_0x9471:  mov bx,0x3a44
_0x9474:  xlatb
_0x9475:  mov [si+0x6],al
_0x9478:  jmp _0xa1a7

; ─────────────────────────────────────────────────────────────────────

_0x947b:  mov si,0x8a4d
_0x947e:  mov di,0x8b3b
_0x9481:  mov cx,0x78
_0x9484:  rep movsw

_0x9486:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9487:  mov si,0x8a4d
_0x948a:  mov bp,0xe
_0x948d:  mov ah,[si+0x8]
_0x9490:  cmp ah,0x3
_0x9493:  jc _0x949f
_0x9495:  mov bl,[si+0xe]
_0x9498:  inc bl
_0x949a:  jz _0x949f
_0x949c:  mov [si+0xe],bl
_0x949f:  cmp byte [si],0xff
_0x94a2:  jnz _0x94a7
_0x94a4:  jmp _0x962e

; ─────────────────────────────────────────────────────────────────────

_0x94a7:  mov al,[0x8dd4]
_0x94aa:  and al,[si+0xa]
_0x94ad:  jnz _0x94b2
_0x94af:  jmp _0x962e

; ─────────────────────────────────────────────────────────────────────

_0x94b2:  cmp ah,0x3
_0x94b5:  jc _0x94c0
_0x94b7:  cmp byte [si+0xe],0x8
_0x94bb:  ja _0x94c0
_0x94bd:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x94c0:  mov byte [0x8dd6],0x0
_0x94c5:  mov ax,[si+0x2]
_0x94c8:  or ax,ax
_0x94ca:  jnz _0x952b
_0x94cc:  call _0x8658
_0x94cf:  cmp byte [si+0x8],0x3
_0x94d3:  jc _0x952b
_0x94d5:  test dh,0x10
_0x94d8:  jnz _0x952b
_0x94da:  inc byte [0x8dd6]
_0x94de:  mov bl,[si+0x23]
_0x94e1:  mov al,[0x8dcf]
_0x94e4:  test al,0x10
_0x94e6:  jz _0x9523
_0x94e8:  mov di,0x8983
_0x94eb:  test byte [0x8983],0xff
_0x94f0:  js _0x94f6
_0x94f2:  test al,0x20
_0x94f4:  jz _0x94f9
_0x94f6:  mov di,0x894e
_0x94f9:  mov ah,0x1
_0x94fb:  mov al,[di+0x1d]
_0x94fe:  sub al,[si+0x4]
_0x9501:  jns _0x9507
_0x9503:  neg al
_0x9505:  mov ah,0x3
_0x9507:  cmp al,0x2
_0x9509:  jnc _0x9517
_0x950b:  xor ah,ah
_0x950d:  mov al,[di+0x1e]
_0x9510:  sub al,[si+0x5]
_0x9513:  js _0x9517
_0x9515:  mov ah,0x2
_0x9517:  mov [si+0x9],ah
_0x951a:  push bx
_0x951b:  push si
_0x951c:  call _0x9638
_0x951f:  pop si
_0x9520:  pop bx
_0x9521:  jmp short _0x952b

; ─────────────────────────────────────────────────────────────────────

_0x9523:  shr dl,1
_0x9525:  and dl,0x3
_0x9528:  mov [si+0x9],dl
_0x952b:  cmp byte [si+0x8],0x3
_0x952f:  jc _0x953b
_0x9531:  mov al,[0x8dd5]
_0x9534:  or al,al
_0x9536:  jz _0x953b
_0x9538:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x953b:  mov al,[si+0x9]
_0x953e:  dec al
_0x9540:  js _0x9554
_0x9542:  dec al
_0x9544:  js _0x95a1
_0x9546:  dec al
_0x9548:  js _0x957b
_0x954a:  dec al
_0x954c:  jns _0x9551
_0x954e:  jmp _0x95db

; ─────────────────────────────────────────────────────────────────────

_0x9551:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x9554:  test byte [si+0x3],0xff
_0x9558:  jnz _0x9572
_0x955a:  test byte [si+0x1],0xff
_0x955e:  jnz _0x9563
_0x9560:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x9563:  mov al,[0x8e01]
_0x9566:  neg al
_0x9568:  call _0x9680
_0x956b:  mov byte [si+0x3],0x2
_0x956f:  dec byte [si+0x1]
_0x9572:  dec byte [si+0x5]
_0x9575:  dec byte [si+0x3]
_0x9578:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x957b:  test byte [si+0x3],0xff
_0x957f:  jnz _0x9591
_0x9581:  mov al,[si+0x1]
_0x9584:  inc ax
_0x9585:  cmp al,[0x8e00]
_0x9589:  jz _0x9603
_0x958b:  mov al,[0x8e01]
_0x958e:  call _0x9680
_0x9591:  inc byte [si+0x5]
_0x9594:  mov al,[si+0x3]
_0x9597:  xor al,0x1
_0x9599:  mov [si+0x3],al
_0x959c:  add [si+0x1],al
_0x959f:  jmp short _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x95a1:  test byte [si+0x2],0xff
_0x95a5:  jnz _0x95b5
_0x95a7:  mov al,[si]
_0x95a9:  inc ax
_0x95aa:  cmp al,[0x8e01]
_0x95ae:  jz _0x9603
_0x95b0:  mov al,0x1
_0x95b2:  call _0x9680
_0x95b5:  inc byte [si+0x4]
_0x95b8:  mov al,[si+0x2]
_0x95bb:  xor al,0x1
_0x95bd:  mov [si+0x2],al
_0x95c0:  add [si],al
_0x95c2:  mov ah,[si+0x6]
_0x95c5:  test ah,0x4
_0x95c8:  jz _0x9603
_0x95ca:  mov word [si+0xf],0x180
_0x95cf:  test ah,0x2
_0x95d2:  jz _0x9603
_0x95d4:  mov word [si+0xf],0x300
_0x95d9:  jmp short _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x95db:  test byte [si+0x2],0xff
_0x95df:  jnz _0x95f2
_0x95e1:  test byte [si+0x4],0xff
_0x95e5:  jz _0x9603
_0x95e7:  mov al,0xff
_0x95e9:  call _0x9680
_0x95ec:  dec byte [si]
_0x95ee:  mov byte [si+0x2],0x2
_0x95f2:  dec byte [si+0x4]
_0x95f5:  dec byte [si+0x2]
_0x95f8:  test byte [si+0x6],0x4
_0x95fc:  jz _0x9603
_0x95fe:  mov word [si+0xf],0x0
_0x9603:  cmp byte [si+0x8],0x1
_0x9607:  jz _0x9619
_0x9609:  cmp byte [si+0x8],0x2
_0x960d:  ja _0x9623
_0x960f:  test word [si+0x2],0xffff
_0x9614:  jz _0x9619
_0x9616:  jmp _0x953b

; ─────────────────────────────────────────────────────────────────────

_0x9619:  dec byte [si+0xe]
_0x961c:  jnz _0x9623
_0x961e:  call _0x936b
_0x9621:  jmp short _0x962e

; ─────────────────────────────────────────────────────────────────────

_0x9623:  inc byte [si+0x7]
_0x9626:  mov al,[si+0x6]
_0x9629:  and al,0x3
_0x962b:  and [si+0x7],al
_0x962e:  add si,byte +0x11
_0x9631:  dec bp
_0x9632:  jz _0x9637
_0x9634:  jmp _0x948d

; ─────────────────────────────────────────────────────────────────────

_0x9637:  ret
_0x9638:  cmp byte [si+0x8],0x9
_0x963c:  jz _0x963f
_0x963e:  ret

; ─────────────────────────────────────────────────────────────────────

_0x963f:  test word [si+0x2],0xffff
_0x9644:  jz _0x9647
_0x9646:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9647:  xchg di,si
_0x9649:  call _0x937e
_0x964c:  call _0x936b
_0x964f:  mov al,[di+0x9]
_0x9652:  mov [si+0x9],al
_0x9655:  mov byte [si+0x6],0x3
_0x9659:  mov ax,[di]
_0x965b:  mov [si],ax
_0x965d:  mov ax,[di+0x4]
_0x9660:  mov [si+0x4],ax
_0x9663:  mov byte [si+0xe],0x10
_0x9667:  mov byte [si+0x8],0x2
_0x966b:  mov ax,0x6
_0x966e:  call _0x2a2
_0x9671:  push si
_0x9672:  push bx
_0x9673:  push bp
_0x9674:  mov bx,0x8e42
_0x9677:  call _0xad83
_0x967a:  pop bp
_0x967b:  pop bx
_0x967c:  pop si
_0x967d:  jmp _0x9455

; ─────────────────────────────────────────────────────────────────────

_0x9680:  cbw
_0x9681:  mov di,ax
_0x9683:  add di,[si+0xb]
_0x9686:  mov al,[di]
_0x9688:  cmp al,0x78
_0x968a:  jz _0x96ad
_0x968c:  cmp byte [si+0xe],0xff
_0x9690:  jz _0x969a
_0x9692:  cmp al,0x40
_0x9694:  jz _0x969a
_0x9696:  cmp al,0x72
_0x9698:  jnz _0x969e
_0x969a:  mov [si+0xb],di
_0x969d:  ret

; ─────────────────────────────────────────────────────────────────────

_0x969e:  cmp al,0x50
_0x96a0:  jc _0x96ad
_0x96a2:  cmp al,0x53
_0x96a4:  ja _0x96ad
_0x96a6:  sub al,0x50
_0x96a8:  cmp al,[si+0x9]
_0x96ab:  jnz _0x969a
_0x96ad:  pop ax
_0x96ae:  test byte [0x8dd6],0xff
_0x96b3:  jz _0x96bf
_0x96b5:  dec byte [0x8dd6]
_0x96b9:  mov [si+0x9],bl
_0x96bc:  jmp _0x952b

; ─────────────────────────────────────────────────────────────────────

_0x96bf:  and ch,0x3
_0x96c2:  mov [si+0x9],ch
_0x96c5:  jmp _0x9603

; ─────────────────────────────────────────────────────────────────────

_0x96c8:  mov dl,0x2
_0x96ca:  mov cx,0x3
_0x96cd:  xor dl,0x3
_0x96d0:  push cx
_0x96d1:  push dx
_0x96d2:  call _0x96f0
_0x96d5:  pop dx
_0x96d6:  pop cx
_0x96d7:  jnc _0x96dd
_0x96d9:  loop _0x96d0
_0x96db:  jmp short _0x96ca

; ─────────────────────────────────────────────────────────────────────

_0x96dd:  mov bx,0x8a4d
_0x96e0:  mov dx,0x8
_0x96e3:  xor ax,ax
_0x96e5:  mov cx,0x1
_0x96e8:  call _0x8b6
_0x96eb:  or al,al
_0x96ed:  jz _0x96dd
_0x96ef:  ret

; ─────────────────────────────────────────────────────────────────────

_0x96f0:  xor al,al
_0x96f2:  out 0x1c,al         ; floppy
_0x96f4:  mov al,0x4
_0x96f6:  out 0x1e,al         ; PPI control
_0x96f8:  mov cx,0x1a04
_0x96fb:  loop _0x96fb
_0x96fd:  mov al,0x8
_0x96ff:  out 0x8,al          ; floppy
_0x9701:  aam
_0x9703:  aam
_0x9705:  aam
_0x9707:  in al,0x8           ; floppy
_0x9709:  test al,0x1
_0x970b:  jnz _0x9707
_0x970d:  test al,0x80
_0x970f:  jz _0x971b
_0x9711:  mov al,0x8
_0x9713:  out 0x8,al         ; floppy
_0x9715:  aam
_0x9717:  aam
_0x9719:  jmp short _0x9707

; ─────────────────────────────────────────────────────────────────────

_0x971b:  cli
_0x971c:  cld
_0x971d:  mov cx,0x1b51
_0x9720:  loop _0x9720
_0x9722:  mov al,dl
_0x9724:  out 0xe,al          ; floppy
_0x9726:  mov al,0x18
_0x9728:  out 0x8,al          ; floppy
_0x972a:  aam
_0x972c:  aam
_0x972e:  aam
_0x9730:  aam
_0x9732:  aam
_0x9734:  in al,0x8           ; floppy
_0x9736:  test al,0x1
_0x9738:  jnz _0x9734
_0x973a:  test al,0x80
_0x973c:  jz _0x9740
_0x973e:  jmp short _0x971d

; ─────────────────────────────────────────────────────────────────────

_0x9740:  mov cx,0x1b51
_0x9743:  loop _0x9743
_0x9745:  mov dx,0x8
_0x9748:  mov di,0x8a4d
_0x974b:  mov bh,0xfc
_0x974d:  mov bl,0x2
_0x974f:  mov cx,0x200
_0x9752:  mov al,0xe4
_0x9754:  out dx,al         ; floppy
_0x9755:  aam
_0x9757:  aam
_0x9759:  in al,dx          ; floppy
_0x975a:  test al,0x1
_0x975c:  jz _0x9759
_0x975e:  test bh,al
_0x9760:  jnz _0x979c
_0x9762:  in al,dx          ; floppy
_0x9763:  test bl,al
_0x9765:  jz _0x976e
_0x9767:  in al,0xe          ; floppy
_0x9769:  stosb
_0x976a:  loop _0x9762
_0x976c:  jmp short _0x979c

; ─────────────────────────────────────────────────────────────────────

_0x976e:  in al,dx          ; floppy
_0x976f:  test bl,al
_0x9771:  jz _0x977a
_0x9773:  in al,0xe          ; floppy
_0x9775:  stosb
_0x9776:  loop _0x9762
_0x9778:  jmp short _0x979c

; ─────────────────────────────────────────────────────────────────────

_0x977a:  in al,dx          ; floppy
_0x977b:  test bl,al
_0x977d:  jz _0x9786
_0x977f:  in al,0xe          ; floppy
_0x9781:  stosb
_0x9782:  loop _0x9762
_0x9784:  jmp short _0x979c

; ─────────────────────────────────────────────────────────────────────

_0x9786:  in al,dx          ; floppy
_0x9787:  test bl,al
_0x9789:  jz _0x9792
_0x978b:  in al,0xe          ; floppy
_0x978d:  stosb
_0x978e:  loop _0x9762
_0x9790:  jmp short _0x979c

; ─────────────────────────────────────────────────────────────────────

_0x9792:  in al,dx          ; floppy
_0x9793:  test bl,al
_0x9795:  jz _0x975e
_0x9797:  in al,0xe          ; floppy
_0x9799:  stosb
_0x979a:  loop _0x9762
_0x979c:  in al,dx          ; floppy
_0x979d:  sti
_0x979e:  and al,0xf8
_0x97a0:  jz _0x97a4
_0x97a2:  stc
_0x97a3:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97a4:  mov si,0x95e3
_0x97a7:  call _0x97c6
_0x97aa:  jnc _0x97ad
_0x97ac:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97ad:  mov si,0x95ea
_0x97b0:  call _0x97c6
_0x97b3:  jnc _0x97b6
_0x97b5:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97b6:  mov si,0x95f3
_0x97b9:  call _0x97c6
_0x97bc:  jnc _0x97bf
_0x97be:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97bf:  mov si,0x95f9
_0x97c2:  call _0x97c6
_0x97c5:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97c6:  mov bx,0x8a4d
_0x97c9:  mov di,bx
_0x97cb:  mov cx,[si]
_0x97cd:  push si
_0x97ce:  add si,byte +0x2
_0x97d1:  repe cmpsb
_0x97d3:  pop si
_0x97d4:  jz _0x97df
_0x97d6:  inc bx
_0x97d7:  cmp bx,0x8e4d
_0x97db:  jz _0x97e1
_0x97dd:  jmp short _0x97c9

; ─────────────────────────────────────────────────────────────────────

_0x97df:  clc
_0x97e0:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97e1:  stc
_0x97e2:  ret

; ─────────────────────────────────────────────────────────────────────

_0x97e3:  add ax,0x8700
_0x97e6:  add [bp+di+0x0],al
_0x97e9:  or ax,0x7
_0x97ec:  push bp
_0x97ed:  not word [di-0xa]
_0x97f0:  push bp
_0x97f1:  cmc
_0x97f2:  push bp
_0x97f3:  add al,0x0
_0x97f5:  sub ax,0xffee
_0x97f8:  dec si
_0x97f9:  add ax,[bx+si]
_0x97fb:  mov sp,0xff57
_0x97fe:  inc byte [0x7bf7]
_0x9802:  mov ax,[0x8e04]
_0x9805:  add ax,0x10
_0x9808:  mov [0x7bd1],ax
_0x980b:  mov word [0x7bd3],0x8936
_0x9811:  mov si,0x8c2b
_0x9814:  mov word [0x8dd7],0x8
_0x981a:  test byte [si],0xff
_0x981d:  jz _0x9843
_0x981f:  dec byte [si]
_0x9821:  jz _0x982d
_0x9823:  cmp byte [si],0x5
_0x9826:  jc _0x982d
_0x9828:  cmp byte [si],0x1e
_0x982b:  jnz _0x9843
_0x982d:  mov dx,[si+0x5]
_0x9830:  push si
_0x9831:  call _0x84b4
_0x9834:  pop si
_0x9835:  push si
_0x9836:  mov ax,[si+0x1]
_0x9839:  mov bx,[si+0x3]
_0x983c:  lea si,[si+0x7]
_0x983f:  call _0x84f7
_0x9842:  pop si
_0x9843:  add si,byte +0xa
_0x9846:  dec word [0x8dd7]
_0x984a:  jnz _0x981a
_0x984c:  mov word [0x7bd1],0x140
_0x9852:  mov word [0x7bd3],0x8930
_0x9858:  dec byte [0x7bf7]
_0x985c:  ret

; ─────────────────────────────────────────────────────────────────────

_0x985d:  mov bx,0x8b3b
_0x9860:  jmp short _0x9865

; ─────────────────────────────────────────────────────────────────────

_0x9862:  mov bx,0x8a4d
_0x9865:  mov word [0x8dd7],0xe
_0x986b:  cmp byte [bx],0xff
_0x986e:  jz _0x98cd
_0x9870:  mov al,[0x8dd4]
_0x9873:  and al,[bx+0xa]
_0x9876:  jz _0x98cd
_0x9878:  xor dh,dh
_0x987a:  mov dl,[bx+0x4]
_0x987d:  mov di,dx
_0x987f:  shl di,1
_0x9881:  shl di,1
_0x9883:  shl di,1
_0x9885:  mov al,[bx+0x5]
_0x9888:  mul byte [0x8e01]
_0x988c:  shl ax,1
_0x988e:  shl ax,1
_0x9890:  shl ax,1
_0x9892:  shl ax,1
_0x9894:  shl ax,1
_0x9896:  add di,ax
_0x9898:  mov dl,[bx+0x8]
_0x989b:  mov si,dx
_0x989d:  shl si,1
_0x989f:  mov si,[si+0x3a30]
_0x98a3:  mov dl,[bx+0x7]
_0x98a6:  shl dx,1
_0x98a8:  shl dx,1
_0x98aa:  shl dx,1
_0x98ac:  shl dx,1
_0x98ae:  shl dx,1
_0x98b0:  shl dx,1
_0x98b2:  mov ax,dx
_0x98b4:  shl dx,1
_0x98b6:  add si,ax
_0x98b8:  add si,dx
_0x98ba:  add si,[bx+0xf]
_0x98bd:  push bx
_0x98be:  cmp byte [bx+0x8],0x9
_0x98c2:  mov bx,0x12
_0x98c5:  jz _0x98c9
_0x98c7:  xor bx,bx
_0x98c9:  call _0x9e3a
_0x98cc:  pop bx
_0x98cd:  add bx,byte +0x11
_0x98d0:  dec word [0x8dd7]
_0x98d4:  jnz _0x986b
_0x98d6:  ret

; ─────────────────────────────────────────────────────────────────────

_0x98d7:  call _0x86cd
_0x98da:  mov ax,[0x7c05]
_0x98dd:  cmp al,0x53
_0x98df:  jz _0x98e5
_0x98e1:  cmp al,0x73
_0x98e3:  jnz _0x98ea
_0x98e5:  xor byte [0x8db8],0x1
_0x98ea:  cmp al,0x11
_0x98ec:  jnz _0x98f1
_0x98ee:  jmp _0x90f3

; ─────────────────────────────────────────────────────────────────────

_0x98f1:  cmp byte [0x8ddd],0x16
_0x98f6:  jna 0x993a
_0x98f8:  sub ah,0x3b
_0x98fb:  jns _0x98fe
_0x98fd:  ret

; ─────────────────────────────────────────────────────────────────────

_0x98fe:  cmp ah,[0x8dda]
_0x9902:  jc _0x9905
_0x9904:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9905:  mov byte [0x8979],0x1
_0x990a:  mov word [0x8959],0x0
_0x9910:  mov byte [0x89ae],0x0
_0x9915:  mov byte [0x8dd9],0x0
_0x991a:  mov byte [0x8ddd],0x1
_0x991f:  or ah,ah
_0x9921:  jnz _0x9927
_0x9923:  dec byte [0x8979]
_0x9927:  cmp ah,0x2
_0x992a:  jna 0x9931
_0x992c:  mov byte [0x89ae],0x2
_0x9931:  jc _0x9937
_0x9933:  inc byte [0x8dd9]
_0x9937:  jmp _0x90f6

; ─────────────────────────────────────────────────────────────────────

_0x993a:  cmp al,0x70
_0x993c:  jz _0x9943
_0x993e:  cmp al,0x50
_0x9940:  jz _0x9943
_0x9942:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9943:  mov dx,0x703
_0x9946:  call _0x84b4
_0x9949:  mov ax,[0x8dc1]
_0x994c:  mov bx,[0x8dc3]
_0x9950:  mov si,0x8c85
_0x9953:  call _0x84f7
_0x9956:  call _0x86cd
_0x9959:  cmp byte [0x7c05],0x20
_0x995e:  jnz _0x9956
_0x9960:  mov ax,[0x8dc1]
_0x9963:  mov bx,[0x8dc3]
_0x9967:  mov si,0x8c99
_0x996a:  call _0x84f7
_0x996d:  ret

; ─────────────────────────────────────────────────────────────────────

_0x996e:  test byte [0x8dd5],0xff
_0x9973:  jz _0x9979
_0x9975:  dec byte [0x8dd5]
_0x9979:  rol byte [0x8dd4],1
_0x997d:  inc word [0x8dcf]
_0x9981:  jnz _0x9989
_0x9983:  sub word [0x8dcf],0x100
_0x9989:  cmp byte [0x8ddd],0x16
_0x998e:  ja _0x99cf
_0x9990:  mov al,0xf
_0x9992:  cmp word [0x8dcf],0x145
_0x9998:  ja _0x99a6
_0x999a:  mov al,0x7
_0x999c:  cmp word [0x8dcf],0x96
_0x99a2:  jc _0x99a6
_0x99a4:  mov al,0x3
_0x99a6:  test [0x8dcf],al
_0x99aa:  jnz _0x99af
_0x99ac:  call _0x93f5
_0x99af:  mov ax,0x145
_0x99b2:  cmp byte [0x8dde],0x0
_0x99b7:  ja _0x99bc
_0x99b9:  mov ax,0x258
_0x99bc:  cmp [0x8dcf],ax
_0x99c0:  jnz _0x99cf
_0x99c2:  mov ax,[0x8dc1]
_0x99c5:  mov bx,[0x8dc3]
_0x99c9:  mov si,0x8cdf
_0x99cc:  call _0x84f7
_0x99cf:  ret

; ─────────────────────────────────────────────────────────────────────

_0x99d0:  mov di,bx
_0x99d2:  and di,0xfff8
_0x99d6:  shr di,1
_0x99d8:  mov cl,al
_0x99da:  and cl,0x3
_0x99dd:  xor ch,ch
_0x99df:  add di,cx
_0x99e1:  and al,0xfc
_0x99e3:  mov ah,0x50
_0x99e5:  mul ah
_0x99e7:  add di,ax
_0x99e9:  mov es,[0x8932]
_0x99ed:  mov ds,[0x8934]
_0x99f1:  ret

; ─────────────────────────────────────────────────────────────────────

_0x99f2:  call _0x99d0
_0x99f5:  mov cx,bx
_0x99f7:  and cx,0x7
_0x99fb:  jz _0x9a09
_0x99fd:  mov al,0xff
_0x99ff:  shr al,cl
_0x9a01:  and al,0xcc
_0x9a03:  mov [di],al
_0x9a05:  stosb
_0x9a06:  add di,byte +0x3
_0x9a09:  mov cx,dx
_0x9a0b:  add bx,byte +0x7
_0x9a0e:  and bx,0xfff8
_0x9a12:  sub cx,bx
_0x9a14:  inc cx
_0x9a15:  shr cx,1
_0x9a17:  shr cx,1
_0x9a19:  shr cx,1
_0x9a1b:  mov al,0xcc
_0x9a1d:  mov [di],al
_0x9a1f:  stosb
_0x9a20:  add di,byte +0x3
_0x9a23:  loop _0x9a1d
_0x9a25:  mov cx,dx
_0x9a27:  and cx,0x7
_0x9a2b:  jz _0x9a39
_0x9a2d:  inc cx
_0x9a2e:  mov al,0xff
_0x9a30:  shr al,cl
_0x9a32:  not al
_0x9a34:  and al,0xcc
_0x9a36:  mov [di],al
_0x9a38:  stosb
_0x9a39:  mov ax,cs
_0x9a3b:  mov ds,ax
_0x9a3d:  mov es,ax
_0x9a3f:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9a40:  push ax
_0x9a41:  call _0x99d0
_0x9a44:  mov ax,0x33cc
_0x9a47:  mov ch,0xc0
_0x9a49:  mov cl,bl
_0x9a4b:  and cl,0x7
_0x9a4e:  ror ch,cl
_0x9a50:  and al,ch
_0x9a52:  and ah,ch
_0x9a54:  pop bx
_0x9a55:  sub dl,bl
_0x9a57:  xor dh,dh
_0x9a59:  inc dx
_0x9a5a:  mov cx,dx
_0x9a5c:  or [di],al
_0x9a5e:  or [es:di],al
_0x9a61:  inc di
_0x9a62:  xchg ah,al
_0x9a64:  test di,0x3
_0x9a68:  jz _0x9a6e
_0x9a6a:  loop _0x9a5c
_0x9a6c:  jmp short _0x9a74

; ─────────────────────────────────────────────────────────────────────

_0x9a6e:  add di,0x13c
_0x9a72:  loop _0x9a5c
_0x9a74:  mov ax,cs
_0x9a76:  mov ds,ax
_0x9a78:  mov es,ax
_0x9a7a:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9a7b:  test bx,0x3
_0x9a7f:  jz _0x9a88
_0x9a81:  add bx,byte +0x4
_0x9a84:  and bx,0xfffc
_0x9a88:  mov cx,bx
_0x9a8a:  add bx,byte +0x2
_0x9a8d:  push ax
_0x9a8e:  and al,0xfe
_0x9a90:  mov dx,ax
_0x9a92:  shl dx,1
_0x9a94:  mov al,0x50
_0x9a96:  mul cl
_0x9a98:  add dx,ax
_0x9a9a:  add dx,byte +0x18
_0x9a9d:  pop ax
_0x9a9e:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9a9f:  mov si,[0x8dfc]
_0x9aa3:  mov ax,[0x8e04]
_0x9aa6:  add ax,0x10
_0x9aa9:  mov [0x7bd1],ax
_0x9aac:  mov word [0x7bd3],0x8936
_0x9ab2:  call _0x84f7
_0x9ab5:  mov word [0x7bd1],0x140
_0x9abb:  mov word [0x7bd3],0x8930
_0x9ac1:  push si
_0x9ac2:  call _0x8695
_0x9ac5:  mov si,[0x8dc5]
_0x9ac9:  cmp byte [si],0xff
_0x9acc:  jz _0x9ada
_0x9ace:  lodsw
_0x9acf:  mov bx,ax
_0x9ad1:  lodsw
_0x9ad2:  mov dx,ax
_0x9ad4:  lodsb
_0x9ad5:  call _0x99f2
_0x9ad8:  jmp short _0x9ac9

; ─────────────────────────────────────────────────────────────────────

_0x9ada:  inc si
_0x9adb:  cmp byte [si],0xff
_0x9ade:  jz _0x9af0
_0x9ae0:  lodsb
_0x9ae1:  mov cl,al
_0x9ae3:  lodsb
_0x9ae4:  mov dl,al
_0x9ae6:  lodsw
_0x9ae7:  mov bx,ax
_0x9ae9:  mov al,cl
_0x9aeb:  call _0x9a40
_0x9aee:  jmp short _0x9adb

; ─────────────────────────────────────────────────────────────────────

_0x9af0:  mov dx,0x306
_0x9af3:  call _0x84b4
_0x9af6:  mov ax,[0x8db9]
_0x9af9:  mov bl,ah
_0x9afb:  or ah,al
_0x9afd:  jz _0x9b23
_0x9aff:  xor ah,ah
_0x9b01:  xor bh,bh
_0x9b03:  mov si,0x8c7b
_0x9b06:  call _0x84f7
_0x9b09:  mov si,0x8cb5
_0x9b0c:  cmp byte [0x8974],0xff
_0x9b11:  jz _0x9b16
_0x9b13:  mov si,0x8cc4
_0x9b16:  call _0x84f7
_0x9b19:  call _0x9a7b
_0x9b1c:  mov [0x897d],dx
_0x9b20:  call _0x84f7
_0x9b23:  mov dx,0x406
_0x9b26:  call _0x84b4
_0x9b29:  mov ax,[0x8dbb]
_0x9b2c:  mov bl,ah
_0x9b2e:  or ah,al
_0x9b30:  jz _0x9b56
_0x9b32:  xor ah,ah
_0x9b34:  xor bh,bh
_0x9b36:  mov si,0x8c7b
_0x9b39:  call _0x84f7
_0x9b3c:  mov si,0x8cb5
_0x9b3f:  cmp byte [0x89a9],0xff
_0x9b44:  jz _0x9b49
_0x9b46:  mov si,0x8cc4
_0x9b49:  call _0x84f7
_0x9b4c:  call _0x9a7b
_0x9b4f:  mov [0x89b2],dx
_0x9b53:  call _0x84f7
_0x9b56:  dec byte [0x8957]
_0x9b5a:  dec word [0x8951]
_0x9b5e:  dec byte [0x898c]
_0x9b62:  dec word [0x8986]
_0x9b66:  inc byte [0x8976]
_0x9b6a:  test byte [0x8dd9],0xff
_0x9b6f:  jz _0x9b75
_0x9b71:  inc byte [0x89ab]
_0x9b75:  call _0xaf0a
_0x9b78:  mov dx,0x603
_0x9b7b:  call _0x84b4
_0x9b7e:  mov ax,[0x8dbd]
_0x9b81:  mov bl,ah
_0x9b83:  xor ah,ah
_0x9b85:  xor bh,bh
_0x9b87:  pop si
_0x9b88:  call _0x84f7
_0x9b8b:  cmp byte [0x8ddd],0x16
_0x9b90:  ja _0x9bc4
_0x9b92:  add ax,0x2
_0x9b95:  push bx
_0x9b96:  mov bl,[0x8ddd]
_0x9b9a:  xor bh,bh
_0x9b9c:  mov dl,[bx+0x6079]
_0x9ba0:  shr dl,1
_0x9ba2:  shr dl,1
_0x9ba4:  inc dl
_0x9ba6:  or dl,0x30
_0x9ba9:  mov [0x8cae],dl
_0x9bad:  mov dl,[bx+0x6079]
_0x9bb1:  and dl,0x3
_0x9bb4:  inc dl
_0x9bb6:  or dl,0x40
_0x9bb9:  mov [0x8caf],dl
_0x9bbd:  pop bx
_0x9bbe:  mov si,0x8cad
_0x9bc1:  call _0x84f7
_0x9bc4:  call _0x9bf6
_0x9bc7:  cmp byte [0x8ddd],0x16
_0x9bcc:  ja _0x9bcf
_0x9bce:  ret
_0x9bcf:  mov ax,0x66
_0x9bd2:  mov bx,0x56
_0x9bd5:  mov cl,[0x8dda]
_0x9bd9:  xor ch,ch
_0x9bdb:  cmp cl,0x4
_0x9bde:  jz _0x9beb
_0x9be0:  mov bx,0x5c
_0x9be3:  cmp cl,0x3
_0x9be6:  jz _0x9beb
_0x9be8:  mov bx,0x68
_0x9beb:  mov si,0x7c07
_0x9bee:  push cx
_0x9bef:  call _0x84f7
_0x9bf2:  pop cx
_0x9bf3:  loop _0x9bee
_0x9bf5:  ret
_0x9bf6:  mov ax,[0x8dbf]
_0x9bf9:  mov bl,ah
_0x9bfb:  xor ah,ah
_0x9bfd:  xor bh,bh
_0x9bff:  mov si,0x89b8
_0x9c02:  call _0x84f7
_0x9c05:  add bx,byte +0x4
_0x9c08:  jmp _0x84f7

; ─────────────────────────────────────────────────────────────────────

_0x9c0b:  test byte [si],0xff
_0x9c0e:  jns _0x9c11
_0x9c10:  ret
_0x9c11:  mov ax,[si+0x3]
_0x9c14:  mov bx,0x8a43
_0x9c17:  mov dx,[0x8dbf]
_0x9c1b:  add dx,0x1000
_0x9c1f:  mov di,0x89d3
_0x9c22:  mov cx,0x5
_0x9c25:  cmp ax,[bx]
_0x9c27:  ja _0x9c35
_0x9c29:  add bx,byte +0x2
_0x9c2c:  add di,byte +0x17
_0x9c2f:  add dh,0xc
_0x9c32:  loop _0x9c25
_0x9c34:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9c35:  mov [0x8dc7],dx
_0x9c39:  push si
_0x9c3a:  push di
_0x9c3b:  dec cx
_0x9c3c:  mov bp,0x8a4b
_0x9c3f:  jz _0x9c63
_0x9c41:  mov di,0x8a2f
_0x9c44:  mov si,0x8a18
_0x9c47:  push cx
_0x9c48:  push si
_0x9c49:  push di
_0x9c4a:  mov cx,0x13
_0x9c4d:  rep movsb

_0x9c4f:  pop di
_0x9c50:  pop si
_0x9c51:  pop cx
_0x9c52:  sub di,byte +0x17
_0x9c55:  sub si,byte +0x17
_0x9c58:  mov dx,[bp-0x2]
_0x9c5b:  mov [bp+0x0],dx
_0x9c5e:  sub bp,byte +0x2
_0x9c61:  loop _0x9c47
_0x9c63:  mov [bp+0x0],ax
_0x9c66:  pop di
_0x9c67:  pop si
_0x9c68:  push di
_0x9c69:  mov cx,0x13
_0x9c6c:  mov al,0x20
_0x9c6e:  rep stosb

_0x9c70:  pop di
_0x9c71:  dec di
_0x9c72:  mov cx,0x5
_0x9c75:  push si
_0x9c76:  lea si,[si+0x4]
_0x9c79:  inc di
_0x9c7a:  inc si
_0x9c7b:  cmp byte [si],0x30
_0x9c7e:  loope 0x9c79
_0x9c80:  inc cx
_0x9c81:  rep movsb

_0x9c83:  inc di
_0x9c84:  mov [0x8dc9],di
_0x9c88:  mov word [0x8dcb],0x0
_0x9c8e:  call _0x9bf6
_0x9c91:  pop si
_0x9c92:  mov dx,0x604
_0x9c95:  cmp si,0x894e
_0x9c99:  mov si,0x8cf6
_0x9c9c:  jz _0x9ca1
_0x9c9e:  mov si,0x8d0a
_0x9ca1:  sub dx,0x101
_0x9ca5:  and dx,0x707
_0x9ca9:  push dx
_0x9caa:  push si
_0x9cab:  call _0x84b4
_0x9cae:  mov ax,[0x8dc1]
_0x9cb1:  mov bx,[0x8dc3]
_0x9cb5:  call _0x84f7
_0x9cb8:  call _0x86cd
_0x9cbb:  mov ax,[0x7c05]
_0x9cbe:  or ah,ah
_0x9cc0:  jz _0x9cea
_0x9cc2:  cmp al,0x20
_0x9cc4:  jc _0x9cea
_0x9cc6:  cmp al,0x7a
_0x9cc8:  ja _0x9cea
_0x9cca:  cmp al,0x61
_0x9ccc:  jc _0x9cd0
_0x9cce:  and al,0xdf
_0x9cd0:  cmp al,0x5a
_0x9cd2:  ja _0x9cea
_0x9cd4:  mov bx,[0x8dcb]
_0x9cd8:  mov di,[0x8dc9]
_0x9cdc:  mov [bx+di],al
_0x9cde:  inc bx
_0x9cdf:  cmp bx,byte +0xd
_0x9ce2:  jz _0x9d1d
_0x9ce4:  mov [0x8dcb],bx
_0x9ce8:  jmp short _0x9d1d

; ─────────────────────────────────────────────────────────────────────

_0x9cea:  cmp al,0x8
_0x9cec:  jnz _0x9d09
_0x9cee:  dec word [0x8dcb]
_0x9cf2:  jns _0x9cf8
_0x9cf4:  inc word [0x8dcb]
_0x9cf8:  mov bx,[0x8dcb]
_0x9cfc:  mov di,[0x8dc9]
_0x9d00:  mov byte [bx+di],0x20
_0x9d03:  mov byte [di+0xc],0x20
_0x9d07:  jmp short _0x9d1d

; ─────────────────────────────────────────────────────────────────────

_0x9d09:  cmp al,0xd
_0x9d0b:  jnz _0x9d13
_0x9d0d:  add sp,byte +0x4
_0x9d10:  jmp short _0x9d41

; ─────────────────────────────────────────────────────────────────────

_0x9d12:  nop
_0x9d13:  cmp ax,0x5300
_0x9d16:  jz _0x9cee
_0x9d18:  cmp ax,0x4b00
_0x9d1b:  jz _0x9cee
_0x9d1d:  mov ax,[0x8dc7]
_0x9d20:  mov bl,ah
_0x9d22:  xor ah,ah
_0x9d24:  xor bh,bh
_0x9d26:  mov si,[0x8dc9]
_0x9d2a:  sub si,byte +0x6
_0x9d2d:  push word [si+0x13]
_0x9d30:  mov byte [si+0x13],0x0
_0x9d34:  push si
_0x9d35:  call _0x84f7
_0x9d38:  pop si
_0x9d39:  pop word [si+0x13]
_0x9d3c:  pop si
_0x9d3d:  pop dx
_0x9d3e:  jmp _0x9ca1

; ─────────────────────────────────────────────────────────────────────

_0x9d41:  xor ax,ax
_0x9d43:  mov cx,0x1
_0x9d46:  mov dx,0x7
_0x9d49:  mov bx,0x89d0
_0x9d4c:  jmp _0x99f

; ─────────────────────────────────────────────────────────────────────

_0x9d4f:  mov al,[0x8ddb]
_0x9d52:  mov ah,0x14
_0x9d54:  mul ah
_0x9d56:  mov si,ax
_0x9d58:  add si,0x612a
_0x9d5c:  lodsb
_0x9d5d:  xor ah,ah
_0x9d5f:  mov [0x8db2],ax
_0x9d62:  lodsb
_0x9d63:  mov [0x8db0],ax
_0x9d66:  lodsw
_0x9d67:  mov [0x8dac],ax
_0x9d6a:  lodsw
_0x9d6b:  mov [0x8dae],ax
_0x9d6e:  lodsw
_0x9d6f:  mov [0x8db9],ax
_0x9d72:  add al,0x16
_0x9d74:  mov [0x894f],al
_0x9d77:  mov [0x8950],ah
_0x9d7b:  lodsw
_0x9d7c:  mov [0x8dbb],ax
_0x9d7f:  add al,0x16
_0x9d81:  mov [0x8984],al
_0x9d84:  mov [0x8985],ah
_0x9d88:  lodsw
_0x9d89:  mov [0x8dbd],ax
_0x9d8c:  lodsw
_0x9d8d:  mov [0x8dbf],ax
_0x9d90:  lodsw
_0x9d91:  mov [0x898e],ax
_0x9d94:  lodsw
_0x9d95:  mov bl,ah
_0x9d97:  xor bh,bh
_0x9d99:  xor ah,ah
_0x9d9b:  mov [0x8dc1],ax
_0x9d9e:  mov [0x8dc3],bx
_0x9da2:  lodsw
_0x9da3:  mov [0x8dc5],ax
_0x9da6:  mov ax,[0x8db2]
_0x9da9:  shl ax,1
_0x9dab:  mov dx,ax
_0x9dad:  sub ax,0x140
_0x9db0:  neg ax
_0x9db2:  mov [0x8db4],ax
_0x9db5:  xor ah,ah
_0x9db7:  mov al,[0x8e01]
_0x9dba:  shl ax,1
_0x9dbc:  shl ax,1
_0x9dbe:  shl ax,1
_0x9dc0:  shl ax,1
_0x9dc2:  sub ax,dx
_0x9dc4:  mov [0x8db6],ax
_0x9dc7:  xor ah,ah
_0x9dc9:  mov al,[0x8e01]
_0x9dcc:  shl ax,1
_0x9dce:  mov bx,[0x8db2]
_0x9dd2:  shr bx,1
_0x9dd4:  shr bx,1
_0x9dd6:  sub ax,bx
_0x9dd8:  mov [0x8daa],al
_0x9ddb:  mov al,[0x8e00]
_0x9dde:  shl ax,1
_0x9de0:  mov bx,[0x8db0]
_0x9de4:  shr bx,1
_0x9de6:  sub ax,bx
_0x9de8:  mov [0x8dab],al
_0x9deb:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9dec:  mov bx,0x89d0
_0x9def:  xor ax,ax
_0x9df1:  mov cx,0x1
_0x9df4:  mov dx,0x7
_0x9df7:  jmp _0x8b6

; ─────────────────────────────────────────────────────────────────────

_0x9dfa:  mov si,0x894e
_0x9dfd:  xor bx,bx
_0x9dff:  test byte [0x894e],0xff
_0x9e04:  js _0x9e09
_0x9e06:  call _0x9e17
_0x9e09:  mov si,0x8983
_0x9e0c:  test byte [0x8983],0xff
_0x9e11:  jns _0x9e14
_0x9e13:  ret

; ─────────────────────────────────────────────────────────────────────

_0x9e14:  mov bx,0x6
_0x9e17:  cmp byte [si],0x2
_0x9e1a:  jc _0x9e1f
_0x9e1c:  mov bx,0xc
_0x9e1f:  cmp byte [si],0x1
_0x9e22:  jnz _0x9e26
_0x9e24:  inc byte [si]
_0x9e26:  mov di,[si+0x11]
_0x9e29:  mov ax,[si+0xf]
_0x9e2c:  mov [si+0x11],ax
_0x9e2f:  mov dx,[si+0x15]
_0x9e32:  mov ax,[si+0x13]
_0x9e35:  mov [si+0x15],ax
_0x9e38:  mov si,dx
_0x9e3a:  mov dx,[0x8e04]
_0x9e3e:  mov cx,0x2
_0x9e41:  add dx,cx
_0x9e43:  mov es,[bx-0x76ca]
_0x9e47:  mov bp,di
_0x9e49:  lodsw

_0x9e4a: times 31 db 0x26,0x31,0x05,0x03,0xF9,0xAD  ; =  MACRO: xor [es:di],ax  \n   add di,cx  \n   lodsw

_0x9f04:  xor [es:di],ax
_0x9f07:  mov di,bp
_0x9f09:  mov es,[bx-0x76c8]
_0x9f0d:  lodsw

_0x9f0e: times 31 db 0x26,0x31,0x05,0x03,0xF9,0xAD  ; =  MACRO: xor [es:di],ax  \n   add di,cx  \n   lodsw

_0x9fc8:  xor [es:di],ax
_0x9fcb:  mov di,bp
_0x9fcd:  mov es,[bx-0x76c6]
_0x9fd1:  lodsw

_0x9fd2: times 31 db 0x26,0x31,0x05,0x03,0xF9,0xAD  ; =  MACRO: xor [es:di],ax  \n   add di,cx  \n   lodsw

_0xa08c:  xor [es:di],ax
_0xa08f:  mov di,bp
_0xa091:  mov ax,cs
_0xa093:  mov es,ax
_0xa095:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa096:  mov si,0x894e
_0xa099:  test byte [0x894e],0xff
_0xa09e:  js _0xa0a3
_0xa0a0:  call _0xa0ae
_0xa0a3:  mov si,0x8983
_0xa0a6:  test byte [0x8983],0xff
_0xa0ab:  jns _0xa0ae
_0xa0ad:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa0ae:  mov bl,[si+0x2b]
_0xa0b1:  xor bh,bh
_0xa0b3:  push si
_0xa0b4:  call _0x86c7
_0xa0b7:  pop si
_0xa0b8:  test byte [si+0x32],0xff
_0xa0bc:  jz _0xa0d1
_0xa0be:  dec byte [si+0x32]
_0xa0c1:  mov byte [0x7bfe],0x50
_0xa0c6:  mov byte [0x7bff],0x50
_0xa0cb:  mov word [0x7c00],0x0
_0xa0d1:  mov al,[si+0x23]
_0xa0d4:  mov [si+0x24],al
_0xa0d7:  cbw
_0xa0d8:  mov bx,ax
_0xa0da:  mov ax,[si+0x1d]
_0xa0dd:  mov [si+0x1f],ax
_0xa0e0:  or al,ah
_0xa0e2:  and al,0x1
_0xa0e4:  mov [si+0x25],al
_0xa0e7:  xor dx,dx
_0xa0e9:  mov ah,0x2
_0xa0eb:  xor al,al
_0xa0ed:  cmp byte [0x7bff],0x3c
_0xa0f2:  ja _0xa0f7
_0xa0f4:  mov ah,0x1
_0xa0f6:  dec dx
_0xa0f7:  cmp byte [0x7bff],0x64
_0xa0fc:  jc _0xa103
_0xa0fe:  mov al,0x4
_0xa100:  mov ah,0xff
_0xa102:  dec dx
_0xa103:  cmp byte [0x7bfe],0x64
_0xa108:  jc _0xa10d
_0xa10a:  add al,ah
_0xa10c:  dec dx
_0xa10d:  cmp byte [0x7bfe],0x3c
_0xa112:  ja _0xa119
_0xa114:  sub al,ah
_0xa116:  and al,0x7
_0xa118:  dec dx
_0xa119:  or dx,dx
_0xa11b:  jns _0xa132
_0xa11d:  shl bx,1
_0xa11f:  shl bx,1
_0xa121:  shl bx,1
_0xa123:  add bx,0x8d2c
_0xa127:  xlatb
_0xa128:  mov [si+0x23],al
_0xa12b:  mov byte [si+0x2a],0x2
_0xa12f:  inc byte [si+0x25]
_0xa132:  test byte [0x7c00],0xff
_0xa137:  jz _0xa13c
_0xa139:  inc byte [si+0x2c]
_0xa13c:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa13d:  mov di,0x894e
_0xa140:  mov si,0x8a4d
_0xa143:  test byte [0x894e],0xff
_0xa148:  js _0xa14d
_0xa14a:  call _0xa15b
_0xa14d:  mov di,0x8983
_0xa150:  mov si,0x8b19
_0xa153:  test byte [0x8983],0xff
_0xa158:  jns _0xa15b
_0xa15a:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa15b:  test byte [di+0x2c],0xff
_0xa15f:  jz _0xa1bb
_0xa161:  test word [di+0x21],0xffff
_0xa166:  jnz _0xa1bb
_0xa168:  cmp byte [si],0xff
_0xa16b:  jz _0xa175
_0xa16d:  add si,byte +0x11
_0xa170:  cmp byte [si],0xff
_0xa173:  jnz _0xa1bb
_0xa175:  call _0x936b
_0xa178:  mov al,[di+0x23]
_0xa17b:  mov [si+0x9],al
_0xa17e:  mov byte [si+0x6],0x3
_0xa182:  mov ax,[di+0x19]
_0xa185:  mov [si],ax
_0xa187:  mov ax,[di+0x1d]
_0xa18a:  mov [si+0x4],ax
_0xa18d:  mov byte [si+0xa],0xff
_0xa191:  mov al,0xa
_0xa193:  cmp byte [di],0x1
_0xa196:  jnz _0xa19a
_0xa198:  mov al,0x3
_0xa19a:  mov [si+0xe],al
_0xa19d:  mov byte [di+0x2c],0x0
_0xa1a1:  mov ax,0x2
_0xa1a4:  call _0x2a2
_0xa1a7:  mov al,[si+0x1]
_0xa1aa:  mul byte [0x8e01]
_0xa1ae:  mov bl,[si]
_0xa1b0:  xor bh,bh
_0xa1b2:  add bx,ax
_0xa1b4:  add bx,0x5cc0
_0xa1b8:  mov [si+0xb],bx
_0xa1bb:  ret
_0xa1bc:  mov si,0x8a4d
_0xa1bf:  mov bp,0x894e
_0xa1c2:  mov word [0x8dd7],0x2
_0xa1c8:  call _0xa1d7
_0xa1cb:  mov si,0x8b19
_0xa1ce:  mov bp,0x8983
_0xa1d1:  mov word [0x8dd7],0x2
_0xa1d7:  cmp byte [si],0xff
_0xa1da:  jz _0xa23f
_0xa1dc:  mov di,0x8a6f
_0xa1df:  mov cx,0xa
_0xa1e2:  cmp byte [di],0xff
_0xa1e5:  jz _0xa23a
_0xa1e7:  cmp byte [di+0x8],0x3
_0xa1eb:  jc _0xa23a
_0xa1ed:  mov al,[si+0x4]
_0xa1f0:  sub al,[di+0x4]
_0xa1f3:  jns _0xa1f7
_0xa1f5:  neg al
_0xa1f7:  cmp al,0x1
_0xa1f9:  ja _0xa23a
_0xa1fb:  mov al,[si+0x5]
_0xa1fe:  sub al,[di+0x5]
_0xa201:  jns _0xa205
_0xa203:  neg al
_0xa205:  cmp al,0x1
_0xa207:  ja _0xa23a
_0xa209:  mov byte [si],0xff
_0xa20c:  mov byte [si+0xf8],0xff
_0xa211:  mov byte [di+0x8],0x1
_0xa215:  mov byte [di+0x9],0x4
_0xa219:  mov byte [di+0xe],0x5
_0xa21d:  mov byte [di+0x6],0x3
_0xa221:  mov byte [di+0xa],0xff
_0xa225:  mov word [di+0xf],0x0
_0xa22a:  mov byte [di+0xf8],0xff
_0xa22f:  add byte [bp+0x28],0x3
_0xa233:  xor ax,ax
_0xa235:  call _0x2a2
_0xa238:  jmp short _0xa23f
_0xa23a:  add di,byte +0x11
_0xa23d:  loop _0xa1e2
_0xa23f:  add si,byte +0x11
_0xa242:  dec word [0x8dd7]
_0xa246:  jnz _0xa1d7
_0xa248:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa249:  mov bp,0x8983
_0xa24c:  mov di,0x894e
_0xa24f:  mov si,0x8a6f
_0xa252:  test byte [0x894e],0xff
_0xa257:  js _0xa25c
_0xa259:  call _0xa26d
_0xa25c:  test byte [0x8983],0xff
_0xa261:  jns _0xa264
_0xa263:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa264:  mov di,0x8983
_0xa267:  mov si,0x8a4d
_0xa26a:  mov bp,0x894e
_0xa26d:  mov cx,0xc
_0xa270:  cmp byte [si],0xff
_0xa273:  jz _0xa297
_0xa275:  cmp byte [si+0x8],0x1
_0xa279:  jz _0xa297
_0xa27b:  mov al,[di+0x1d]
_0xa27e:  sub al,[si+0x4]
_0xa281:  jns _0xa285
_0xa283:  neg al
_0xa285:  cmp al,0x1
_0xa287:  ja _0xa297
_0xa289:  mov al,[di+0x1e]
_0xa28c:  sub al,[si+0x5]
_0xa28f:  jns _0xa293
_0xa291:  neg al
_0xa293:  cmp al,0x2
_0xa295:  jc _0xa29d
_0xa297:  add si,byte +0x11
_0xa29a:  loop _0xa270
_0xa29c:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa29d:  mov ax,0x1
_0xa2a0:  call _0x2a2
_0xa2a3:  mov byte [di+0x2d],0x1
_0xa2a7:  call _0x936b
_0xa2aa:  test byte [di],0xff
_0xa2ad:  jz _0xa2b4
_0xa2af:  mov byte [di+0x32],0x14
_0xa2b3:  ret
_0xa2b4:  dec byte [di+0x26]
_0xa2b7:  js _0xa2ba
_0xa2b9:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa2ba:  mov byte [di],0x1
_0xa2bd:  mov al,[di+0x1]
_0xa2c0:  sub al,0x16
_0xa2c2:  mov bl,[di+0x2]
_0xa2c5:  add bl,0xc
_0xa2c8:  xor ah,ah
_0xa2ca:  xor bh,bh
_0xa2cc:  push di
_0xa2cd:  push bp
_0xa2ce:  mov si,0x8cb2
_0xa2d1:  call _0x84f7
_0xa2d4:  pop bp
_0xa2d5:  pop di
_0xa2d6:  test byte [di+0x2e],0xff
_0xa2da:  jnz _0xa2dd
_0xa2dc:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa2dd:  dec byte [di+0x2e]
_0xa2e0:  inc byte [bp+0x2e]
_0xa2e3:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa2e4:  mov dx,0x307
_0xa2e7:  mov si,0x894e
_0xa2ea:  test byte [0x894e],0xff
_0xa2ef:  jnz _0xa2f4
_0xa2f1:  call _0xa302
_0xa2f4:  mov si,0x8983
_0xa2f7:  test byte [0x8983],0xff
_0xa2fc:  jz _0xa2ff
_0xa2fe:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa2ff:  mov dx,0x506
_0xa302:  mov al,[si+0x26]
_0xa305:  cmp al,[si+0x27]
_0xa308:  jnz _0xa30b
_0xa30a:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa30b:  mov al,[si+0x27]
_0xa30e:  mov byte [0x8dcd],0x3e
_0xa313:  ja _0xa320
_0xa315:  dec al
_0xa317:  mov byte [0x8dcd],0x20
_0xa31c:  sub byte [si+0x27],0x2
_0xa320:  inc byte [si+0x27]
_0xa323:  push ax
_0xa324:  push si
_0xa325:  call _0x84b4
_0xa328:  pop si
_0xa329:  pop ax
_0xa32a:  mov ah,al
_0xa32c:  shl al,1
_0xa32e:  add al,ah
_0xa330:  add al,[si+0x1]
_0xa333:  sub al,0x16
_0xa335:  mov bl,[si+0x2]
_0xa338:  add bl,0xc
_0xa33b:  xor ah,ah
_0xa33d:  xor bh,bh
_0xa33f:  mov si,0x8dcd
_0xa342:  call _0x84f7
_0xa345:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa346:  mov si,0x894e
_0xa349:  test byte [0x894e],0xff
_0xa34e:  js _0xa353
_0xa350:  call _0xa377
_0xa353:  call _0xa674
_0xa356:  mov si,0x8983
_0xa359:  test byte [0x8983],0xff
_0xa35e:  js _0xa363
_0xa360:  call _0xa377
_0xa363:  jmp _0xa674

; ─────────────────────────────────────────────────────────────────────

_0xa366:  pop ax
_0xa367:  mov al,[si+0x24]
_0xa36a:  cmp al,[si+0x23]
_0xa36d:  jnz _0xa374
_0xa36f:  mov byte [si+0x25],0x0
_0xa373:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa374:  mov [si+0x23],al
_0xa377:  test byte [si+0x25],0xff
_0xa37b:  jnz _0xa37e
_0xa37d:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa37e:  mov ax,[si+0x19]
_0xa381:  mov [si+0x1b],ax
_0xa384:  mov bl,[si+0x23]
_0xa387:  xor bh,bh
_0xa389:  shl bx,1
_0xa38b:  jmp [bx-0x713f]

; ─────────────────────────────────────────────────────────────────────

_0xa38f:  test byte [si+0x21],0xff
_0xa393:  jz _0xa397
_0xa395:  jmp short _0xa367

; ─────────────────────────────────────────────────────────────────────

_0xa397:  test byte [si+0x22],0xff
_0xa39b:  jnz _0xa3bc
_0xa39d:  dec byte [si+0x1c]
_0xa3a0:  jns _0xa3b9
_0xa3a2:  mov al,[0x8e00]
_0xa3a5:  dec al
_0xa3a7:  mov [si+0x1a],al
_0xa3aa:  mov [si+0x1c],al
_0xa3ad:  inc byte [si+0x22]
_0xa3b0:  shl al,1
_0xa3b2:  inc al
_0xa3b4:  mov [si+0x1e],al
_0xa3b7:  jmp short _0xa3bc

; ─────────────────────────────────────────────────────────────────────

_0xa3b9:  call _0xa479
_0xa3bc:  xor byte [si+0x22],0x1
_0xa3c0:  jz _0xa3c5
_0xa3c2:  dec byte [si+0x1a]
_0xa3c5:  dec byte [si+0x1e]
_0xa3c8:  ret
_0xa3c9:  test byte [si+0x22],0xff
_0xa3cd:  jz _0xa3d1
_0xa3cf:  jmp short _0xa367

; ─────────────────────────────────────────────────────────────────────

_0xa3d1:  test byte [si+0x21],0xff
_0xa3d5:  jnz _0xa3f6
_0xa3d7:  dec byte [si+0x1b]
_0xa3da:  jns _0xa3f3
_0xa3dc:  mov al,[0x8e01]
_0xa3df:  dec al
_0xa3e1:  mov [si+0x19],al
_0xa3e4:  mov [si+0x1b],al
_0xa3e7:  inc byte [si+0x21]
_0xa3ea:  shl al,1
_0xa3ec:  inc al
_0xa3ee:  mov [si+0x1d],al
_0xa3f1:  jmp short _0xa3f6

; ─────────────────────────────────────────────────────────────────────

_0xa3f3:  call _0xa479
_0xa3f6:  xor byte [si+0x21],0x1
_0xa3fa:  jz _0xa3ff
_0xa3fc:  dec byte [si+0x19]
_0xa3ff:  dec byte [si+0x1d]
_0xa402:  ret
_0xa403:  test byte [si+0x21],0xff
_0xa407:  jz _0xa40c
_0xa409:  jmp _0xa367

; ─────────────────────────────────────────────────────────────────────

_0xa40c:  test byte [si+0x22],0xff
_0xa410:  jnz _0xa431
_0xa412:  inc byte [si+0x1c]
_0xa415:  mov al,[0x8e00]
_0xa418:  cmp [si+0x1c],al
_0xa41b:  jnz _0xa42e
_0xa41d:  mov byte [si+0x1a],0xff
_0xa421:  mov byte [si+0x1c],0xff
_0xa425:  inc byte [si+0x22]
_0xa428:  mov byte [si+0x1e],0xff
_0xa42c:  jmp short _0xa431

; ─────────────────────────────────────────────────────────────────────

_0xa42e:  call _0xa479
_0xa431:  xor byte [si+0x22],0x1
_0xa435:  jnz _0xa43a
_0xa437:  inc byte [si+0x1a]
_0xa43a:  inc byte [si+0x1e]
_0xa43d:  ret
_0xa43e:  test byte [si+0x22],0xff
_0xa442:  jz _0xa447
_0xa444:  jmp _0xa367

; ─────────────────────────────────────────────────────────────────────

_0xa447:  test byte [si+0x21],0xff
_0xa44b:  jnz _0xa46c
_0xa44d:  inc byte [si+0x1b]
_0xa450:  mov al,[0x8e01]
_0xa453:  cmp [si+0x1b],al
_0xa456:  jnz _0xa469
_0xa458:  mov byte [si+0x19],0xff
_0xa45c:  mov byte [si+0x1b],0xff
_0xa460:  inc byte [si+0x21]
_0xa463:  mov byte [si+0x1d],0xff
_0xa467:  jmp short _0xa46c

; ─────────────────────────────────────────────────────────────────────

_0xa469:  call _0xa479
_0xa46c:  xor byte [si+0x21],0x1
_0xa470:  jnz _0xa475
_0xa472:  inc byte [si+0x19]
_0xa475:  inc byte [si+0x1d]
_0xa478:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa479:  xor bh,bh
_0xa47b:  mov bl,[si+0x1b]
_0xa47e:  mov al,[0x8e01]
_0xa481:  mul byte [si+0x1c]
_0xa484:  add bx,ax
_0xa486:  add bx,0x5cc0
_0xa48a:  mov al,[bx]
_0xa48c:  cmp al,0x40
_0xa48e:  jnz _0xa491
_0xa490:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa491:  cmp al,0x78
_0xa493:  jnz _0xa496
_0xa495:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa496:  cmp al,0x50
_0xa498:  jnc _0xa49d
_0xa49a:  jmp short _0xa4b8

; ─────────────────────────────────────────────────────────────────────

_0xa49c:  nop
_0xa49d:  cmp al,0x72
_0xa49f:  jz _0xa4b8
_0xa4a1:  jna 0xa4a6
_0xa4a3:  jmp _0xa5ed

; ─────────────────────────────────────────────────────────────────────

_0xa4a6:  cmp al,0x54
_0xa4a8:  jc _0xa4ad
_0xa4aa:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa4ad:  sub al,0x50
_0xa4af:  cmp al,[si+0x23]
_0xa4b2:  jnz _0xa4b7
_0xa4b4:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa4b7:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa4b8:  mov [0x8e08],al
_0xa4bb:  cmp al,0x41
_0xa4bd:  jz _0xa505
_0xa4bf:  cmp al,0x42
_0xa4c1:  jz _0xa4d8
_0xa4c3:  cmp al,0x72
_0xa4c5:  jnz _0xa4ca
_0xa4c7:  jmp _0xa5a1

; ─────────────────────────────────────────────────────────────────────

_0xa4ca:  cmp al,0x47
_0xa4cc:  jc _0xa52a
_0xa4ce:  cmp al,0x50
_0xa4d0:  jnc _0xa4d5
_0xa4d2:  jmp _0xa55c
_0xa4d5:  jmp _0xa366
_0xa4d8:  test byte [si],0xff
_0xa4db:  jz _0xa4e0
_0xa4dd:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa4e0:  test byte [si+0x2e],0xff
_0xa4e4:  jz _0xa4e9
_0xa4e6:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa4e9:  inc byte [si+0x2e]
_0xa4ec:  dec word [0x8df4]
_0xa4f0:  mov byte [bx],0x40
_0xa4f3:  mov ax,0xf
_0xa4f6:  add [si+0x28],al
_0xa4f9:  call _0x9390
_0xa4fc:  mov ax,0x3
_0xa4ff:  call _0x2a2
_0xa502:  jmp _0xa5b2

; ─────────────────────────────────────────────────────────────────────

_0xa505:  test byte [si+0x2e],0xff
_0xa509:  jnz _0xa50e
_0xa50b:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa50e:  mov byte [bx],0x40
_0xa511:  mov ax,0x19
_0xa514:  add [si+0x28],al
_0xa517:  call _0x9390
_0xa51a:  dec word [0x8df6]
_0xa51e:  dec byte [si+0x2e]
_0xa521:  mov ax,0x4
_0xa524:  call _0x2a2
_0xa527:  jmp _0xa5b2

; ─────────────────────────────────────────────────────────────────────

_0xa52a:  mov byte [bx],0x40
_0xa52d:  add byte [0x8ddc],0xa
_0xa532:  mov al,[0x8ddc]
_0xa535:  add [si+0x28],al
_0xa538:  mov bl,al
_0xa53a:  add bl,0x14
_0xa53d:  shr bl,1
_0xa53f:  shr bl,1
_0xa541:  mov [0x8dd5],bl
_0xa545:  xor ah,ah
_0xa547:  test byte [si],0xff
_0xa54a:  jnz _0xa54f
_0xa54c:  call _0x9390
_0xa54f:  inc byte [0x8de1]
_0xa553:  mov ax,0x5
_0xa556:  call _0x2a2
_0xa559:  jmp short _0xa5b2

; ─────────────────────────────────────────────────────────────────────

_0xa55b:  nop
_0xa55c:  mov byte [bx],0x40
_0xa55f:  mov al,0x63
_0xa561:  add [si+0x28],al
_0xa564:  xor ah,ah
_0xa566:  test byte [si],0xff
_0xa569:  jnz _0xa56e
_0xa56b:  call _0x9390
_0xa56e:  inc byte [0x8de1]
_0xa572:  mov ax,0x7
_0xa575:  call _0x2a2
_0xa578:  push di
_0xa579:  push bx
_0xa57a:  mov al,[0x8ddd]
_0xa57d:  mov di,0x8e08
_0xa580:  add di,byte +0x4
_0xa583:  cmp [di],al
_0xa585:  jnz _0xa580
_0xa587:  mov word [di],0x1
_0xa58b:  mov bx,[0x8e30]
_0xa58f:  inc word [0x8e30]
_0xa593:  shl bx,1
_0xa595:  mov ax,[bx+0x6044]
_0xa599:  mov [di+0x2],ax
_0xa59c:  pop bx
_0xa59d:  pop di
_0xa59e:  jmp short _0xa5b2

; ─────────────────────────────────────────────────────────────────────

_0xa5a0:  nop
_0xa5a1:  mov byte [bx],0x54
_0xa5a4:  mov byte [0x8e08],0x54
_0xa5a9:  inc byte [si+0x28]
_0xa5ac:  call _0xa5b2
_0xa5af:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa5b2:  mov dl,[si+0x1b]
_0xa5b5:  xor dh,dh
_0xa5b7:  shl dx,1
_0xa5b9:  shl dx,1
_0xa5bb:  shl dx,1
_0xa5bd:  shl dx,1
_0xa5bf:  mov al,[si+0x1c]
_0xa5c2:  mul byte [0x8e01]
_0xa5c6:  shl ax,1
_0xa5c8:  shl ax,1
_0xa5ca:  shl ax,1
_0xa5cc:  shl ax,1
_0xa5ce:  shl ax,1
_0xa5d0:  shl ax,1
_0xa5d2:  mov di,ax
_0xa5d4:  add di,dx
_0xa5d6:  mov al,[0x8e08]
_0xa5d9:  sub al,0x40
_0xa5db:  mov ah,0xc0
_0xa5dd:  mul ah
_0xa5df:  push si
_0xa5e0:  mov si,ax
_0xa5e2:  add si,0x970
_0xa5e6:  xor bx,bx
_0xa5e8:  call _0x9e3a
_0xa5eb:  pop si
_0xa5ec:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa5ed:  cmp byte [0x8ddd],0x1
_0xa5f2:  jnz _0xa626
_0xa5f4:  mov bx,0x1
_0xa5f7:  mov ax,[si+0x19]
_0xa5fa:  mov bp,0x6092
_0xa5fd:  mov di,0x6079
_0xa600:  add bp,byte +0x2
_0xa603:  inc bx
_0xa604:  cmp bx,byte +0x16
_0xa607:  jna 0xa60c
_0xa609:  jmp _0xa366

; ─────────────────────────────────────────────────────────────────────

_0xa60c:  test byte [bx+di],0xff
_0xa60f:  js _0xa600
_0xa611:  cmp ax,[bp+0x0]
_0xa614:  jnz _0xa600
_0xa616:  mov [0x8ddd],bl
_0xa61a:  inc byte [0x607a]
_0xa61e:  and byte [0x607a],0xf
_0xa623:  jmp _0x90f9

; ─────────────────────────────────────────────────────────────────────

_0xa626:  mov bl,[0x8ddd]
_0xa62a:  xor bh,bh
_0xa62c:  cmp bl,0x19
_0xa62f:  jnz _0xa634
_0xa631:  jmp _0x90f3

; ─────────────────────────────────────────────────────────────────────

_0xa634:  cmp bl,0x16
_0xa637:  ja _0xa657
_0xa639:  add bx,0x6079
_0xa63d:  mov al,[bx]
_0xa63f:  inc al
_0xa641:  and al,0xf
_0xa643:  jnz _0xa647
_0xa645:  dec al
_0xa647:  mov [bx],al
_0xa649:  js _0xa64f
_0xa64b:  and al,0x3
_0xa64d:  jnz _0xa64f
_0xa64f:  mov byte [0x8ddd],0x1
_0xa654:  jmp _0x90f9

; ─────────────────────────────────────────────────────────────────────

_0xa657:  inc bl
_0xa659:  mov [0x8ddd],bl
_0xa65d:  mov word [0x8da8],0x81d2
_0xa663:  cmp bl,0x18
_0xa666:  jz _0xa66e
_0xa668:  mov word [0x8da8],0x8252
_0xa66e:  call _0x9200
_0xa671:  jmp _0x90f6

; ─────────────────────────────────────────────────────────────────────

_0xa674:  mov al,[si+0x1d]
_0xa677:  sub al,[si+0x17]
_0xa67a:  cmp al,[0x8dac]
_0xa67e:  jng 0xa69a
_0xa680:  cmp al,[0x8dad]
_0xa684:  jnl 0xa6a8
_0xa686:  mov al,[si+0x1e]
_0xa689:  sub al,[si+0x18]
_0xa68c:  cmp al,[0x8dae]
_0xa690:  jng 0xa6cc
_0xa692:  cmp al,[0x8daf]
_0xa696:  jnl 0xa6d8
_0xa698:  jmp short _0xa6f8

; ─────────────────────────────────────────────────────────────────────

_0xa69a:  mov al,[si+0x1f]
_0xa69d:  sub al,[si+0x1d]
_0xa6a0:  jz _0xa686
_0xa6a2:  cmp al,0xff
_0xa6a4:  jz _0xa686
_0xa6a6:  jmp short _0xa6b4

; ─────────────────────────────────────────────────────────────────────

_0xa6a8:  mov al,[si+0x1f]
_0xa6ab:  sub al,[si+0x1d]
_0xa6ae:  jz _0xa686
_0xa6b0:  cmp al,0x1
_0xa6b2:  jz _0xa686
_0xa6b4:  sub [si+0x17],al
_0xa6b7:  jns _0xa6bf
_0xa6b9:  mov byte [si+0x17],0x0
_0xa6bd:  jmp short _0xa6f8

; ─────────────────────────────────────────────────────────────────────

_0xa6bf:  mov al,[0x8daa]
_0xa6c2:  cmp al,[si+0x17]
_0xa6c5:  jnc _0xa6f8
_0xa6c7:  mov [si+0x17],al
_0xa6ca:  jmp short _0xa6f8

; ─────────────────────────────────────────────────────────────────────

_0xa6cc:  mov al,[si+0x20]
_0xa6cf:  sub al,[si+0x1e]
_0xa6d2:  cmp al,0xff
_0xa6d4:  jz _0xa6f8
_0xa6d6:  jmp short _0xa6e2

; ─────────────────────────────────────────────────────────────────────

_0xa6d8:  mov al,[si+0x20]
_0xa6db:  sub al,[si+0x1e]
_0xa6de:  cmp al,0x1
_0xa6e0:  jz _0xa6f8
_0xa6e2:  sub [si+0x18],al
_0xa6e5:  jns _0xa6ed
_0xa6e7:  mov byte [si+0x18],0x0
_0xa6eb:  jmp short _0xa6f8

; ─────────────────────────────────────────────────────────────────────

_0xa6ed:  mov al,[0x8dab]
_0xa6f0:  cmp al,[si+0x18]
_0xa6f3:  jnc _0xa6f8
_0xa6f5:  mov [si+0x18],al
_0xa6f8:  xor dh,dh
_0xa6fa:  mov dl,[si+0x17]
_0xa6fd:  shl dx,1
_0xa6ff:  shl dx,1
_0xa701:  shl dx,1
_0xa703:  mov al,[si+0x18]
_0xa706:  mul byte [0x8e01]
_0xa70a:  shl ax,1
_0xa70c:  shl ax,1
_0xa70e:  shl ax,1
_0xa710:  shl ax,1
_0xa712:  shl ax,1
_0xa714:  add ax,dx
_0xa716:  mov [si+0xd],ax
_0xa719:  xor dh,dh
_0xa71b:  mov dl,[si+0x1d]
_0xa71e:  shl dx,1
_0xa720:  shl dx,1
_0xa722:  shl dx,1
_0xa724:  mov al,[si+0x1e]
_0xa727:  mul byte [0x8e01]
_0xa72b:  shl ax,1
_0xa72d:  shl ax,1
_0xa72f:  shl ax,1
_0xa731:  shl ax,1
_0xa733:  shl ax,1
_0xa735:  add ax,dx
_0xa737:  mov [si+0xf],ax
_0xa73a:  test byte [si+0x25],0xff
_0xa73e:  jnz _0xa76b
_0xa740:  dec byte [si+0x2a]
_0xa743:  js _0xa746
_0xa745:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa746:  mov byte [si+0x2a],0x0
_0xa74a:  inc byte [si+0x29]
_0xa74d:  mov al,[si+0x29]
_0xa750:  mov ah,al
_0xa752:  shr al,1
_0xa754:  shr al,1
_0xa756:  and al,0x1f
_0xa758:  mov bx,0x8d5c
_0xa75b:  xlatb
_0xa75c:  mov bx,0x8d7c
_0xa75f:  shl al,1
_0xa761:  shl al,1
_0xa763:  and ah,0x3
_0xa766:  add al,ah
_0xa768:  xlatb
_0xa769:  jmp short _0xa77e

; ─────────────────────────────────────────────────────────────────────

_0xa76b:  mov al,[0x8dcf]
_0xa76e:  and al,0x3
_0xa770:  xor bh,bh
_0xa772:  mov bl,[si+0x23]
_0xa775:  shl bl,1
_0xa777:  shl bl,1
_0xa779:  add bx,0x8d4c
_0xa77d:  xlatb
_0xa77e:  xor ah,ah
_0xa780:  shl ax,1
_0xa782:  shl ax,1
_0xa784:  shl ax,1
_0xa786:  shl ax,1
_0xa788:  shl ax,1
_0xa78a:  shl ax,1
_0xa78c:  mov dx,ax
_0xa78e:  shl ax,1
_0xa790:  add ax,dx
_0xa792:  add ax,0x2e30
_0xa795:  mov [si+0x13],ax
_0xa798:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa799:  call _0xa843
_0xa79c:  call _0x885c
_0xa79f:  mov word [0x7bd3],0x8930
_0xa7a5:  mov byte [0x8dda],0x1
_0xa7aa:  test byte [0x7c03],0xff
_0xa7af:  jnz _0xa7c1
_0xa7b1:  mov byte [0x8dda],0x3
_0xa7b6:  test byte [0x7c04],0xff
_0xa7bb:  jnz _0xa7c1
_0xa7bd:  inc byte [0x8dda]
_0xa7c1:  call _0xa7e2
_0xa7c4:  xor ax,ax
_0xa7c6:  mov [0x8e30],ax
_0xa7c9:  mov di,0x607a
_0xa7cc:  mov cx,0x19
_0xa7cf:  rep stosb

_0xa7d1:  mov di,0x8e0c
_0xa7d4:  mov si,0x6056
_0xa7d7:  mov cx,0x12
_0xa7da:  rep movsw

_0xa7dc:  mov byte [0x8dd4],0x1
_0xa7e1:  ret
_0xa7e2:  mov byte [0x894e],0x0
_0xa7e7:  mov al,0xff
_0xa7e9:  test byte [0x8dd9],0xff
_0xa7ee:  jz _0xa7f1
_0xa7f0:  inc ax
_0xa7f1:  mov [0x8983],al
_0xa7f4:  mov bx,0x894e
_0xa7f7:  call _0xa7fd
_0xa7fa:  mov bx,0x8983
_0xa7fd:  mov cx,0x5
_0xa800:  mov al,0x30
_0xa802:  lea di,[bx+0x5]
_0xa805:  rep stosb

_0xa807:  xor ax,ax
_0xa809:  mov [bx+0x3],ax
_0xa80c:  mov byte [bx+0x26],0xa
_0xa810:  mov [bx+0x28],al
_0xa813:  mov [bx+0x2d],al
_0xa816:  mov [bx+0x2c],al
_0xa819:  mov [bx+0x31],al
_0xa81c:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa81d:  call _0x297
_0xa820:  xor ax,ax
_0xa822:  mov [0x8dcf],ax
_0xa825:  mov [0x8dd3],al
_0xa828:  mov di,0x8c2b
_0xa82b:  mov cx,0x28
_0xa82e:  rep stosw
_0xa830:  mov si,0x8a4d
_0xa833:  mov cx,0xe
_0xa836:  push cx
_0xa837:  call _0x936b
_0xa83a:  pop cx
_0xa83b:  add si,byte +0x11
_0xa83e:  loop _0xa836
_0xa840:  jmp _0x947b

; ─────────────────────────────────────────────────────────────────────

_0xa843:  mov ax,0xada9
_0xa846:  mov dx,cs
_0xa848:  shr ax,1
_0xa84a:  shr ax,1
_0xa84c:  shr ax,1
_0xa84e:  shr ax,1
_0xa850:  inc ax
_0xa851:  add dx,ax
_0xa853:  mov [0x8936],dx
_0xa857:  mov [0x8948],dx
_0xa85b:  add dx,0x5a0
_0xa85f:  mov [0x8938],dx
_0xa863:  mov [0x893e],dx
_0xa867:  mov [0x894c],dx
_0xa86b:  add dx,0x5a0
_0xa86f:  mov [0x893a],dx
_0xa873:  mov [0x8940],dx
_0xa877:  mov [0x8942],dx
_0xa87b:  mov [0x8944],dx
_0xa87f:  mov [0x8946],dx
_0xa883:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa884:  mov si,0x894e
_0xa887:  test byte [0x894e],0xff
_0xa88c:  js _0xa891
_0xa88e:  call _0xa89c
_0xa891:  mov si,0x8983
_0xa894:  test byte [0x8983],0xff
_0xa899:  jns _0xa89c
_0xa89b:  ret
_0xa89c:  test byte [si+0x2d],0xff
_0xa8a0:  jz _0xa8b0
_0xa8a2:  mov ax,[0x8936]
_0xa8a5:  xchg [0x8938],ax
_0xa8a9:  xchg [0x893a],ax
_0xa8ad:  mov [0x8936],ax
_0xa8b0:  mov bp,[0x8db2]
_0xa8b4:  mov dx,[0x8db0]
_0xa8b8:  mov di,[si+0xb]
_0xa8bb:  push si
_0xa8bc:  mov si,[si+0xd]
_0xa8bf:  mov ax,si
_0xa8c1:  mov bx,di
_0xa8c3:  mov cx,bp
_0xa8c5:  mov ds,[cs:0x8936]
_0xa8ca:  mov es,[cs:0x8930]
_0xa8cf:  rep movsw

_0xa8d1:  mov si,ax
_0xa8d3:  mov di,bx
_0xa8d5:  mov cx,bp
_0xa8d7:  mov ds,[cs:0x8938]
_0xa8dc:  mov es,[cs:0x8932]
_0xa8e1:  rep movsw

_0xa8e3:  mov si,ax
_0xa8e5:  mov di,bx
_0xa8e7:  mov cx,bp
_0xa8e9:  mov ds,[cs:0x893a]
_0xa8ee:  mov es,[cs:0x8934]
_0xa8f3:  rep movsw

_0xa8f5:  mov ax,cs
_0xa8f7:  mov ds,ax
_0xa8f9:  add di,[0x8db4]
_0xa8fd:  add si,[0x8db6]
_0xa901:  dec dx
_0xa902:  jnz _0xa8bf
_0xa904:  mov ax,cs
_0xa906:  mov es,ax
_0xa908:  pop si
_0xa909:  test byte [si+0x2d],0xff
_0xa90d:  jz _0xa920
_0xa90f:  mov ax,[0x893a]
_0xa912:  xchg [0x8938],ax
_0xa916:  xchg [0x8936],ax
_0xa91a:  mov [0x893a],ax
_0xa91d:  dec byte [si+0x2d]
_0xa920:  ret

; ─────────────────────────────────────────────────────────────────────

_0xa921:  xor ax,ax
_0xa923:  mov [0x8dfa],ax
_0xa926:  mov [0x8ddc],al
_0xa929:  mov [0x8ddf],al
_0xa92c:  mov [0x8de0],al
_0xa92f:  mov byte [0x8de1],0x1
_0xa934:  mov al,[0x8ddd]
_0xa937:  mov bx,0x6079
_0xa93a:  xlatb
_0xa93b:  mov [0x8dde],al
_0xa93e:  mov bl,al
_0xa940:  cmp byte [0x8ddd],0x1
_0xa945:  jnz _0xa953
_0xa947:  xor al,al
_0xa949:  mov [0x8dde],al
_0xa94c:  shl bl,1
_0xa94e:  shl bl,1
_0xa950:  and bl,0xc
_0xa953:  shr al,1
_0xa955:  rcl byte [0x8ddf],1
_0xa959:  shr al,1
_0xa95b:  rcl byte [0x8de0],1
_0xa95f:  xor ah,ah
_0xa961:  mov al,bl
_0xa963:  shr al,1
_0xa965:  shr al,1
_0xa967:  mov si,ax
_0xa969:  shl si,1
_0xa96b:  mov si,[si+0x7963]
_0xa96f:  mov al,[0x8ddd]
_0xa972:  dec ax
_0xa973:  shl ax,1
_0xa975:  mov bx,ax
_0xa977:  shl ax,1
_0xa979:  add si,ax
_0xa97b:  add si,bx
_0xa97d:  lodsw
_0xa97e:  mov [0x8de2],ax
_0xa981:  lodsw
_0xa982:  mov [0x8de4],ax
_0xa985:  lodsw
_0xa986:  mov [0x8de6],ax
_0xa989:  mov bl,[0x8ddd]
_0xa98d:  xor bh,bh
_0xa98f:  shl bx,1
_0xa991:  mov ax,[bx+0x792f]
_0xa995:  mov [0x8de8],ax
_0xa998:  mov ax,[bx+0x682c]
_0xa99c:  mov [0x8dea],ax
_0xa99f:  mov ax,[bx+0x6456]
_0xa9a3:  mov [0x8dec],ax
_0xa9a6:  mov ax,[bx+0x661e]
_0xa9aa:  mov [0x8dee],ax
_0xa9ad:  mov ax,[bx+0x6726]
_0xa9b1:  mov [0x8df0],ax
_0xa9b4:  mov si,[bx+0x584e]
_0xa9b8:  call _0xab64
_0xa9bb:  call _0x9d4f
_0xa9be:  call _0xacf0
_0xa9c1:  mov [0x8dfc],si
_0xa9c5:  call _0xadb2
_0xa9c8:  mov bp,0x8d1e
_0xa9cb:  call _0x87f0
_0xa9ce:  mov si,[0x8dea]
_0xa9d2:  mov ax,[0x8de4]
_0xa9d5:  mov di,0x610a
_0xa9d8:  call _0xab3f
_0xa9db:  mov [0x8df2],cx
_0xa9df:  mov si,0x610a
_0xa9e2:  mov byte [0x8e08],0x43
_0xa9e7:  inc byte [0x8e0b]
_0xa9eb:  call _0xab0c
_0xa9ee:  dec byte [0x8e0b]
_0xa9f2:  mov si,[0x8dec]
_0xa9f6:  mov ax,[0x8de6]
_0xa9f9:  mov di,0x610a
_0xa9fc:  call _0xab3f
_0xa9ff:  mov [0x8df8],cx
_0xaa03:  mov si,0x610a
_0xaa06:  mov di,0x60e9
_0xaa09:  rep movsw

_0xaa0b:  mov si,[0x8dee]
_0xaa0f:  mov ax,[0x8de2]
_0xaa12:  mov di,0x610a
_0xaa15:  call _0xab3f
_0xaa18:  mov [0x8df6],cx
_0xaa1c:  mov [0x8df4],cx
_0xaa20:  mov si,0x610a
_0xaa23:  mov byte [0x8e08],0x42
_0xaa28:  call _0xab0c
_0xaa2b:  mov si,[0x8df0]
_0xaa2f:  mov ax,0x0
_0xaa32:  mov cx,[0x8df6]
_0xaa36:  stc
_0xaa37:  rcl ax,1
_0xaa39:  loop _0xaa36
_0xaa3b:  mov di,0x610a
_0xaa3e:  call _0xab3f
_0xaa41:  mov si,0x610a
_0xaa44:  mov byte [0x8e08],0x41
_0xaa49:  call _0xab0c
_0xaa4c:  mov di,0x6094
_0xaa4f:  mov si,0x60be
_0xaa52:  mov bx,0x607b
_0xaa55:  mov cx,0x15
_0xaa58:  mov al,[bx]
_0xaa5a:  inc bx
_0xaa5b:  or al,al
_0xaa5d:  js _0xaa6b
_0xaa5f:  lodsb
_0xaa60:  call _0xacd0
_0xaa63:  stosb
_0xaa64:  lodsb
_0xaa65:  call _0xace0
_0xaa68:  stosb
_0xaa69:  jmp short _0xaa75

; ─────────────────────────────────────────────────────────────────────

_0xaa6b:  mov word [di],0xffff
_0xaa6f:  add di,byte +0x2
_0xaa72:  add si,byte +0x2
_0xaa75:  loop _0xaa58
_0xaa77:  mov bx,0xad99
_0xaa7a:  call _0xad83
_0xaa7d:  xor di,di
_0xaa7f:  mov si,0x894e
_0xaa82:  test byte [0x894e],0xff
_0xaa87:  js _0xaa8c
_0xaa89:  call _0xaa9a
_0xaa8c:  mov si,0x8983
_0xaa8f:  test byte [0x8983],0xff
_0xaa94:  jns _0xaa97
_0xaa96:  ret

; ─────────────────────────────────────────────────────────────────────

_0xaa97:  mov di,0x2
_0xaa9a:  mov bl,[0x8ddd]
_0xaa9e:  xor bh,bh
_0xaaa0:  shl bx,1
_0xaaa2:  shl bx,1
_0xaaa4:  mov ax,[bx+di+0x6992]
_0xaaa8:  call _0xacd0
_0xaaab:  mov [si+0x19],al
_0xaaae:  shl al,1
_0xaab0:  mov [si+0x1d],al
_0xaab3:  mov [si+0x1f],al
_0xaab6:  sub al,0x8
_0xaab8:  jns _0xaabc
_0xaaba:  xor al,al
_0xaabc:  cmp al,[0x8daa]
_0xaac0:  jna 0xaac5
_0xaac2:  mov al,[0x8daa]
_0xaac5:  mov [si+0x17],al
_0xaac8:  mov al,ah
_0xaaca:  call _0xace0
_0xaacd:  mov [si+0x1a],al
_0xaad0:  shl al,1
_0xaad2:  mov [si+0x1e],al
_0xaad5:  mov [si+0x20],al
_0xaad8:  sub al,0x4
_0xaada:  jns _0xaade
_0xaadc:  xor al,al
_0xaade:  cmp al,[0x8dab]
_0xaae2:  jna 0xaae7
_0xaae4:  mov al,[0x8dab]
_0xaae7:  mov [si+0x18],al
_0xaaea:  xor ax,ax
_0xaaec:  mov [si+0x21],ax
_0xaaef:  mov [si+0x23],ax
_0xaaf2:  mov byte [si+0x2e],0x0
_0xaaf6:  mov [si+0x29],al
_0xaaf9:  mov [si+0x27],al
_0xaafc:  call _0xa6f8
_0xaaff:  mov ax,[si+0xf]
_0xab02:  mov [si+0x11],ax
_0xab05:  mov ax,[si+0x13]
_0xab08:  mov [si+0x15],ax
_0xab0b:  ret

; ─────────────────────────────────────────────────────────────────────

_0xab0c:  mov di,0x5cc0
_0xab0f:  lodsb
_0xab10:  xor ah,ah
_0xab12:  add di,ax
_0xab14:  lodsb
_0xab15:  mul byte [0x8e01]
_0xab19:  add di,ax
_0xab1b:  mov ah,[0x8e08]
_0xab1f:  test byte [0x8e0b],0xff
_0xab24:  jz _0xab3a
_0xab26:  push si
_0xab27:  push di
_0xab28:  push cx
_0xab29:  call _0x8658
_0xab2c:  shr dx,1
_0xab2e:  and dx,0x3
_0xab32:  add dl,0x43
_0xab35:  pop cx
_0xab36:  pop di
_0xab37:  pop si
_0xab38:  mov ah,dl
_0xab3a:  mov [di],ah
_0xab3c:  loop _0xab0c
_0xab3e:  ret
_0xab3f:  xor cx,cx
_0xab41:  push di
_0xab42:  shr ax,1
_0xab44:  jnc _0xab5a
_0xab46:  push ax
_0xab47:  mov al,[si]
_0xab49:  call _0xacd0
_0xab4c:  stosb
_0xab4d:  mov al,[si+0x1]
_0xab50:  call _0xace0
_0xab53:  stosb
_0xab54:  pop ax
_0xab55:  inc cx
_0xab56:  or ax,ax
_0xab58:  jz _0xab5f
_0xab5a:  add si,byte +0x2
_0xab5d:  jmp short _0xab42

; ─────────────────────────────────────────────────────────────────────

_0xab5f:  pop si
_0xab60:  mov [si-0x1],cl
_0xab63:  ret
_0xab64:  mov dx,si
_0xab66:  mov al,[0x8ddd]
_0xab69:  mov ah,0x5
_0xab6b:  mul ah
_0xab6d:  mov si,ax
_0xab6f:  add si,0x63d6
_0xab73:  xor ah,ah
_0xab75:  lodsb
_0xab76:  mov [0x8e01],al
_0xab79:  dec ax
_0xab7a:  shl ax,1
_0xab7c:  shl ax,1
_0xab7e:  shl ax,1
_0xab80:  shl ax,1
_0xab82:  mov [0x8e04],ax
_0xab85:  xor ax,ax
_0xab87:  lodsb
_0xab88:  mov [0x8e00],al
_0xab8b:  lodsb
_0xab8c:  mov [0x8ddb],al
_0xab8f:  lodsb
_0xab90:  test byte [0x8dd9],0xff
_0xab95:  jnz _0xab9a
_0xab97:  mov [0x8ddb],al
_0xab9a:  lodsb
_0xab9b:  mov [0x8dfe],al
_0xab9e:  mov bl,0x3
_0xaba0:  mov ah,0x3
_0xaba2:  cmp al,0x55
_0xaba4:  jz _0xabbe
_0xaba6:  add bl,0x2
_0xaba9:  cmp al,0x58
_0xabab:  jz _0xabbe
_0xabad:  add bl,0x2
_0xabb0:  mov ah,0x1
_0xabb2:  cmp al,0x5b
_0xabb4:  jz _0xabbe
_0xabb6:  mov ah,0x4
_0xabb8:  cmp al,0x6d
_0xabba:  jz _0xabbe
_0xabbc:  xor ah,ah
_0xabbe:  mov [0x8e09],ah
_0xabc2:  mov [0x8dff],bl
_0xabc6:  mov si,dx
_0xabc8:  mov al,[0x8e00]
_0xabcb:  mul byte [0x8e01]
_0xabcf:  mov [0x8e02],ax
_0xabd2:  xor cx,cx
_0xabd4:  xor ah,ah
_0xabd6:  xor al,al
_0xabd8:  push ax
_0xabd9:  call _0xabf3
_0xabdc:  push dx
_0xabdd:  call _0xabff
_0xabe0:  pop dx
_0xabe1:  pop ax
_0xabe2:  inc cx
_0xabe3:  inc ax
_0xabe4:  cmp al,[0x8e01]
_0xabe8:  jc _0xabd8
_0xabea:  inc ah
_0xabec:  cmp ah,[0x8e00]
_0xabf0:  jc _0xabd6
_0xabf2:  ret

; ─────────────────────────────────────────────────────────────────────

_0xabf3:  test cx,0x7
_0xabf7:  jnz _0xabfc
_0xabf9:  mov dl,[si]
_0xabfb:  inc si
_0xabfc:  shl dl,1
_0xabfe:  ret

; ─────────────────────────────────────────────────────────────────────

_0xabff:  pushf
_0xac00:  call _0xacd0
_0xac03:  mov bl,al
_0xac05:  mov al,ah
_0xac07:  call _0xace0
_0xac0a:  mul byte [0x8e01]
_0xac0e:  xor bh,bh
_0xac10:  add bx,ax
_0xac12:  mov ah,0x40
_0xac14:  popf
_0xac15:  jnc _0xac41
_0xac17:  push cx
_0xac18:  push bx
_0xac19:  call _0x8658
_0xac1c:  cmp byte [0x8e09],0x0
_0xac21:  jnz _0xac2e
_0xac23:  mov ah,0x72
_0xac25:  and dh,0x6
_0xac28:  jnz _0xac3f
_0xac2a:  mov ah,0x54
_0xac2c:  jmp short _0xac3f

; ─────────────────────────────────────────────────────────────────────

_0xac2e:  shr dx,1
_0xac30:  shr dx,1
_0xac32:  mov ax,dx
_0xac34:  and ax,0x1f
_0xac37:  div byte [0x8e09]
_0xac3b:  add ah,[0x8dfe]
_0xac3f:  pop bx
_0xac40:  pop cx
_0xac41:  mov [bx+0x5cc0],ah
_0xac45:  ret

; ─────────────────────────────────────────────────────────────────────

_0xac46:  test byte [0x8de0],0xff
_0xac4b:  jz _0xac68
_0xac4d:  call _0xacd0
_0xac50:  mov ah,[0x8e08]
_0xac54:  cmp ah,0x71
_0xac57:  jz _0xac69
_0xac59:  cmp ah,0x5e
_0xac5c:  jz _0xac6b
_0xac5e:  cmp ah,0x68
_0xac61:  jz _0xac6b
_0xac63:  cmp ah,0x62
_0xac66:  jz _0xac6d
_0xac68:  ret
_0xac69:  dec al
_0xac6b:  dec al
_0xac6d:  dec al
_0xac6f:  ret

; ─────────────────────────────────────────────────────────────────────

_0xac70:  test byte [0x8ddf],0xff
_0xac75:  jz _0xac97
_0xac77:  call _0xace0
_0xac7a:  mov ah,[0x8e08]
_0xac7e:  cmp ah,0x5e
_0xac81:  jz _0xac98
_0xac83:  cmp ah,0x68
_0xac86:  jz _0xac98
_0xac88:  cmp ah,0x71
_0xac8b:  jz _0xac98
_0xac8d:  cmp ah,0x62
_0xac90:  jz _0xac9a
_0xac92:  cmp ah,0x66
_0xac95:  jz _0xac9a
_0xac97:  ret
_0xac98:  dec al
_0xac9a:  dec al
_0xac9c:  ret

; ─────────────────────────────────────────────────────────────────────

_0xac9d:  test byte [0x8de0],0xff
_0xaca2:  jz _0xacb6
_0xaca4:  cmp al,0x51
_0xaca6:  jnz _0xacad
_0xaca8:  mov byte [0x8e08],0x53
_0xacad:  cmp al,0x53
_0xacaf:  jnz _0xacb6
_0xacb1:  mov byte [0x8e08],0x51
_0xacb6:  test byte [0x8ddf],0xff
_0xacbb:  jz _0xaccf
_0xacbd:  cmp al,0x52
_0xacbf:  jnz _0xacc6
_0xacc1:  mov byte [0x8e08],0x50
_0xacc6:  cmp al,0x50
_0xacc8:  jnz _0xaccf
_0xacca:  mov byte [0x8e08],0x52
_0xaccf:  ret
_0xacd0:  test byte [0x8de0],0xff
_0xacd5:  jz _0xacdf
_0xacd7:  sub al,[0x8e01]
_0xacdb:  inc al
_0xacdd:  neg al
_0xacdf:  ret

; ─────────────────────────────────────────────────────────────────────

_0xace0:  test byte [0x8ddf],0xff
_0xace5:  jz _0xacef
_0xace7:  sub al,[0x8e00]
_0xaceb:  inc al
_0xaced:  neg al
_0xacef:  ret

; ─────────────────────────────────────────────────────────────────────

_0xacf0:  mov si,[0x8de8]
_0xacf4:  lodsb
_0xacf5:  cmp al,0x40
_0xacf7:  jz _0xacef
_0xacf9:  jc _0xad1f
_0xacfb:  mov [0x8e08],al
_0xacfe:  call _0xac9d
_0xad01:  cmp al,0x73
_0xad03:  jnz _0xacf4
_0xad05:  cmp byte [0x8ddd],0x1
_0xad0a:  jz _0xacf4
_0xad0c:  mov al,[si]
_0xad0e:  call _0xacd0
_0xad11:  mov [0x8e06],al
_0xad14:  mov al,[si+0x1]
_0xad17:  call _0xace0
_0xad1a:  mov [0x8e07],al
_0xad1d:  jmp short _0xacf4

; ─────────────────────────────────────────────────────────────────────

_0xad1f:  mov di,0x5cc0
_0xad22:  call _0xac46
_0xad25:  xor ah,ah
_0xad27:  add di,ax
_0xad29:  lodsb
_0xad2a:  call _0xac70
_0xad2d:  mul byte [0x8e01]
_0xad31:  add di,ax
_0xad33:  mov al,[0x8e08]
_0xad36:  cmp al,0x77
_0xad38:  jnz _0xad44
_0xad3a:  call _0x8658
_0xad3d:  and dh,0x60
_0xad40:  mov al,0x40
_0xad42:  jnz _0xacf4
_0xad44:  mov [di],al
_0xad46:  mov bx,0x8e32
_0xad49:  mov al,[bx]
_0xad4b:  or al,al
_0xad4d:  jz _0xacf4
_0xad4f:  cmp al,[0x8e08]
_0xad53:  jz _0xad5a
_0xad55:  add bx,byte +0x3
_0xad58:  jmp short _0xad49

; ─────────────────────────────────────────────────────────────────────

_0xad5a:  mov bx,[bx+0x1]
_0xad5d:  mov dl,[bx]
_0xad5f:  or dl,dl
_0xad61:  jz _0xacf4
_0xad63:  xor ah,ah
_0xad65:  mov al,[bx+0x1]
_0xad68:  mov bp,ax
_0xad6a:  mov al,[bx+0x2]
_0xad6d:  mul byte [0x8e01]
_0xad71:  add bp,ax
_0xad73:  mov [bp+di],dl
_0xad75:  add bx,byte +0x3
_0xad78:  jmp short _0xad5d

; ─────────────────────────────────────────────────────────────────────

_0xad7a:  pop cx
_0xad7b:  cmp cx,0xab83
_0xad7f:  jz _0xad9c
_0xad81:  jmp cx

; ─────────────────────────────────────────────────────────────────────

_0xad83:  mov cx,[bx+0xc]
_0xad86:  dec byte [bx+0xe]
_0xad89:  loopne 0xad86
_0xad8b:  jcxz 0xad7a
_0xad8d:  push cx
_0xad8e:  mov dx,[bx+0x6]
_0xad91:  mov cx,[bx+0xa]
_0xad94:  sub cx,[bx+0x8]
_0xad97:  shr cx,1
_0xad99:  mov si,[bx+0x8]
_0xad9c:  ror dx,1
_0xad9e:  lodsw
_0xad9f:  add dx,ax
_0xada1:  loop _0xad9c
_0xada3:  pop ax
_0xada4:  sub dx,[bx+0x4]
_0xada7:  jz _0xad7a
_0xada9:  mov word [0xab9e],0xab
_0xadaf:  jmp short _0xad99

; ─────────────────────────────────────────────────────────────────────

_0xadb1:  ret

; ─────────────────────────────────────────────────────────────────────

_0xadb2:  mov si,0x8e0c
_0xadb5:  mov dl,[0x8ddd]
_0xadb9:  mov dh,[0x8dde]
_0xadbd:  mov cx,0x9
_0xadc0:  mov bx,[0x8e30]
_0xadc4:  add bl,0x47
_0xadc7:  cmp dl,0x1
_0xadca:  jnz _0xadcd
_0xadcc:  dec bx
_0xadcd:  cmp dx,[si]
_0xadcf:  jnz _0xadd4
_0xadd1:  call _0xadda
_0xadd4:  add si,byte +0x4
_0xadd7:  loop _0xadcd
_0xadd9:  ret

; ─────────────────────────────────────────────────────────────────────

_0xadda:  mov di,0x5cc0
_0xaddd:  mov al,[si+0x2]
_0xade0:  call _0xacd0
_0xade3:  xor ah,ah
_0xade5:  add di,ax
_0xade7:  mov al,[si+0x3]
_0xadea:  call _0xace0
_0xaded:  mul byte [0x8e01]
_0xadf1:  add di,ax
_0xadf3:  mov [di],bl
_0xadf5:  dec bx
_0xadf6:  ret

; ─────────────────────────────────────────────────────────────────────

_0xadf7:  cli
_0xadf8:  xor ax,ax
_0xadfa:  mov es,ax
_0xadfc:  mov cx,0x100
_0xadff:  xor di,di
_0xae01:  cld

_0xae02:  xor ax,ax
_0xae04:  stosw
_0xae05:  mov ax,0x40
_0xae08:  stosw
_0xae09:  loop _0xae02

_0xae0b:  mov ax,0x8683
_0xae0e:  mov di,0x3ec
_0xae11:  stosw

_0xae12:  mov ax,0x40
_0xae15:  stosw
_0xae16:  pop bp
_0xae17:  xor di,di
_0xae19:  xor si,si
_0xae1b:  mov es,ax
_0xae1d:  mov cx,0xada9
_0xae20:  rep movsb

_0xae22:  mov ds,ax
_0xae24:  mov ss,ax
_0xae26:  push ax
_0xae27:  push bp
_0xae28:  sti
_0xae29:  retf

; ─────────────────────────────────────────────────────────────────────

_0xae2a:  mov si,0x5cc0
_0xae2d:  xor di,di
_0xae2f:  mov dx,[0x8e04]
_0xae33:  mov bx,0x8936
_0xae36:  xor ah,ah
_0xae38:  xor al,al
_0xae3a:  push ax
_0xae3b:  lodsb
_0xae3c:  cmp al,0x72
_0xae3e:  jc _0xae62
_0xae40:  jnz _0xae44
_0xae42:  mov al,0x40
_0xae44:  cmp al,0x78
_0xae46:  jnz _0xae4a
_0xae48:  mov al,0x40
_0xae4a:  cmp al,0x73
_0xae4c:  jnz _0xae50
_0xae4e:  mov al,0x40
_0xae50:  cmp al,0x74
_0xae52:  jnz _0xae56
_0xae54:  mov al,0x55
_0xae56:  cmp al,0x75
_0xae58:  jnz _0xae5c
_0xae5a:  mov al,0x58
_0xae5c:  cmp al,0x76
_0xae5e:  jnz _0xae62
_0xae60:  mov al,0x5b
_0xae62:  cmp al,0x71
_0xae64:  jnz _0xae68
_0xae66:  mov al,0x68
_0xae68:  push si
_0xae69:  call _0xae8e
_0xae6c:  pop si
_0xae6d:  pop ax
_0xae6e:  add di,byte +0x10
_0xae71:  inc ax
_0xae72:  cmp al,[0x8e01]
_0xae76:  jc _0xae3a
_0xae78:  add di,byte +0x30
_0xae7b:  add di,dx
_0xae7d:  add di,dx
_0xae7f:  add di,dx
_0xae81:  inc ah
_0xae83:  cmp ah,[0x8e00]
_0xae87:  jc _0xae38
_0xae89:  mov ax,cs
_0xae8b:  mov es,ax
_0xae8d:  ret

; ─────────────────────────────────────────────────────────────────────

; draw something ?


_0xae8e:  mov si,0x970
_0xae91:  sub al,0x40
_0xae93:  xor ah,ah
_0xae95:  shl ax,1
_0xae97:  shl ax,1
_0xae99:  shl ax,1
_0xae9b:  shl ax,1
_0xae9d:  shl ax,1
_0xae9f:  shl ax,1
_0xaea1:  add si,ax
_0xaea3:  shl ax,1
_0xaea5:  add si,ax
_0xaea7:  mov es,[bx]
_0xaea9:  mov bp,di
_0xaeab:  mov cx,0x8
_0xaeae:  rep movsw

_0xaeb0:  add di,dx
_0xaeb2:  mov cx,0x8
_0xaeb5:  rep movsw

_0xaeb7:  add di,dx
_0xaeb9:  mov cx,0x8
_0xaebc:  rep movsw

_0xaebe:  add di,dx
_0xaec0:  mov cx,0x8
_0xaec3:  rep movsw

_0xaec5:  mov di,bp
_0xaec7:  mov es,[bx+0x2]
_0xaeca:  mov cx,0x8
_0xaecd:  rep movsw

_0xaecf:  add di,dx
_0xaed1:  mov cx,0x8
_0xaed4:  rep movsw

_0xaed6:  add di,dx
_0xaed8:  mov cx,0x8
_0xaedb:  rep movsw

_0xaedd:  add di,dx
_0xaedf:  mov cx,0x8
_0xaee2:  rep movsw

_0xaee4:  mov di,bp
_0xaee6:  mov es,[bx+0x4]
_0xaee9:  mov cx,0x8
_0xaeec:  rep movsw

_0xaeee:  add di,dx
_0xaef0:  mov cx,0x8
_0xaef3:  rep movsw

_0xaef5:  add di,dx
_0xaef7:  mov cx,0x8
_0xaefa:  rep movsw

_0xaefc:  add di,dx
_0xaefe:  mov cx,0x8
_0xaf01:  rep movsw

_0xaf03:  mov di,bp
_0xaf05:  mov cx,cs
_0xaf07:  mov es,cx
_0xaf09:  ret

; ─────────────────────────────────────────────────────────────────────

_0xaf0a:  mov si,0x894e
_0xaf0d:  mov dx,0x307
_0xaf10:  test byte [0x894e],0xff
_0xaf15:  js _0xaf1a
_0xaf17:  call _0xaf28
_0xaf1a:  mov dx,0x506
_0xaf1d:  mov si,0x8983
_0xaf20:  test byte [0x8983],0xff
_0xaf25:  jns _0xaf28
_0xaf27:  ret

; ─────────────────────────────────────────────────────────────────────

_0xaf28:  test byte [si+0x28],0xff
_0xaf2c:  jnz _0xaf2f
_0xaf2e:  ret

; ─────────────────────────────────────────────────────────────────────

_0xaf2f:  dec byte [si+0x28]
_0xaf32:  cmp word [0x8dcf],byte +0x0
_0xaf37:  jz _0xaf3e
_0xaf39:  test byte [si],0xff
_0xaf3c:  jnz _0xaf7b
_0xaf3e:  inc word [si+0x3]
_0xaf41:  cmp word [si+0x3],byte -0x1
_0xaf45:  jnz _0xaf4a
_0xaf47:  dec word [si+0x3]
_0xaf4a:  lea bx,[si+0xa]
_0xaf4d:  mov cx,0x5
_0xaf50:  dec bx
_0xaf51:  inc byte [bx]
_0xaf53:  cmp byte [bx],0x3a
_0xaf56:  jnz _0xaf7b
_0xaf58:  mov byte [bx],0x30
_0xaf5b:  cmp cx,byte +0x4
_0xaf5e:  jnz _0xaf69
_0xaf60:  cmp byte [si+0x26],0xf
_0xaf64:  jnc _0xaf69
_0xaf66:  inc byte [si+0x26]
_0xaf69:  loop _0xaf50
_0xaf6b:  mov al,[si+0x1]
_0xaf6e:  mov bl,[si+0x2]
_0xaf71:  xor ah,ah
_0xaf73:  xor bh,bh
_0xaf75:  mov si,0x8ca5
_0xaf78:  jmp _0x84f7

; ─────────────────────────────────────────────────────────────────────

_0xaf7b:  push si
_0xaf7c:  call _0x84b4
_0xaf7f:  pop si
_0xaf80:  mov al,[si+0x1]
_0xaf83:  mov bl,[si+0x2]
_0xaf86:  xor ah,ah
_0xaf88:  xor bh,bh
_0xaf8a:  lea si,[si+0x4]
_0xaf8d:  mov cx,0x5
_0xaf90:  inc si
_0xaf91:  cmp byte [si],0x30
_0xaf94:  loope 0xaf90
_0xaf96:  jmp _0x84f7

; ─────────────────────────────────────────────────────────────────────

; DATA

times 0x67 db 0     ; L A S T . X  ....
