     1                                  org 0
     2                                  ; cpu 8086
     3                                  bits 16
     4                                  
     5                                  COLS  equ 64
     6                                  RED   equ 0xf000
     7                                  GREEN equ 0x1c00
     8                                  BLUE  equ 0xf400
     9                                  NUM equ 200*COLS
    10                                  
    11                                  %define t dh
    12                                  %define i dl
    13                                  %define x bh
    14                                  %define y bl
    15                                  
    16                                  %include "macros.asm"
     1                              <1> %macro next_effect 0
     2                              <1>   
     3                              <1> %endmacro
     4                              <1> 
     5                              <1> %macro generate_sin_table 0
     6                              <1>   push cs
     7                              <1>   pop es
     8                              <1>   mov di,sin_table
     9                              <1>   xor ax,ax
    10                              <1>   mov cx,255
    11                              <1> .sin_loop:
    12                              <1>   push ax
    13                              <1>   push cx
    14                              <1>   ; call sin
    15                              <1>   mov cl,6
    16                              <1>   mov dl,al        ; dl=angle 0..255
    17                              <1>   shr dl,cl        ; angle/6 = quadrant 0..3
    18                              <1>   mov dh,dl        ; dh=copy of quadrant
    19                              <1>   and dh,1         ; dh=1 if quadrant is odd 1 or 3
    20                              <1>   mov bl,dh        ; bl=dh
    21                              <1>   shl bl,cl        ; r = bl<<6
    22                              <1>   mov ch,dl        ; gt1
    23                              <1>   shr ch,1
    24                              <1>   sub bl,dh        ; s (0 of 63)
    25                              <1>   and al,63        ; i
    26                              <1>   xor al,bl        ; i^bl
    27                              <1>   mov bx,qsin_table
    28                              <1>   xlat
    29                              <1>   neg ch
    30                              <1>   xor al,ch
    31                              <1>   neg ch,
    32                              <1>   add al,ch
    33                              <1>   add al,128
    34                              <1>   ; end call sin
    35                              <1>   stosb
    36                              <1>   pop cx
    37                              <1>   pop ax
    38                              <1>   inc ax
    39                              <1>   loop .sin_loop
    40                              <1> %endmacro
    17                                  
    18                                  setup:
    19 00000000 0E                        push cs
    20 00000001 1F                        pop ds
    21                                    generate_sin_table
     6 00000002 0E                  <1>  push cs
     7 00000003 07                  <1>  pop es
     8 00000004 BF[5A01]            <1>  mov di,sin_table
     9 00000007 31C0                <1>  xor ax,ax
    10 00000009 B9FF00              <1>  mov cx,255
    11                              <1> .sin_loop:
    12 0000000C 50                  <1>  push ax
    13 0000000D 51                  <1>  push cx
    14                              <1> 
    15 0000000E B106                <1>  mov cl,6
    16 00000010 88C2                <1>  mov dl,al
    17 00000012 D2EA                <1>  shr dl,cl
    18 00000014 88D6                <1>  mov dh,dl
    19 00000016 80E601              <1>  and dh,1
    20 00000019 88F3                <1>  mov bl,dh
    21 0000001B D2E3                <1>  shl bl,cl
    22 0000001D 88D5                <1>  mov ch,dl
    23 0000001F D0ED                <1>  shr ch,1
    24 00000021 28F3                <1>  sub bl,dh
    25 00000023 243F                <1>  and al,63
    26 00000025 30D8                <1>  xor al,bl
    27 00000027 BB[0501]            <1>  mov bx,qsin_table
    28 0000002A D7                  <1>  xlat
    29 0000002B F6DD                <1>  neg ch
    30 0000002D 30E8                <1>  xor al,ch
    31 0000002F F6DD                <1>  neg ch,
    32 00000031 00E8                <1>  add al,ch
    33 00000033 0480                <1>  add al,128
    34                              <1> 
    35 00000035 AA                  <1>  stosb
    36 00000036 59                  <1>  pop cx
    37 00000037 58                  <1>  pop ax
    38 00000038 40                  <1>  inc ax
    39 00000039 E2D1                <1>  loop .sin_loop
    22 0000003B E80701                    call crt_setup
    23 0000003E 31FF                      xor di,di
    24 00000040 31DB                      xor bx,bx
    25 00000042 31D2                      xor dx,dx
    26                                    
    27                                  draw:
    28 00000044 E89E00                    call calc_xy
    29                                  
    30 00000047 88F8                      mov al,x
    31 00000049 0206[A700]                add al,[offset]
    32 0000004D D0E0                      shl al,1
    33 0000004F BB[5A01]                  mov bx,sin_table
    34 00000052 D7                        xlat
    35 00000053 88C1                      mov cl,al
    36                                  
    37 00000055 88D8                      mov al,y
    38 00000057 0206[A700]                add al,[offset]
    39 0000005B D0E8                      shr al,1
    40 0000005D D7                        xlat
    41 0000005E 00C8                      add al,cl
    42                                  
    43 00000060 00F0                      add al,t
    44                                  
    45 00000062 B104                      mov cl,4
    46 00000064 D2E8                      shr al,cl
    47                                  
    48 00000066 53                        push bx
    49 00000067 BB[AA00]                  mov bx,intensity12
    50 0000006A D7                        xlat
    51 0000006B 5B                        pop bx
    52                                    
    53 0000006C 268805                    mov [es:di],al
    54                                  
    55                                  
    56                                  ;update di (many times per frame)
    57 0000006F A1[A800]                  mov ax,[di_step]
    58 00000072 30E4                      xor ah,ah
    59 00000074 01C7                      add di,ax
    60 00000076 81FF0032                  cmp di,NUM
    61 0000007A 7C04                      jl .done1
    62 0000007C 81EF0032                  sub di,NUM
    63                                  .done1:
    64                                  
    65                                  ;every x cycles increase the [frame] number
    66 00000080 45                        inc bp
    67 00000081 F7C5FF01                  test bp,511  ;1023  ; 8191
    68 00000085 7502                      jne .done2
    69 00000087 FEC6                      inc t
    70                                  .done2:
    71                                  
    72 00000089 F6C63F                    test t,63
    73 0000008C 7503                      jnz .done4
    74 0000008E E84300                    call clear_channel
    75                                  .done4:
    76                                  
    77                                  ;every x frame go the next effect
    78 00000091 F6C61F                    test t,31
    79 00000094 750F                      jnz .done3
    80 00000096 FEC6                      inc t
    81 00000098 FE06[A800]                inc byte [di_step]
    82 0000009C A0[A800]                  mov al,[di_step]
    83                                    ; times 4 shl al,1
    84 0000009F A2[A700]                  mov [offset],al
    85 000000A2 E81300                    call next_channel
    86                                  .done3:
    87                                  
    88                                  
    89 000000A5 EB9D                      jmp draw
    90                                  
    91 000000A7 00                      offset: db 0
    92 000000A8 0B                      di_step: db 11; 226; //160 ; increase step for di
    93 000000A9 01                      frame: db 1
    94                                  
    95 000000AA FFFFFFFF5522000022-     intensity12: db -1, -1, -1, -1, 0x55, 34, 0,0, 34, 0x55, -1, -1, -1, -1 
    95 000000B3 55FFFFFFFF         
    96                                  
    97                                  next_channel:
    98 000000B8 06                        push es
    99 000000B9 58                        pop ax
   100                                    ; xor ax,0x400
   101 000000BA 3D00F0                    cmp ax,RED
   102 000000BD 7505                      jne .b
   103 000000BF B8001C                    mov ax,GREEN
   104 000000C2 EB0D                      jmp .c2
   105                                  .b:
   106 000000C4 3D00F4                    cmp ax,BLUE
   107 000000C7 7405                      je .rd
   108 000000C9 B800F4                    mov ax,BLUE
   109 000000CC EB03                      jmp .c2
   110                                  .rd:
   111 000000CE B800F0                    mov ax,RED
   112                                  .c2:
   113 000000D1 50                        push ax
   114 000000D2 07                        pop es
   115 000000D3 C3                        ret
   116                                  
   117                                  clear_channel:
   118 000000D4 57                        push di
   119 000000D5 51                        push cx
   120 000000D6 50                        push ax
   121 000000D7 31FF                      xor di,di
   122 000000D9 B90019                    mov cx,NUM/2
   123 000000DC B80000                    mov ax,0
   124 000000DF F3AB                      rep stosw
   125 000000E1 58                        pop ax
   126 000000E2 59                        pop cx
   127 000000E3 5F                        pop di
   128 000000E4 C3                        ret
   129                                  
   130                                  calc_xy:
   131 000000E5 89F8                      mov ax,di
   132 000000E7 D1E8<rep 2h>              times 2 shr ax,1
   133 000000EB 243F                      and al,0x3f
   134 000000ED 88C7                      mov x,al
   135 000000EF 89F8                      mov ax,di
   136 000000F1 B108                      mov cl,8    ; /255
   137 000000F3 D3E8                      shr ax,cl
   138 000000F5 B102                      mov cl,2    ; *4
   139 000000F7 D3E0                      shl ax,cl
   140 000000F9 89C1                      mov cx,ax   ; keep copy of ax
   141 000000FB 89F8                      mov ax,di
   142 000000FD 83E003                    and ax,3
   143 00000100 09C8                      or ax,cx    ; al now contains y 0..199
   144 00000102 88C3                      mov y,al
   145 00000104 C3                        ret
   146                                  
   147 00000105 000306090C0F121518-     qsin_table: db 0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,59,62,65,67,70,73,75,78,80,82,85,87,89,91,94,96,98,100,102,103,105,107,108,110,112,113,114,116,117,118,119,120,121,122,123,123,124,125,125,126,126,126,126,126
   147 0000010E 1B1E2124272A2D3033-
   147 00000117 36393B3E414346494B-
   147 00000120 4E50525557595B5E60-
   147 00000129 62646667696B6C6E70-
   147 00000132 71727475767778797A-
   147 0000013B 7B7B7C7D7D7E7E7E7E-
   147 00000144 7E                 
   148                                  
   149                                  ; ------------------------------------
   150                                  
   151                                  crt_setup:
   152 00000145 B001                      mov al,1
   153 00000147 E630                      out 0x30,al      ; set address
   154 00000149 B040                      mov al,COLS      
   155 0000014B E632                      out 0x32,al      ; set value
   156                                  
   157 0000014D B8001C                    mov ax,GREEN
   158 00000150 8EC0                      mov es,ax
   159 00000152 E87FFF                    call clear_channel
   160                                  
   161 00000155 B005                      mov al,5
   162 00000157 E610                      out 10h,al 
   163 00000159 C3                        ret
   164                                  
   165                                  sin_table: 
   166                                  
   167                                  
   168                                  %assign num $-$$
   169                                  %warning total num
   169          ******************       warning: total 346 [-w+user]
   170                                  
   171 0000015A 00<rep 2CEA6h>          times (180*1024)-num db  0                 ; fill up with zeros until file size=180k
