org 0
cpu 8086

ROWS equ 50      ; 50x4 lines = 200px
COLS equ 72    ; =COLS
WH equ ROWS*COLS
; RED   equ 0xf000
; GREEN_1 equ 0x1c00  ;; 4=0x0c00 5=0x1c00, 6=0x2c00, 7=0x3c00 ????

; x equ 30
; y equ 20

; BLUE  equ 0xf400

jmp setup

    db 'Sanyo1.2'
    dw 512     ; Number of bytes per sector
    db 2       ; Number of sectors per cluster
    db 1       ; Number of FAT copies
    dw 512     ; Number of root directory entries
    db 112     ; Total number of sectors in the filesystem
    db 0       ; Media descriptor type
    dw 512     ; Number of sectors per FAT
    dw 765     ; ? Number of sectors per track
    db 0       ; ? Number of heads   (now first byte of sine table)
    db 9       ; ? Number of heads  
    dw 512     ; Number of hidden sectors



setup:
    mov bh,0x0c     ; vram green page1 segment
    push bx
    pop es          ; es=0x0c00

    push cs
    pop ds          ; ds=cs

    dec ax          ; -1
    mov cl,5
initShape:
    mov di,[si+shape]
    inc si
    inc si
    stosw
    stosw
    loop initShape

    mov bh,0x1c   ; vram green page2 segment
    push bx
    pop ds        ; ds=0x0c00

draw:
    call swap

    ; mov cx,WH 
    xor di,di
    xor si,si

    mov bx,ROWS ;y
.forY: 
    mov dx,COLS ;x
.forX:

    lodsw
    lodsw

    ; and ax,1      ; limit to 1

    mov ch,1
.forCh:
    mov cl,1
.forCl:

    ; countCells
    
                    ; push si
                    ; ; push ax
                    ; push dx
                    ; push cx
                    ; push bx

                    ; ; y*COLS+x
                    ; xchg ax,bx
                    ; mov cx,COLS
                    ; push dx
                    ; mul cx    ; *=COLS
                    ; pop dx
                    ; add ax,dx ; +=x
                    
                    ; shl ax,1
                    ; shl ax,1 ; *=4
                    

                    ; ; ax contains now current calculated si

                    ; mov si,ax
                    ; mov ax,[si]

                    ; pop bx
                    ; pop cx
                    ; pop dx
                    ; ; pop ax
                    ; pop si

    ;x
    ; mov ax,dx
    ; add al,cl
    ; ; push cx
    ; mov cx,COLS
    ; add ax,cx
   

    ; ;y
    ; mov ax,bx
    ; add al,ch
    ; ; push cx
    ; mov cx,ROWS
    ; add ax,cx
    ; div cx
    ; xchg bx,dx ; bx = ... % ROWS


    

    ; hlt
    ; ; mov cx,COLS
    ; ; ; y*COLS+x
    ; ; mul cx
    ; ; add dx
    
    ; pop cx

    ; hlt

    ; ; mov si,dx

    ; pop dx
    ; pop ax
    ; ; add al,[si]
    ; pop si

    ; inc bp
; .nextcell:    


    dec cl
    jns .forCl

    dec ch
    jns .forCh
    
    ; not ax
    
    ;setDot [es:di]=ax(0 of -1)
    stosw
    stosw

    dec dx
    jnz .forX

    dec bx
    jnz .forY


    ;alternate between PAGE1 and PAGE2
    push ax
    in al,0x10
    xor al,1
    out 0x10,al
    pop ax

    jmp draw

shape: 
    dw 0,4,8,288,580 ; glider


    

    

    ; call swap

; cellX equ 0
; cellY equ 0
; cellI equ 4*(cellY*COLS+cellX)



    ; call initCells
    ; mov al,255
    ; mov di,cellI
    ; times 4 stosb

    ; call swap ; swap ds,es for double buffering

    ; mov al,4        ; 0x0c00
    ; out 0x10,al

;     mov si,cellI
;     lodsb
;     push ax   ; alive state on stack
;     ; call countNeighbours

;     mov bx,9 ;y
;     mov ax,9 ;x
;     call setDot

;     mov al,5        ; 0x0c00
;     out 0x10,al

;     hlt

; getIndex: ;ax=(ax*COLS+bx)*4  Input: ax=y, bx=x, Output: ax=index
;     mov cx,COLS
;     mul cx
;     add ax,bx
;     shl ax,1
;     shl ax,1
;     ret

; setDot: 
;     call getIndex
;     xchg ax,di
;     mov ax,0xffff
;     stosw
;     stosw
;     ret

; getDot: ;Input: ax=y, bx=x, Output: al=result
;     call getIndex
;     xchg ax,si
;     lodsb
;     and al,1 ; only keep lowest bit
;     ret

; countNeighbours: ;Input: ax=y, bx=x
;     mov bx,9
; .1:
;     ; mov al,cl
;     ; mov cl,3
;     ; div 
    


;     loop .1
;     ret

;     xchg cx,ax
; .1: push cx

    
  


; init:
;     mov cx,10
;     lodsw

  ; for (int i=0; i<shape.length; i+=2)
  ;   setDot(shape[i], shape[i+1], true);
    ; ret
    ; shape: db 10, 0, 11, 0, 12, 0, 10, 1, 11, 2



    ; ik heb nu x en y...
    ; en nu... hoe kan ik in zo weinig mogelijk
    ; bytes m'n borders wrappen?

    ; x>0 ? si-2 : si+4*COLS ??
    ; y>0 ? si-COLS ?????????/

;     hlt

; countNeighbours: ; input si, returns dl
;     push si
;     pop ax       ; ax=si
;     shr ax,1     ; /=2
;     shr ax,1     ; /=2
;     mov bl,COLS
;     div bl       ; ax/=bl  ah=x al=y


;     mov dl,0    ; n
;     mov bx,0    ; bx 8..0  i<len(nb)
; .1: mov cx,[cs:nb+bx]

;     ; add al,cl  ;y
;     ; add ah,cl  ;x


;     mov bh,0
;     mov bl,al
;     xchg ah,al
;     cbw
;     mov cx,COLS  ; ax=y*COLS
;     mul cx

;     add ax,bx    ; ax+=x

;     shl ax,1
;     shl ax,1     ; ax*=4



;     mov di,ax

;     mov ax,0xf000
;     push ax
;     pop es

;     mov ax,0xffff
;     stosw
;     stosw

;     hlt


;wrapping y
;     add al,cl  ;y
    
;     jns .4
;     add al,ROWS
; .4: cmp al,ROWS
;     jl .5
;     sub al,ROWS
; .5: 
;     xchg ah,al    ;swap ah,al to save bytes
; ;wrapping x
;     add al,ch   ; x
;     jns .2
;     hlt
;     add al,COLS
; .2: cmp al,COLS
;     jl .3
;     sub al,COLS
; .3: 



; hlt


    ; mov di,ax

    ; mov ax,0xf000
    ; push ax
    ; pop es

    ; mov ax,0xffff
    ; stosw
    ; stosw

    ; hlt

; add ax,bx
    ; xchg bx,ax ; bx=y,x
    ; add bx,bp  ; y,x+=b,p

; hlt

;     mov ax,[es:si+bp]   ; read value of neighbouring pixel
;     test al,128
;     jz .6
;     inc dl
;     ; int3
; .6: inc bx
;     inc bx
;     cmp bx,16
;     jne .1
;------

; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1
; nb: dw -1,1,-COLS,COLS,-COLS-1,-COLS+1,COLS-1,COLS+1

;     ; pop ax

;     ; 


;     hlt

; .setDot:          ; set x,y=255  
;     mov bx,x      ; bx=xpos
;     mov ax,y      ; ax=ypos
;     call getIndex
;     xchg di,ax    ; di=index
;     mov ax,0xffff
;     times 2 stosw ; es:di = ax ax 4 bytes    

; nextgen:

swap: ;es,ds
    push ds
    push es
    pop ds
    pop es
    ret

; .getDot:  ; =alive? 255 if is x,y is alive
;     mov bx,x      ; bx=xpos
;     mov ax,y      ; ax=ypos
;     call getIndex
;     xchg si,ax
;     lodsw         ; al=ds:si
;     xchg bp,ax    ; bp=ax (=alive)
; ;;;; tot hier werkt het. al is er maar één dot
; ;;;; bp bevat de waarde of deze dot zelf alive is
;     hlt

; .neighbours:

;     hlt

; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1


; getIndex:        ; ax=(ax*COLS+bx)*4  = (y*COLS+x)*4
;     mov cx,COLS 
;     mul cx       ; y*COLS
;     add ax,bx    ; +x
;     shl ax,1     ; *2
;     shl ax,1     ; *2
;     ret


;     hlt

    ; xor ax,ax
    ; xchg al,bl ;al=y, bl=0
    ; mov cx,COLS
    ; mul cx
    ; xchg bh,bl ;bl=x, bh=0
    ; add ax,bx

; .getDot: ; bh=x, bl=y
;     xor ah,ah
;     mov al,bl
;     mov cx,COLS
;     mul cx     ; *=COLS
;     xor bl,bl ; clr bl=y
;     add ax,bx ;
;     mov cx,4
;     mul cx    ; *=4

    ; hlt

    ; xchg ax,bx

    
; .xy2di:
        



;     mov ax,0xffff

; .setDot: ;es:di = ax
;     times 2 stosw  

;     hlt



;     mov ax,0x0c00
;     push ax
;     pop ds

   
; doublebuf:
;     call initCells
;     mov al,5        ; 0x0c00
;     out 0x10,al

;     ; swap es,ds
;     push ds
;     push es
;     pop ds
;     pop es

;     call initCells2

;     mov al,4         ; 0x1c00
;     out 0x10,al

;     ; swap es,ds
;     push ds
;     push es
;     pop ds
;     pop es

;     jmp doublebuf

;     hlt

; ; setDot: 

; countNeighbours:  ;bh=x, bl=y
; ; .countNeighbours: ; input si, returns dl
; ;     mov dl,0    ; n
; ;     mov bx,0    ; bx 8..0  i<len(nb)
; ; .1: mov bp,[cs:nb+bx]
;     ret

; nextgen:
;     ;calculate next generation
;     xor si,si
; .calc_cells:
;     ; call countNeighbours
;     ; int3

; .countNeighbours: ; input si, returns dl
;     mov dl,0    ; n
;     mov bx,0    ; bx 8..0  i<len(nb)
; .1: mov bp,[cs:nb+bx]
;     mov al,[es:si+bp]   ; read value of neighbouring pixel
;     test al,128
;     jz .2
;     inc dl
;     ; int3
; .2: inc bx
;     inc bx
;     cmp bx,16
;     jne .1
; ;------


;     mov al,0

;     cmp dl,2 
;     je .j32  
;     cmp dl,3
;     jne .set      ; not 2 and not 3 neighbours
; .j64: add al,32   ; 3 neighbours
; .j32: add al,32   ; 2 neighbours
; .set: 

;     ; mov al,dl
;     ; mov cl,64
;     ; mul cl

;     xor [es:si],al
;     add si,4
;     cmp si,WH*4
;     jl .calc_cells

; ; hlt

; ;redraw cells
;     ; mov cx,4*WH
;     ; xor si,si
;     xor di,di
; .redraw_cells:
;     mov al,[es:di]
;     test al,128    ; alive?
;     jz .dead
; .alive:
;     test al,64
;     jz .survive
;     test al,32
;     jz .survive
; .die:
; .stay_dead:
;     xor al,al
;     jmp .copy
; .dead:
;     test al,64
;     jz .stay_dead
; .birth:
; .survive:
;     mov al,255
; .copy:

;     mov [es:di+0],al
;     mov [es:di+1],al
;     mov [es:di+2],al
;     mov [es:di+3],al
;     add di,4

    
;     cmp di,WH*4
;     jl .redraw_cells


;     jmp nextgen

   

    ; ret

    ;checkme
; dw -4,4,-W*4,W*4,-W*4-4,-W*4+4,W*4-4,W*4+4

;nb: db -1,1,-W,W,-W-1,-W+1,W-1,W+1
    

; initCells:
;     xor di,di
;     mov cx,WH   
;     mov bp,4
;     mov bx,10000  ; probability (signed)
; .1: mov ax,25173  ; LCG Multiplier
;     mul bp        ; DX:AX = LCG multiplier * seed
;     add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
;     mov bp,ax     ; Update seed = return value
;     cmp ax,bx
;     mov ax,255
;     jg .2
;     xor ax,ax
; .2: push cx
;     mov cx,4
;     rep stosb
;     pop cx
;     loop .1
;     ret
 

;  initCells2:
;     xor di,di
;     mov cx,WH   
;     mov bp,5
;     mov bx,10000  ; probability (signed)
; .1: mov ax,25173  ; LCG Multiplier
;     mul bp        ; DX:AX = LCG multiplier * seed
;     add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
;     mov bp,ax     ; Update seed = return value
;     cmp ax,bx
;     mov ax,255
;     jg .2
;     xor ax,ax
; .2: push cx
;     mov cx,4
;     rep stosb
;     pop cx
;     loop .1
;     ret


; data:



; rnd: db

; times 368640-($-$$) db 0   ;fill up floppy

