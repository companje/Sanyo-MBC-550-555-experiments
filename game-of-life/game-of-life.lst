     1                                  org 0
     2                                  cpu 8086
     3                                  
     4                                  ROWS equ 50      ; 50x4 lines = 200px
     5                                  COLS equ 72    ; =COLS
     6                                  WH equ ROWS*COLS
     7                                  ; RED   equ 0xf000
     8                                  ; GREEN_1 equ 0x1c00  ;; 4=0x0c00 5=0x1c00, 6=0x2c00, 7=0x3c00 ????
     9                                  
    10                                  ; x equ 30
    11                                  ; y equ 20
    12                                  
    13                                  ; BLUE  equ 0xf400
    14                                  
    15 00000000 EB18                    jmp setup
    16                                  
    17 00000002 53616E796F312E32            db 'Sanyo1.2'
    18 0000000A 0002                        dw 512     ; Number of bytes per sector
    19 0000000C 02                          db 2       ; Number of sectors per cluster
    20 0000000D 01                          db 1       ; Number of FAT copies
    21 0000000E 0002                        dw 512     ; Number of root directory entries
    22 00000010 70                          db 112     ; Total number of sectors in the filesystem
    23 00000011 00                          db 0       ; Media descriptor type
    24 00000012 0002                        dw 512     ; Number of sectors per FAT
    25 00000014 FD02                        dw 765     ; ? Number of sectors per track
    26 00000016 00                          db 0       ; ? Number of heads   (now first byte of sine table)
    27 00000017 09                          db 9       ; ? Number of heads  
    28 00000018 0002                        dw 512     ; Number of hidden sectors
    29                                  
    30                                  setup:
    31 0000001A B8000C                      mov ax,0x0c00 ; vram green page1 segment
    32 0000001D 50                          push ax
    33 0000001E 07                          pop es        ; es=0x0c00
    34                                  
    35 0000001F B8001C                      mov ax,0x1c00 ; vram green page2 segment
    36 00000022 50                          push ax
    37 00000023 1F                          pop ds        ; ds=0x0c00
    38                                  
    39                                  
    40                                  cellX equ 0
    41                                  cellY equ 0
    42                                  cellI equ 4*(cellY*COLS+cellX)
    43                                  
    44                                      ; call initCells
    45                                      ; mov al,255
    46                                      ; mov di,cellI
    47                                      ; times 4 stosb
    48                                  
    49 00000024 E83600                      call swap ; swap ds,es for double buffering
    50                                  
    51                                      ; mov al,4        ; 0x0c00
    52                                      ; out 0x10,al
    53                                  
    54 00000027 BE0000                      mov si,cellI
    55 0000002A AC                          lodsb
    56 0000002B 50                          push ax   ; alive state on stack
    57                                      ; call countNeighbours
    58                                  
    59 0000002C BB0900                      mov bx,9 ;y
    60 0000002F B80900                      mov ax,9 ;x
    61 00000032 E80500                      call setDot
    62                                  
    63 00000035 B005                        mov al,5        ; 0x0c00
    64 00000037 E610                        out 0x10,al
    65                                  
    66 00000039 F4                          hlt
    67                                  
    68                                  setDot:
    69 0000003A B94800                      mov cx,COLS
    70 0000003D F7E1                        mul cx
    71 0000003F 01D8                        add ax,bx
    72 00000041 D1E0                        shl ax,1
    73 00000043 D1E0                        shl ax,1
    74 00000045 97                          xchg ax,di
    75                                      ; mov di,0
    76 00000046 B8FFFF                      mov ax,0xffff
    77 00000049 AB                          stosw
    78 0000004A AB                          stosw
    79                                  
    80                                  
    81                                  
    82 0000004B C3                          ret
    83                                  
    84                                  ; countNeighbours:
    85                                      
    86                                    
    87                                  
    88                                  
    89                                  ; init:
    90                                  ;     mov cx,10
    91                                  ;     lodsw
    92                                  
    93                                    ; for (int i=0; i<shape.length; i+=2)
    94                                    ;   setDot(shape[i], shape[i+1], true);
    95                                      ; ret
    96                                      ; shape: db 10, 0, 11, 0, 12, 0, 10, 1, 11, 2
    97                                  
    98                                  
    99                                  
   100                                      ; ik heb nu x en y...
   101                                      ; en nu... hoe kan ik in zo weinig mogelijk
   102                                      ; bytes m'n borders wrappen?
   103                                  
   104                                      ; x>0 ? si-2 : si+4*COLS ??
   105                                      ; y>0 ? si-COLS ?????????/
   106                                  
   107                                  ;     hlt
   108                                  
   109                                  ; countNeighbours: ; input si, returns dl
   110                                  ;     push si
   111                                  ;     pop ax       ; ax=si
   112                                  ;     shr ax,1     ; /=2
   113                                  ;     shr ax,1     ; /=2
   114                                  ;     mov bl,COLS
   115                                  ;     div bl       ; ax/=bl  ah=x al=y
   116                                  
   117                                  
   118                                  ;     mov dl,0    ; n
   119                                  ;     mov bx,0    ; bx 8..0  i<len(nb)
   120                                  ; .1: mov cx,[cs:nb+bx]
   121                                  
   122                                  ;     ; add al,cl  ;y
   123                                  ;     ; add ah,cl  ;x
   124                                  
   125                                  
   126                                  ;     mov bh,0
   127                                  ;     mov bl,al
   128                                  ;     xchg ah,al
   129                                  ;     cbw
   130                                  ;     mov cx,COLS  ; ax=y*COLS
   131                                  ;     mul cx
   132                                  
   133                                  ;     add ax,bx    ; ax+=x
   134                                  
   135                                  ;     shl ax,1
   136                                  ;     shl ax,1     ; ax*=4
   137                                  
   138                                  
   139                                  
   140                                  ;     mov di,ax
   141                                  
   142                                  ;     mov ax,0xf000
   143                                  ;     push ax
   144                                  ;     pop es
   145                                  
   146                                  ;     mov ax,0xffff
   147                                  ;     stosw
   148                                  ;     stosw
   149                                  
   150                                  ;     hlt
   151                                  
   152                                  
   153                                  ;wrapping y
   154                                  ;     add al,cl  ;y
   155                                      
   156                                  ;     jns .4
   157                                  ;     add al,ROWS
   158                                  ; .4: cmp al,ROWS
   159                                  ;     jl .5
   160                                  ;     sub al,ROWS
   161                                  ; .5: 
   162                                  ;     xchg ah,al    ;swap ah,al to save bytes
   163                                  ; ;wrapping x
   164                                  ;     add al,ch   ; x
   165                                  ;     jns .2
   166                                  ;     hlt
   167                                  ;     add al,COLS
   168                                  ; .2: cmp al,COLS
   169                                  ;     jl .3
   170                                  ;     sub al,COLS
   171                                  ; .3: 
   172                                  
   173                                  
   174                                  
   175                                  ; hlt
   176                                  
   177                                  
   178                                      ; mov di,ax
   179                                  
   180                                      ; mov ax,0xf000
   181                                      ; push ax
   182                                      ; pop es
   183                                  
   184                                      ; mov ax,0xffff
   185                                      ; stosw
   186                                      ; stosw
   187                                  
   188                                      ; hlt
   189                                  
   190                                  ; add ax,bx
   191                                      ; xchg bx,ax ; bx=y,x
   192                                      ; add bx,bp  ; y,x+=b,p
   193                                  
   194                                  ; hlt
   195                                  
   196                                  ;     mov ax,[es:si+bp]   ; read value of neighbouring pixel
   197                                  ;     test al,128
   198                                  ;     jz .6
   199                                  ;     inc dl
   200                                  ;     ; int3
   201                                  ; .6: inc bx
   202                                  ;     inc bx
   203                                  ;     cmp bx,16
   204                                  ;     jne .1
   205                                  ;------
   206                                  
   207                                  ; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1
   208 0000004C FFFF0100B8FF4800B7-     nb: dw -1,1,-COLS,COLS,-COLS-1,-COLS+1,COLS-1,COLS+1
   208 00000055 FFB9FF47004900     
   209                                  
   210                                      ; pop ax
   211                                  
   212                                      ; 
   213                                  
   214                                  
   215 0000005C F4                          hlt
   216                                  
   217                                  ; .setDot:          ; set x,y=255  
   218                                  ;     mov bx,x      ; bx=xpos
   219                                  ;     mov ax,y      ; ax=ypos
   220                                  ;     call getIndex
   221                                  ;     xchg di,ax    ; di=index
   222                                  ;     mov ax,0xffff
   223                                  ;     times 2 stosw ; es:di = ax ax 4 bytes    
   224                                  
   225                                  ; nextgen:
   226                                  
   227                                  swap: ;es,ds
   228 0000005D 1E                          push ds
   229 0000005E 06                          push es
   230 0000005F 1F                          pop ds
   231 00000060 07                          pop es
   232 00000061 C3                          ret
   233                                  
   234                                  ; .getDot:  ; =alive? 255 if is x,y is alive
   235                                  ;     mov bx,x      ; bx=xpos
   236                                  ;     mov ax,y      ; ax=ypos
   237                                  ;     call getIndex
   238                                  ;     xchg si,ax
   239                                  ;     lodsw         ; al=ds:si
   240                                  ;     xchg bp,ax    ; bp=ax (=alive)
   241                                  ; ;;;; tot hier werkt het. al is er maar één dot
   242                                  ; ;;;; bp bevat de waarde of deze dot zelf alive is
   243                                  ;     hlt
   244                                  
   245                                  ; .neighbours:
   246                                  
   247                                  ;     hlt
   248                                  
   249                                  ; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1
   250                                  
   251                                  
   252                                  ; getIndex:        ; ax=(ax*COLS+bx)*4  = (y*COLS+x)*4
   253                                  ;     mov cx,COLS 
   254                                  ;     mul cx       ; y*COLS
   255                                  ;     add ax,bx    ; +x
   256                                  ;     shl ax,1     ; *2
   257                                  ;     shl ax,1     ; *2
   258                                  ;     ret
   259                                  
   260                                  
   261                                  ;     hlt
   262                                  
   263                                      ; xor ax,ax
   264                                      ; xchg al,bl ;al=y, bl=0
   265                                      ; mov cx,COLS
   266                                      ; mul cx
   267                                      ; xchg bh,bl ;bl=x, bh=0
   268                                      ; add ax,bx
   269                                  
   270                                  ; .getDot: ; bh=x, bl=y
   271                                  ;     xor ah,ah
   272                                  ;     mov al,bl
   273                                  ;     mov cx,COLS
   274                                  ;     mul cx     ; *=COLS
   275                                  ;     xor bl,bl ; clr bl=y
   276                                  ;     add ax,bx ;
   277                                  ;     mov cx,4
   278                                  ;     mul cx    ; *=4
   279                                  
   280                                      ; hlt
   281                                  
   282                                      ; xchg ax,bx
   283                                  
   284                                      
   285                                  ; .xy2di:
   286                                          
   287                                  
   288                                  
   289                                  
   290                                  ;     mov ax,0xffff
   291                                  
   292                                  ; .setDot: ;es:di = ax
   293                                  ;     times 2 stosw  
   294                                  
   295                                  ;     hlt
   296                                  
   297                                  
   298                                  
   299                                  ;     mov ax,0x0c00
   300                                  ;     push ax
   301                                  ;     pop ds
   302                                  
   303                                     
   304                                  ; doublebuf:
   305                                  ;     call initCells
   306                                  ;     mov al,5        ; 0x0c00
   307                                  ;     out 0x10,al
   308                                  
   309                                  ;     ; swap es,ds
   310                                  ;     push ds
   311                                  ;     push es
   312                                  ;     pop ds
   313                                  ;     pop es
   314                                  
   315                                  ;     call initCells2
   316                                  
   317                                  ;     mov al,4         ; 0x1c00
   318                                  ;     out 0x10,al
   319                                  
   320                                  ;     ; swap es,ds
   321                                  ;     push ds
   322                                  ;     push es
   323                                  ;     pop ds
   324                                  ;     pop es
   325                                  
   326                                  ;     jmp doublebuf
   327                                  
   328                                  ;     hlt
   329                                  
   330                                  ; ; setDot: 
   331                                  
   332                                  ; countNeighbours:  ;bh=x, bl=y
   333                                  ; ; .countNeighbours: ; input si, returns dl
   334                                  ; ;     mov dl,0    ; n
   335                                  ; ;     mov bx,0    ; bx 8..0  i<len(nb)
   336                                  ; ; .1: mov bp,[cs:nb+bx]
   337                                  ;     ret
   338                                  
   339                                  ; nextgen:
   340                                  ;     ;calculate next generation
   341                                  ;     xor si,si
   342                                  ; .calc_cells:
   343                                  ;     ; call countNeighbours
   344                                  ;     ; int3
   345                                  
   346                                  ; .countNeighbours: ; input si, returns dl
   347                                  ;     mov dl,0    ; n
   348                                  ;     mov bx,0    ; bx 8..0  i<len(nb)
   349                                  ; .1: mov bp,[cs:nb+bx]
   350                                  ;     mov al,[es:si+bp]   ; read value of neighbouring pixel
   351                                  ;     test al,128
   352                                  ;     jz .2
   353                                  ;     inc dl
   354                                  ;     ; int3
   355                                  ; .2: inc bx
   356                                  ;     inc bx
   357                                  ;     cmp bx,16
   358                                  ;     jne .1
   359                                  ; ;------
   360                                  
   361                                  
   362                                  ;     mov al,0
   363                                  
   364                                  ;     cmp dl,2 
   365                                  ;     je .j32  
   366                                  ;     cmp dl,3
   367                                  ;     jne .set      ; not 2 and not 3 neighbours
   368                                  ; .j64: add al,32   ; 3 neighbours
   369                                  ; .j32: add al,32   ; 2 neighbours
   370                                  ; .set: 
   371                                  
   372                                  ;     ; mov al,dl
   373                                  ;     ; mov cl,64
   374                                  ;     ; mul cl
   375                                  
   376                                  ;     xor [es:si],al
   377                                  ;     add si,4
   378                                  ;     cmp si,WH*4
   379                                  ;     jl .calc_cells
   380                                  
   381                                  ; ; hlt
   382                                  
   383                                  ; ;redraw cells
   384                                  ;     ; mov cx,4*WH
   385                                  ;     ; xor si,si
   386                                  ;     xor di,di
   387                                  ; .redraw_cells:
   388                                  ;     mov al,[es:di]
   389                                  ;     test al,128    ; alive?
   390                                  ;     jz .dead
   391                                  ; .alive:
   392                                  ;     test al,64
   393                                  ;     jz .survive
   394                                  ;     test al,32
   395                                  ;     jz .survive
   396                                  ; .die:
   397                                  ; .stay_dead:
   398                                  ;     xor al,al
   399                                  ;     jmp .copy
   400                                  ; .dead:
   401                                  ;     test al,64
   402                                  ;     jz .stay_dead
   403                                  ; .birth:
   404                                  ; .survive:
   405                                  ;     mov al,255
   406                                  ; .copy:
   407                                  
   408                                  ;     mov [es:di+0],al
   409                                  ;     mov [es:di+1],al
   410                                  ;     mov [es:di+2],al
   411                                  ;     mov [es:di+3],al
   412                                  ;     add di,4
   413                                  
   414                                      
   415                                  ;     cmp di,WH*4
   416                                  ;     jl .redraw_cells
   417                                  
   418                                  
   419                                  ;     jmp nextgen
   420                                  
   421                                     
   422                                  
   423                                      ; ret
   424                                  
   425                                      ;checkme
   426                                  ; dw -4,4,-W*4,W*4,-W*4-4,-W*4+4,W*4-4,W*4+4
   427                                  
   428                                  ;nb: db -1,1,-W,W,-W-1,-W+1,W-1,W+1
   429                                      
   430                                  
   431                                  initCells:
   432 00000062 31FF                        xor di,di
   433 00000064 B9100E                      mov cx,WH   
   434 00000067 BD0400                      mov bp,4
   435 0000006A BB1027                      mov bx,10000  ; probability (signed)
   436 0000006D B85562                  .1: mov ax,25173  ; LCG Multiplier
   437 00000070 F7E5                        mul bp        ; DX:AX = LCG multiplier * seed
   438 00000072 051936                      add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
   439 00000075 89C5                        mov bp,ax     ; Update seed = return value
   440 00000077 39D8                        cmp ax,bx
   441 00000079 B8FF00                      mov ax,255
   442 0000007C 7F02                        jg .2
   443 0000007E 31C0                        xor ax,ax
   444 00000080 51                      .2: push cx
   445 00000081 B90400                      mov cx,4
   446 00000084 F3AA                        rep stosb
   447 00000086 59                          pop cx
   448 00000087 E2E4                        loop .1
   449 00000089 C3                          ret
   450                                   
   451                                  
   452                                  ;  initCells2:
   453                                  ;     xor di,di
   454                                  ;     mov cx,WH   
   455                                  ;     mov bp,5
   456                                  ;     mov bx,10000  ; probability (signed)
   457                                  ; .1: mov ax,25173  ; LCG Multiplier
   458                                  ;     mul bp        ; DX:AX = LCG multiplier * seed
   459                                  ;     add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
   460                                  ;     mov bp,ax     ; Update seed = return value
   461                                  ;     cmp ax,bx
   462                                  ;     mov ax,255
   463                                  ;     jg .2
   464                                  ;     xor ax,ax
   465                                  ; .2: push cx
   466                                  ;     mov cx,4
   467                                  ;     rep stosb
   468                                  ;     pop cx
   469                                  ;     loop .1
   470                                  ;     ret
   471                                  
   472                                  
   473                                  data:
   474                                  
   475                                  
   476                                  
   477                                  ; rnd: db 0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,255,0,0,255,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,255,0,0,0,0,0,255,255,0,255,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,255,255,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,255,0,0,0,255,0,0,255,0,255,0,255,0,0,0,255,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,255,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,255,255,0,0,0,0,0,255,0,0,0,255,255,255,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,255,0,0,0,255,0,0,255,0,0,0,0,255,0,255,0,0,0,255,0,0,255,0,0,0,0,0,0,0,255,0,0,255,255,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,255,0,0,255,0,...
   478                                  
   479                                  ; times 368640-($-$$) db 0   ;fill up floppy
   480                                  
