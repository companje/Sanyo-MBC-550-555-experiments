     1                                  org 0
     2                                  cpu 8086
     3                                  
     4                                  ROWS equ 50      ; 50x4 lines = 200px
     5                                  COLS equ 72    ; =COLS
     6                                  WH equ ROWS*COLS
     7                                  ; RED   equ 0xf000
     8                                  ; GREEN_1 equ 0x1c00  ;; 4=0x0c00 5=0x1c00, 6=0x2c00, 7=0x3c00 ????
     9                                  
    10                                  ; x equ 30
    11                                  ; y equ 20
    12                                  
    13                                  ; BLUE  equ 0xf400
    14                                  
    15 00000000 EB18                    jmp setup
    16                                  
    17 00000002 53616E796F312E32            db 'Sanyo1.2'
    18 0000000A 0002                        dw 512     ; Number of bytes per sector
    19 0000000C 02                          db 2       ; Number of sectors per cluster
    20 0000000D 01                          db 1       ; Number of FAT copies
    21 0000000E 0002                        dw 512     ; Number of root directory entries
    22 00000010 70                          db 112     ; Total number of sectors in the filesystem
    23 00000011 00                          db 0       ; Media descriptor type
    24 00000012 0002                        dw 512     ; Number of sectors per FAT
    25 00000014 FD02                        dw 765     ; ? Number of sectors per track
    26 00000016 00                          db 0       ; ? Number of heads   (now first byte of sine table)
    27 00000017 09                          db 9       ; ? Number of heads  
    28 00000018 0002                        dw 512     ; Number of hidden sectors
    29                                  
    30                                  
    31                                  
    32                                  setup:
    33 0000001A B70C                        mov bh,0x0c     ; vram green page1 segment
    34 0000001C 53                          push bx
    35 0000001D 07                          pop es          ; es=0x0c00
    36                                  
    37 0000001E 0E                          push cs
    38 0000001F 1F                          pop ds          ; ds=cs
    39                                  
    40 00000020 48                          dec ax          ; -1
    41 00000021 B105                        mov cl,5
    42                                  initShape:
    43 00000023 8BBC[5E00]                  mov di,[si+shape]
    44 00000027 46                          inc si
    45 00000028 46                          inc si
    46 00000029 AB                          stosw
    47 0000002A AB                          stosw
    48 0000002B E2F6                        loop initShape
    49                                  
    50 0000002D B71C                        mov bh,0x1c   ; vram green page2 segment
    51 0000002F 53                          push bx
    52 00000030 1F                          pop ds        ; ds=0x0c00
    53                                  
    54                                  draw:
    55 00000031 E83400                      call swap
    56                                  
    57                                      ; mov cx,WH 
    58 00000034 31FF                        xor di,di
    59 00000036 31F6                        xor si,si
    60                                  
    61 00000038 BB3200                      mov bx,ROWS ;y
    62                                  .forY: 
    63 0000003B BA4800                      mov dx,COLS ;x
    64                                  .forX:
    65                                  
    66 0000003E AD                          lodsw
    67 0000003F AD                          lodsw
    68                                  
    69                                      ; and ax,1      ; limit to 1
    70                                  
    71 00000040 B501                        mov ch,1
    72                                  .forCh:
    73 00000042 B101                        mov cl,1
    74                                  .forCl:
    75                                  
    76                                      ; countCells
    77                                      
    78                                                      ; push si
    79                                                      ; ; push ax
    80                                                      ; push dx
    81                                                      ; push cx
    82                                                      ; push bx
    83                                  
    84                                                      ; ; y*COLS+x
    85                                                      ; xchg ax,bx
    86                                                      ; mov cx,COLS
    87                                                      ; push dx
    88                                                      ; mul cx    ; *=COLS
    89                                                      ; pop dx
    90                                                      ; add ax,dx ; +=x
    91                                                      
    92                                                      ; shl ax,1
    93                                                      ; shl ax,1 ; *=4
    94                                                      
    95                                  
    96                                                      ; ; ax contains now current calculated si
    97                                  
    98                                                      ; mov si,ax
    99                                                      ; mov ax,[si]
   100                                  
   101                                                      ; pop bx
   102                                                      ; pop cx
   103                                                      ; pop dx
   104                                                      ; ; pop ax
   105                                                      ; pop si
   106                                  
   107                                      ;x
   108                                      ; mov ax,dx
   109                                      ; add al,cl
   110                                      ; ; push cx
   111                                      ; mov cx,COLS
   112                                      ; add ax,cx
   113                                     
   114                                  
   115                                      ; ;y
   116                                      ; mov ax,bx
   117                                      ; add al,ch
   118                                      ; ; push cx
   119                                      ; mov cx,ROWS
   120                                      ; add ax,cx
   121                                      ; div cx
   122                                      ; xchg bx,dx ; bx = ... % ROWS
   123                                  
   124                                  
   125                                      
   126                                  
   127                                      ; hlt
   128                                      ; ; mov cx,COLS
   129                                      ; ; ; y*COLS+x
   130                                      ; ; mul cx
   131                                      ; ; add dx
   132                                      
   133                                      ; pop cx
   134                                  
   135                                      ; hlt
   136                                  
   137                                      ; ; mov si,dx
   138                                  
   139                                      ; pop dx
   140                                      ; pop ax
   141                                      ; ; add al,[si]
   142                                      ; pop si
   143                                  
   144                                      ; inc bp
   145                                  ; .nextcell:    
   146                                  
   147                                  
   148 00000044 FEC9                        dec cl
   149 00000046 79FC                        jns .forCl
   150                                  
   151 00000048 FECD                        dec ch
   152 0000004A 79F6                        jns .forCh
   153                                      
   154                                      ; not ax
   155                                      
   156                                      ;setDot [es:di]=ax(0 of -1)
   157 0000004C AB                          stosw
   158 0000004D AB                          stosw
   159                                  
   160 0000004E 4A                          dec dx
   161 0000004F 75ED                        jnz .forX
   162                                  
   163 00000051 4B                          dec bx
   164 00000052 75E7                        jnz .forY
   165                                  
   166                                  
   167                                      ;alternate between PAGE1 and PAGE2
   168 00000054 50                          push ax
   169 00000055 E410                        in al,0x10
   170 00000057 3401                        xor al,1
   171 00000059 E610                        out 0x10,al
   172 0000005B 58                          pop ax
   173                                  
   174 0000005C EBD3                        jmp draw
   175                                  
   176                                  shape: 
   177 0000005E 000004000800200144-         dw 0,4,8,288,580 ; glider
   177 00000067 02                 
   178                                  
   179                                  
   180                                      
   181                                  
   182                                      
   183                                  
   184                                      ; call swap
   185                                  
   186                                  ; cellX equ 0
   187                                  ; cellY equ 0
   188                                  ; cellI equ 4*(cellY*COLS+cellX)
   189                                  
   190                                  
   191                                  
   192                                      ; call initCells
   193                                      ; mov al,255
   194                                      ; mov di,cellI
   195                                      ; times 4 stosb
   196                                  
   197                                      ; call swap ; swap ds,es for double buffering
   198                                  
   199                                      ; mov al,4        ; 0x0c00
   200                                      ; out 0x10,al
   201                                  
   202                                  ;     mov si,cellI
   203                                  ;     lodsb
   204                                  ;     push ax   ; alive state on stack
   205                                  ;     ; call countNeighbours
   206                                  
   207                                  ;     mov bx,9 ;y
   208                                  ;     mov ax,9 ;x
   209                                  ;     call setDot
   210                                  
   211                                  ;     mov al,5        ; 0x0c00
   212                                  ;     out 0x10,al
   213                                  
   214                                  ;     hlt
   215                                  
   216                                  ; getIndex: ;ax=(ax*COLS+bx)*4  Input: ax=y, bx=x, Output: ax=index
   217                                  ;     mov cx,COLS
   218                                  ;     mul cx
   219                                  ;     add ax,bx
   220                                  ;     shl ax,1
   221                                  ;     shl ax,1
   222                                  ;     ret
   223                                  
   224                                  ; setDot: 
   225                                  ;     call getIndex
   226                                  ;     xchg ax,di
   227                                  ;     mov ax,0xffff
   228                                  ;     stosw
   229                                  ;     stosw
   230                                  ;     ret
   231                                  
   232                                  ; getDot: ;Input: ax=y, bx=x, Output: al=result
   233                                  ;     call getIndex
   234                                  ;     xchg ax,si
   235                                  ;     lodsb
   236                                  ;     and al,1 ; only keep lowest bit
   237                                  ;     ret
   238                                  
   239                                  ; countNeighbours: ;Input: ax=y, bx=x
   240                                  ;     mov bx,9
   241                                  ; .1:
   242                                  ;     ; mov al,cl
   243                                  ;     ; mov cl,3
   244                                  ;     ; div 
   245                                      
   246                                  
   247                                  
   248                                  ;     loop .1
   249                                  ;     ret
   250                                  
   251                                  ;     xchg cx,ax
   252                                  ; .1: push cx
   253                                  
   254                                      
   255                                    
   256                                  
   257                                  
   258                                  ; init:
   259                                  ;     mov cx,10
   260                                  ;     lodsw
   261                                  
   262                                    ; for (int i=0; i<shape.length; i+=2)
   263                                    ;   setDot(shape[i], shape[i+1], true);
   264                                      ; ret
   265                                      ; shape: db 10, 0, 11, 0, 12, 0, 10, 1, 11, 2
   266                                  
   267                                  
   268                                  
   269                                      ; ik heb nu x en y...
   270                                      ; en nu... hoe kan ik in zo weinig mogelijk
   271                                      ; bytes m'n borders wrappen?
   272                                  
   273                                      ; x>0 ? si-2 : si+4*COLS ??
   274                                      ; y>0 ? si-COLS ?????????/
   275                                  
   276                                  ;     hlt
   277                                  
   278                                  ; countNeighbours: ; input si, returns dl
   279                                  ;     push si
   280                                  ;     pop ax       ; ax=si
   281                                  ;     shr ax,1     ; /=2
   282                                  ;     shr ax,1     ; /=2
   283                                  ;     mov bl,COLS
   284                                  ;     div bl       ; ax/=bl  ah=x al=y
   285                                  
   286                                  
   287                                  ;     mov dl,0    ; n
   288                                  ;     mov bx,0    ; bx 8..0  i<len(nb)
   289                                  ; .1: mov cx,[cs:nb+bx]
   290                                  
   291                                  ;     ; add al,cl  ;y
   292                                  ;     ; add ah,cl  ;x
   293                                  
   294                                  
   295                                  ;     mov bh,0
   296                                  ;     mov bl,al
   297                                  ;     xchg ah,al
   298                                  ;     cbw
   299                                  ;     mov cx,COLS  ; ax=y*COLS
   300                                  ;     mul cx
   301                                  
   302                                  ;     add ax,bx    ; ax+=x
   303                                  
   304                                  ;     shl ax,1
   305                                  ;     shl ax,1     ; ax*=4
   306                                  
   307                                  
   308                                  
   309                                  ;     mov di,ax
   310                                  
   311                                  ;     mov ax,0xf000
   312                                  ;     push ax
   313                                  ;     pop es
   314                                  
   315                                  ;     mov ax,0xffff
   316                                  ;     stosw
   317                                  ;     stosw
   318                                  
   319                                  ;     hlt
   320                                  
   321                                  
   322                                  ;wrapping y
   323                                  ;     add al,cl  ;y
   324                                      
   325                                  ;     jns .4
   326                                  ;     add al,ROWS
   327                                  ; .4: cmp al,ROWS
   328                                  ;     jl .5
   329                                  ;     sub al,ROWS
   330                                  ; .5: 
   331                                  ;     xchg ah,al    ;swap ah,al to save bytes
   332                                  ; ;wrapping x
   333                                  ;     add al,ch   ; x
   334                                  ;     jns .2
   335                                  ;     hlt
   336                                  ;     add al,COLS
   337                                  ; .2: cmp al,COLS
   338                                  ;     jl .3
   339                                  ;     sub al,COLS
   340                                  ; .3: 
   341                                  
   342                                  
   343                                  
   344                                  ; hlt
   345                                  
   346                                  
   347                                      ; mov di,ax
   348                                  
   349                                      ; mov ax,0xf000
   350                                      ; push ax
   351                                      ; pop es
   352                                  
   353                                      ; mov ax,0xffff
   354                                      ; stosw
   355                                      ; stosw
   356                                  
   357                                      ; hlt
   358                                  
   359                                  ; add ax,bx
   360                                      ; xchg bx,ax ; bx=y,x
   361                                      ; add bx,bp  ; y,x+=b,p
   362                                  
   363                                  ; hlt
   364                                  
   365                                  ;     mov ax,[es:si+bp]   ; read value of neighbouring pixel
   366                                  ;     test al,128
   367                                  ;     jz .6
   368                                  ;     inc dl
   369                                  ;     ; int3
   370                                  ; .6: inc bx
   371                                  ;     inc bx
   372                                  ;     cmp bx,16
   373                                  ;     jne .1
   374                                  ;------
   375                                  
   376                                  ; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1
   377                                  ; nb: dw -1,1,-COLS,COLS,-COLS-1,-COLS+1,COLS-1,COLS+1
   378                                  
   379                                  ;     ; pop ax
   380                                  
   381                                  ;     ; 
   382                                  
   383                                  
   384                                  ;     hlt
   385                                  
   386                                  ; .setDot:          ; set x,y=255  
   387                                  ;     mov bx,x      ; bx=xpos
   388                                  ;     mov ax,y      ; ax=ypos
   389                                  ;     call getIndex
   390                                  ;     xchg di,ax    ; di=index
   391                                  ;     mov ax,0xffff
   392                                  ;     times 2 stosw ; es:di = ax ax 4 bytes    
   393                                  
   394                                  ; nextgen:
   395                                  
   396                                  swap: ;es,ds
   397 00000068 1E                          push ds
   398 00000069 06                          push es
   399 0000006A 1F                          pop ds
   400 0000006B 07                          pop es
   401 0000006C C3                          ret
   402                                  
   403                                  ; .getDot:  ; =alive? 255 if is x,y is alive
   404                                  ;     mov bx,x      ; bx=xpos
   405                                  ;     mov ax,y      ; ax=ypos
   406                                  ;     call getIndex
   407                                  ;     xchg si,ax
   408                                  ;     lodsw         ; al=ds:si
   409                                  ;     xchg bp,ax    ; bp=ax (=alive)
   410                                  ; ;;;; tot hier werkt het. al is er maar één dot
   411                                  ; ;;;; bp bevat de waarde of deze dot zelf alive is
   412                                  ;     hlt
   413                                  
   414                                  ; .neighbours:
   415                                  
   416                                  ;     hlt
   417                                  
   418                                  ; nb: db -1,-1, 0,-1, 1,-1, -1,0, 1,0, -1,1, 0,1, 1,1
   419                                  
   420                                  
   421                                  ; getIndex:        ; ax=(ax*COLS+bx)*4  = (y*COLS+x)*4
   422                                  ;     mov cx,COLS 
   423                                  ;     mul cx       ; y*COLS
   424                                  ;     add ax,bx    ; +x
   425                                  ;     shl ax,1     ; *2
   426                                  ;     shl ax,1     ; *2
   427                                  ;     ret
   428                                  
   429                                  
   430                                  ;     hlt
   431                                  
   432                                      ; xor ax,ax
   433                                      ; xchg al,bl ;al=y, bl=0
   434                                      ; mov cx,COLS
   435                                      ; mul cx
   436                                      ; xchg bh,bl ;bl=x, bh=0
   437                                      ; add ax,bx
   438                                  
   439                                  ; .getDot: ; bh=x, bl=y
   440                                  ;     xor ah,ah
   441                                  ;     mov al,bl
   442                                  ;     mov cx,COLS
   443                                  ;     mul cx     ; *=COLS
   444                                  ;     xor bl,bl ; clr bl=y
   445                                  ;     add ax,bx ;
   446                                  ;     mov cx,4
   447                                  ;     mul cx    ; *=4
   448                                  
   449                                      ; hlt
   450                                  
   451                                      ; xchg ax,bx
   452                                  
   453                                      
   454                                  ; .xy2di:
   455                                          
   456                                  
   457                                  
   458                                  
   459                                  ;     mov ax,0xffff
   460                                  
   461                                  ; .setDot: ;es:di = ax
   462                                  ;     times 2 stosw  
   463                                  
   464                                  ;     hlt
   465                                  
   466                                  
   467                                  
   468                                  ;     mov ax,0x0c00
   469                                  ;     push ax
   470                                  ;     pop ds
   471                                  
   472                                     
   473                                  ; doublebuf:
   474                                  ;     call initCells
   475                                  ;     mov al,5        ; 0x0c00
   476                                  ;     out 0x10,al
   477                                  
   478                                  ;     ; swap es,ds
   479                                  ;     push ds
   480                                  ;     push es
   481                                  ;     pop ds
   482                                  ;     pop es
   483                                  
   484                                  ;     call initCells2
   485                                  
   486                                  ;     mov al,4         ; 0x1c00
   487                                  ;     out 0x10,al
   488                                  
   489                                  ;     ; swap es,ds
   490                                  ;     push ds
   491                                  ;     push es
   492                                  ;     pop ds
   493                                  ;     pop es
   494                                  
   495                                  ;     jmp doublebuf
   496                                  
   497                                  ;     hlt
   498                                  
   499                                  ; ; setDot: 
   500                                  
   501                                  ; countNeighbours:  ;bh=x, bl=y
   502                                  ; ; .countNeighbours: ; input si, returns dl
   503                                  ; ;     mov dl,0    ; n
   504                                  ; ;     mov bx,0    ; bx 8..0  i<len(nb)
   505                                  ; ; .1: mov bp,[cs:nb+bx]
   506                                  ;     ret
   507                                  
   508                                  ; nextgen:
   509                                  ;     ;calculate next generation
   510                                  ;     xor si,si
   511                                  ; .calc_cells:
   512                                  ;     ; call countNeighbours
   513                                  ;     ; int3
   514                                  
   515                                  ; .countNeighbours: ; input si, returns dl
   516                                  ;     mov dl,0    ; n
   517                                  ;     mov bx,0    ; bx 8..0  i<len(nb)
   518                                  ; .1: mov bp,[cs:nb+bx]
   519                                  ;     mov al,[es:si+bp]   ; read value of neighbouring pixel
   520                                  ;     test al,128
   521                                  ;     jz .2
   522                                  ;     inc dl
   523                                  ;     ; int3
   524                                  ; .2: inc bx
   525                                  ;     inc bx
   526                                  ;     cmp bx,16
   527                                  ;     jne .1
   528                                  ; ;------
   529                                  
   530                                  
   531                                  ;     mov al,0
   532                                  
   533                                  ;     cmp dl,2 
   534                                  ;     je .j32  
   535                                  ;     cmp dl,3
   536                                  ;     jne .set      ; not 2 and not 3 neighbours
   537                                  ; .j64: add al,32   ; 3 neighbours
   538                                  ; .j32: add al,32   ; 2 neighbours
   539                                  ; .set: 
   540                                  
   541                                  ;     ; mov al,dl
   542                                  ;     ; mov cl,64
   543                                  ;     ; mul cl
   544                                  
   545                                  ;     xor [es:si],al
   546                                  ;     add si,4
   547                                  ;     cmp si,WH*4
   548                                  ;     jl .calc_cells
   549                                  
   550                                  ; ; hlt
   551                                  
   552                                  ; ;redraw cells
   553                                  ;     ; mov cx,4*WH
   554                                  ;     ; xor si,si
   555                                  ;     xor di,di
   556                                  ; .redraw_cells:
   557                                  ;     mov al,[es:di]
   558                                  ;     test al,128    ; alive?
   559                                  ;     jz .dead
   560                                  ; .alive:
   561                                  ;     test al,64
   562                                  ;     jz .survive
   563                                  ;     test al,32
   564                                  ;     jz .survive
   565                                  ; .die:
   566                                  ; .stay_dead:
   567                                  ;     xor al,al
   568                                  ;     jmp .copy
   569                                  ; .dead:
   570                                  ;     test al,64
   571                                  ;     jz .stay_dead
   572                                  ; .birth:
   573                                  ; .survive:
   574                                  ;     mov al,255
   575                                  ; .copy:
   576                                  
   577                                  ;     mov [es:di+0],al
   578                                  ;     mov [es:di+1],al
   579                                  ;     mov [es:di+2],al
   580                                  ;     mov [es:di+3],al
   581                                  ;     add di,4
   582                                  
   583                                      
   584                                  ;     cmp di,WH*4
   585                                  ;     jl .redraw_cells
   586                                  
   587                                  
   588                                  ;     jmp nextgen
   589                                  
   590                                     
   591                                  
   592                                      ; ret
   593                                  
   594                                      ;checkme
   595                                  ; dw -4,4,-W*4,W*4,-W*4-4,-W*4+4,W*4-4,W*4+4
   596                                  
   597                                  ;nb: db -1,1,-W,W,-W-1,-W+1,W-1,W+1
   598                                      
   599                                  
   600                                  ; initCells:
   601                                  ;     xor di,di
   602                                  ;     mov cx,WH   
   603                                  ;     mov bp,4
   604                                  ;     mov bx,10000  ; probability (signed)
   605                                  ; .1: mov ax,25173  ; LCG Multiplier
   606                                  ;     mul bp        ; DX:AX = LCG multiplier * seed
   607                                  ;     add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
   608                                  ;     mov bp,ax     ; Update seed = return value
   609                                  ;     cmp ax,bx
   610                                  ;     mov ax,255
   611                                  ;     jg .2
   612                                  ;     xor ax,ax
   613                                  ; .2: push cx
   614                                  ;     mov cx,4
   615                                  ;     rep stosb
   616                                  ;     pop cx
   617                                  ;     loop .1
   618                                  ;     ret
   619                                   
   620                                  
   621                                  ;  initCells2:
   622                                  ;     xor di,di
   623                                  ;     mov cx,WH   
   624                                  ;     mov bp,5
   625                                  ;     mov bx,10000  ; probability (signed)
   626                                  ; .1: mov ax,25173  ; LCG Multiplier
   627                                  ;     mul bp        ; DX:AX = LCG multiplier * seed
   628                                  ;     add ax,13849  ; Add LCG increment value ; Modulo 65536, AX = (multiplier*seed+increment) mod 65536
   629                                  ;     mov bp,ax     ; Update seed = return value
   630                                  ;     cmp ax,bx
   631                                  ;     mov ax,255
   632                                  ;     jg .2
   633                                  ;     xor ax,ax
   634                                  ; .2: push cx
   635                                  ;     mov cx,4
   636                                  ;     rep stosb
   637                                  ;     pop cx
   638                                  ;     loop .1
   639                                  ;     ret
   640                                  
   641                                  
   642                                  ; data:
   643                                  
   644                                  
   645                                  
   646                                  ; rnd: db 0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,255,0,0,255,0,0,0,0,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,255,0,0,0,0,0,255,255,0,255,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,255,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,255,255,255,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,0,255,0,0,0,0,255,0,255,0,0,0,255,0,0,255,0,255,0,255,0,0,0,255,0,0,255,0,255,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,0,0,0,0,255,0,0,0,0,255,0,0,255,0,0,255,0,0,255,0,0,255,255,0,0,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,255,0,255,255,0,0,0,0,0,255,0,0,0,255,255,255,0,255,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,255,0,0,0,0,0,255,0,0,0,0,255,0,0,0,0,255,0,0,0,255,0,0,255,0,0,0,0,255,0,255,0,0,0,255,0,0,255,0,0,0,0,0,0,0,255,0,0,255,255,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,255,0,0,0,255,0,0,0,0,0,0,255,0,0,255,0,...
   647                                  
   648                                  ; times 368640-($-$$) db 0   ;fill up floppy
   649                                  
