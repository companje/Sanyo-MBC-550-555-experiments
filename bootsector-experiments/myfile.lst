     1                                  ; tixy512.asm by Rick Companje, 2021-2022, MIT licence
     2                                  ; a tribute to Martin Kleppe's beautiful https://tixy.land
     3                                  ; as well as a tribute to the Sanyo MBC-550/555 PC (1984)
     4                                  ; which forced me to be creative with code since 1994.
     5                                  ;
     6                                  ; The Sanyo MBC-55x has a very limited ROM BIOS. After some basic
     7                                  ; hardware setup a RAM BIOS loaded from a floppy disk takes over.
     8                                  ; This means that we don't have any BIOS functions when running
     9                                  ; our own code from the bootsector.
    10                                  
    11                                  ; to run this code write the compiled code to the bootsector of a
    12                                  ; Sanyo MBC-55x floppy or use an emulator like the one in this repo.
    13                                  ;
    14                                  ; add your own visuals by adding your own functions to the function table.
    15                                  ;
    16                                  ; t = time
    17                                  ; i = index
    18                                  ; x = x-pos
    19                                  ; y = y-pos
    20                                  
    21                                  org 0
    22                                  cpu 8086
    23                                  RED equ 0xf000
    24                                  GREEN equ 0x0c00
    25                                  BLUE equ 0xf400
    26                                  top equ 9*320+10*8
    27                                  
    28                                  %define t dh
    29                                  %define i dl
    30                                  %define x bh
    31                                  %define y bl
    32                                  
    33                                  setup:
    34                                      
    35 00000000 B8000C                      mov ax,GREEN
    36 00000003 B90040                      mov cx,0x4000           ; 16k
    37 00000006 31FF                        xor di,di               ; di=0
    38 00000008 8EC0                        mov es,ax               ; es=GREEN
    39 0000000A F3AA                        rep stosb               ; clear red channel     
    40 0000000C B4F0                        mov ah,0xf0             ; ax=RED
    41 0000000E 8EC0                        mov es,ax               ; red + blue 
    42 00000010 31FF                        xor di,di               ; di=0
    43 00000012 B580                        mov ch,0x80             ; cx=32k
    44 00000014 F3AA                        rep stosb               ; clear blue and green channel
    45                                  
    46                                      ; generate 16x8 bitmap data for 16 sizes of dots.
    47                                      ; because the dots are symmetric we can save at least
    48                                      ; 97 bytes by mirroring the left-top nibble
    49 00000016 E87500                      call render_chars_once
    50                                  
    51 00000019 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
    52                                  draw:
    53 0000001B BF900B                      mov di,top              ; left top corner to center tixy
    54                                  dot:
    55 0000001E 88D0                        mov al,i                ; al=index
    56 00000020 30E4                        xor ah,ah               ; ah=0
    57 00000022 B110                        mov cl,16
    58 00000024 F6F1                        div cl                  ; calculate x and y from i
    59 00000026 93                          xchg ax,bx              ; bh=x, bl=y
    60                                  
    61 00000027 E83C00                      call fx1
    62                                  
    63                                  
    64                                  draw_char_color:
    65 0000002A 3C00                        cmp al,0
    66 0000002C 9C                          pushf
    67 0000002D 7D02                        jge .red
    68 0000002F F6D8                        neg al
    69                                    .red:
    70 00000031 BD00F0                      mov bp,RED
    71 00000034 E83600                      call draw_char
    72 00000037 9D                          popf
    73 00000038 7D02                        jge .green_blue
    74 0000003A 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
    75                                    .green_blue:
    76 0000003C BD000C                      mov bp,GREEN
    77 0000003F E82B00                      call draw_char
    78 00000042 BD00F4                      mov bp,BLUE
    79 00000045 E82500                      call draw_char
    80                                    .next:  
    81 00000048 FEC2                        inc i                   ; i++
    82 0000004A 83C708                      add di,8         
    83 0000004D 80FF0F                      cmp x,15
    84 00000050 7CCC                        jl dot                  ; next col
    85 00000052 81C70002                    add di,512       
    86 00000056 80FB0F                      cmp y,15
    87 00000059 7CC3                        jl dot                  ; next line
    88 0000005B FEC6                        inc t
    89 0000005D EBBC                        jmp draw                ; next frame
    90                                  
    91                                  fx_table: 
    92 0000005F [61][66]                    db fx0,fx1
    93                                  
    94                                  fx0:
    95 00000061 88F8                        mov al,x   
    96 00000063 00F0                        add al,t
    97 00000065 C3                          ret
    98                                  fx1:
    99 00000066 88F8                        mov al,x
   100 00000068 F6E3                        mul y
   101 0000006A 00F0                        add al,t
   102 0000006C C3                          ret
   103                                  
   104                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   105 0000006D 50                          push ax
   106 0000006E 57                          push di
   107                                  
   108 0000006F 55                          push bp
   109 00000070 07                          pop es                  ; es=bp
   110 00000071 0E                          push cs
   111 00000072 1F                          pop ds                  ;ds=cs
   112                                  
   113 00000073 B90400                      mov cx,4
   114 00000076 51                          push cx
   115 00000077 51                          push cx
   116                                  
   117 00000078 240F                        and al,15               ;limit al to 15
   118 0000007A 98                          cbw                     ;ah=0
   119                                     
   120 0000007B D2E0                        shl al,cl               ;al*=16
   121 0000007D 05[2D01]                    add ax,data
   122 00000080 96                          xchg si,ax              ;si = source address of rendered bitmap char
   123                                  
   124 00000081 59                          pop cx                  ;cx=4
   125 00000082 F3A5                        rep movsw
   126 00000084 81C73801                    add di,320-8
   127 00000088 59                          pop cx                  ;cx=4
   128 00000089 F3A5                        rep movsw
   129                                  
   130 0000008B 5F                          pop di                    
   131 0000008C 58                          pop ax
   132 0000008D C3                          ret
   133                                  
   134                                  render_chars_once:
   135 0000008E 0E                          push cs
   136 0000008F 1F                          pop ds                  ; ds:si in code segment
   137 00000090 0E                          push cs
   138 00000091 07                          pop es                  ; es:di in code segment
   139 00000092 BF[2D01]                    mov di,data             ; dest address of render data
   140 00000095 30FF                        xor bh,bh
   141                                    .render_char:
   142 00000097 30E4                        xor ah,ah
   143 00000099 88F8                        mov al,bh
   144 0000009B B104                        mov cl,4                ; cl is also used below
   145 0000009D F6E1                        mul cl
   146 0000009F 89C6                        mov si,ax
   147 000000A1 81C6[ED00]                  add si,.img
   148                                    .render_char_part:          ; input requirement at first time cl=4
   149 000000A5 AC                          lodsb                   ; use lodsb instead of movsb to keep a copy in al
   150 000000A6 AA                          stosb                   ; draw in left top nibble
   151 000000A7 53                          push bx                 ; save cur x and y
   152 000000A8 51                          push cx                 ; cur loop counter (4,3,2,1)
   153 000000A9 51                          push cx
   154 000000AA 5B                          pop bx                  ; bx = counter
   155 000000AB D1E3                        shl bx,1                ; bx *= 2
   156 000000AD 53                          push bx                 ; save counter*2 for right bottom
   157 000000AE 83FB02                      cmp bx,2                ; skip top line of left bottom nibble
   158 000000B1 7403                        je .flip_bits
   159 000000B3 884101                      mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   160                                    .flip_bits:                 ; flips all bits dropping highest bit
   161 000000B6 B108                        mov cl,8                ; 8 bits to flip
   162 000000B8 30E4                        xor ah,ah
   163                                    .flip_bit:
   164 000000BA BB0180                      mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   165 000000BD D2E3                        shl bl,cl
   166 000000BF 84D8                        test al,bl
   167 000000C1 7406                        jz .next_bit
   168 000000C3 49                          dec cx
   169 000000C4 D2EF                        shr bh,cl
   170 000000C6 08FC                        or ah,bh
   171 000000C8 41                          inc cx
   172                                    .next_bit:
   173 000000C9 E2EF                        loop .flip_bit          ; loop 8 bits for flipping
   174 000000CB 886503                      mov [di+3],ah           ; draw in right top nibble
   175 000000CE 5B                          pop bx                  ; bx = counter*2
   176 000000CF 83FB02                      cmp bx,2                ; skip top line of right bottom nibble
   177 000000D2 7403                        je .flip_done
   178 000000D4 886105                      mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   179                                    .flip_done:
   180 000000D7 59                          pop cx                  ; restore loop counter
   181 000000D8 5B                          pop bx                  ; restore x and y
   182 000000D9 E2CA                        loop .render_char_part
   183                                    .clear_bottom_line:
   184 000000DB 83C707                      add di,7
   185 000000DE 30C0                        xor al,al
   186 000000E0 AA                          stosb                   ; right bottom
   187 000000E1 83C703                      add di,3
   188 000000E4 AA                          stosb                   ; left bottom
   189                                    .next_char:
   190 000000E5 FEC7                        inc bh                  ; next char
   191 000000E7 80FF10                      cmp bh,16
   192 000000EA 7CAB                        jl .render_char
   193 000000EC C3                          ret
   194                                    .img:
   195 000000ED 00000000                    db 0,0,0,0                        ; empty
   196 000000F1 00000001                    db 0,0,0,1                        ; dot
   197 000000F5 00000003                    db 0,0,0,3                        ; minus
   198 000000F9 00000103                    db 0,0,1,3                        ; plus
   199 000000FD 00000307                    db 0,0,3,7                        ; hat
   200 00000101 00000707                    db 0,0,7,7                        ; block
   201 00000105 0001070F                    db 0,1,7,15                       ; star
   202 00000109 00030F0F                    db 0,3,15,15                      ; fat plus
   203 0000010D 000F1F3F                    db 0,15,31,63                     ;
   204 00000111 011F3F3F                    db 1,31,63,63                     ; spindle
   205 00000115 071F1F3F                    db 7,31,31,63                     ; robot head
   206 00000119 0F1F3F3F                    db 15,31,63,63                    ;
   207 0000011D 0F3F3F7F                    db 15,63,63,127                   ;
   208 00000121 1F3F7F7F                    db 31,63,127,127                  ;
   209 00000125 1F7FFFFF                    db 31,127,255,255                 ;
   210 00000129 3F7FFFFF                    db 63,127,255,255                 ; largest dot
   211                                  
   212                                  %assign num $-render_chars_once
   213                                  %warning render and img num bytes
   213          ******************       warning: render and img 159 bytes [-w+user]
   214                                  
   215                                  %assign num $-$$
   216                                  %warning total num
   216          ******************       warning: total 301 [-w+user]
   217                                  
   218                                  data:                                 ; destination for 128 bytes rendered bitmap data
