     1                                  ; tixy512.asm by Rick Companje, 2021-2022, MIT licence
     2                                  ; a tribute to Martin Kleppe's beautiful https://tixy.land
     3                                  ; as well as a tribute to the Sanyo MBC-550/555 PC (1984)
     4                                  ; which forced me to be creative with code since 1994.
     5                                  ;
     6                                  ; The Sanyo MBC-55x has a very limited ROM BIOS. After some 
     7                                  ; hardware setup by the ROM BIOS a RAM BIOS loaded from
     8                                  ; floppy takes over. This means that we don't have any BIOS
     9                                  ; functions when running our own code from the bootsector. 
    10                                  ;
    11                                  ; The Sanyo has no display mode 13 (even with the original
    12                                  ; RAM BIOS). It uses a 6845 video chip with three bitmapped 
    13                                  ; graphics planes and is organized as 50 rows by 80 columns.
    14                                  ; One column consists of 4 bytes. Then the next column starts.
    15                                  ; After 80 columns a new row starts. A bitmap of 16x8 pixels 
    16                                  ; is made up of 2 columns on row 1 and 2 columns on row 2...
    17                                  ;
    18                                  ; To run this code write the compiled code to the bootsector of a
    19                                  ; Sanyo MBC-55x floppy or use an emulator like the one written
    20                                  ; in Processing/Java in this repo.
    21                                  ;
    22                                  ; Add your own visuals by adding your own functions to the fx_table.
    23                                  ;
    24                                  ; t = time
    25                                  ; i = index
    26                                  ; x = x-pos
    27                                  ; y = y-pos
    28                                  
    29                                  org 0
    30                                  cpu 8086
    31                                  RED equ 0xf000
    32                                  GREEN equ 0x0c00
    33                                  BLUE equ 0xf400
    34                                  top equ 9*320+10*8
    35                                  effect_timeout equ 100
    36                                  num_effects equ fx0-fx_table
    37                                  start_effect equ 0 ; num_effects-1
    38                                  
    39                                  
    40                                  
    41                                  %define t dh
    42                                  %define i dl
    43                                  %define x bh
    44                                  %define y bl
    45                                  
    46                                  setup:
    47 00000000 B8000C                      mov ax,GREEN
    48 00000003 B90040                      mov cx,0x4000           ; 16k
    49 00000006 31FF                        xor di,di               ; di=0
    50 00000008 8EC0                        mov es,ax               ; es=GREEN
    51 0000000A F3AA                        rep stosb               ; clear red channel     
    52 0000000C B4F0                        mov ah,0xf0             ; ax=RED
    53 0000000E 8EC0                        mov es,ax               ; red + blue 
    54 00000010 31FF                        xor di,di               ; di=0
    55 00000012 B580                        mov ch,0x80             ; cx=32k
    56 00000014 F3AA                        rep stosb               ; clear blue and green channel
    57                                  
    58                                      ; generate 16x8 bitmap data for 16 sizes of dots.
    59                                      ; because the dots are symmetric we can save at least
    60                                      ; 97 bytes by mirroring the left-top nibble
    61 00000016 E8E700                      call render_chars_once
    62                                  
    63 00000019 BD0000                      mov bp,start_effect     ; start with effect nr.
    64                                  
    65 0000001C 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
    66                                  draw:
    67 0000001E BF900B                      mov di,top              ; left top corner to center tixy
    68                                  dot:
    69 00000021 88D0                        mov al,i                ; al=index
    70 00000023 30E4                        xor ah,ah               ; ah=0
    71 00000025 B110                        mov cl,16
    72 00000027 F6F1                        div cl                  ; calculate x and y from i
    73 00000029 93                          xchg ax,bx              ; bh=x, bl=y
    74                                  
    75 0000002A 55                          push bp
    76 0000002B 53                          push bx
    77 0000002C 87DD                        xchg bx,bp
    78 0000002E 8BAF[8300]                  mov bp,[bx+fx_table]
    79 00000032 81E5FF00                    and bp,0xff
    80                                      ; or bp,0x100
    81 00000036 5B                          pop bx
    82 00000037 FFD5                        call bp
    83 00000039 5D                          pop bp
    84                                  
    85                                      ; call fx1
    86                                  
    87                                  draw_char_color:
    88 0000003A 55                          push bp
    89 0000003B 3C00                        cmp al,0
    90 0000003D 9C                          pushf
    91 0000003E 7D02                        jge .red
    92 00000040 F6D8                        neg al
    93                                    .red:
    94 00000042 BD00F0                      mov bp,RED
    95 00000045 E89700                      call draw_char
    96 00000048 9D                          popf
    97 00000049 7D02                        jge .green_blue
    98 0000004B 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
    99                                    .green_blue:
   100 0000004D BD000C                      mov bp,GREEN
   101 00000050 E88C00                      call draw_char
   102 00000053 BD00F4                      mov bp,BLUE
   103 00000056 E88600                      call draw_char
   104 00000059 5D                          pop bp                  ; restore bp (used for effect function)
   105                                    .next:  
   106 0000005A FEC2                        inc i                   ; i++
   107 0000005C 83C708                      add di,8         
   108 0000005F 80FF0F                      cmp x,15
   109 00000062 7CBD                        jl dot                  ; next col
   110 00000064 81C70002                    add di,512       
   111 00000068 80FB0F                      cmp y,15
   112 0000006B 7CB4                        jl dot                  ; next line
   113 0000006D FEC6                        inc t
   114 0000006F 80FE64                      cmp t,effect_timeout
   115 00000072 7CAA                        jl draw                 ; next frame
   116 00000074 45                          inc bp                  ; inc effect
   117 00000075 30F6                        xor t,t                 ; reset time
   118 00000077 83FD09                      cmp bp,num_effects
   119 0000007A 7CA2                        jl draw                 ; next effect
   120 0000007C BD0000                      mov bp,start_effect     ; reset effect
   121 0000007F 30F6                        xor t,t                 ; reset time
   122 00000081 EB9B                        jmp draw
   123                                  
   124                                  fx_table: 
   125 00000083 [8C][91][98][AB]-           db fx0,fx1,fx2,fx3,fx4,fx5,fx6,fx7,fx8
   125 00000087 [B6][BB][C2][C7]-  
   125 0000008B [D4]               
   126                                  
   127                                  fx0:
   128 0000008C 88F8                        mov al,x   
   129 0000008E 00F0                        add al,t
   130 00000090 C3                          ret
   131                                  fx1:
   132 00000091 88F8                        mov al,x
   133 00000093 F6E3                        mul y
   134 00000095 00F0                        add al,t
   135 00000097 C3                          ret
   136                                  fx2:
   137 00000098 53                          push bx
   138 00000099 88F0                        mov al,t           ; t
   139 0000009B D0E8<rep 2h>                times 2 shr al,1    ; /=2
   140 0000009F 240F                        and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
   141 000000A1 D0E0<rep 2h>                times 2 shl al,1    ; *=4
   142 000000A5 BB[9F01]                    mov bx,sin
   143 000000A8 D7                          xlat                ; extract sin value
   144 000000A9 5B                          pop bx
   145 000000AA C3                          ret
   146                                  fx3:
   147 000000AB 88D0                        mov al,i
   148 000000AD D0E8<rep 4h>                times 4 shr al,1
   149 000000B5 C3                          ret
   150                                  fx4:
   151 000000B6 88D8                        mov al,y
   152 000000B8 2C07                        sub al,7
   153 000000BA C3                          ret
   154                                  fx5:
   155 000000BB 88D8                        mov al,y
   156 000000BD 2C03                        sub al,3
   157 000000BF 00F0                        add al,t
   158 000000C1 C3                          ret
   159                                  fx6: ;y-t*4
   160 000000C2 88D8                        mov al,y
   161 000000C4 28F8                        sub al,x
   162 000000C6 C3                          ret
   163                                  fx7:
   164 000000C7 88D8                        mov al,y
   165 000000C9 2C06                        sub al,6
   166 000000CB 86E0                        xchg ah,al
   167 000000CD 88F8                        mov al,x
   168 000000CF 2C06                        sub al,6
   169 000000D1 F6E4                        mul ah
   170 000000D3 C3                          ret
   171                                  fx8: ;x and y
   172 000000D4 88F8                        mov al,x
   173 000000D6 20D8                        and al,y
   174 000000D8 A802                        test al,2
   175 000000DA 7402                        je .done
   176 000000DC F6D8                        neg al
   177                                   .done:
   178 000000DE C3                          ret
   179                                  
   180                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   181 000000DF 50                          push ax
   182 000000E0 57                          push di
   183                                  
   184 000000E1 55                          push bp
   185 000000E2 07                          pop es                  ; es=bp
   186 000000E3 0E                          push cs
   187 000000E4 1F                          pop ds                  ;ds=cs
   188                                  
   189 000000E5 B90400                      mov cx,4
   190 000000E8 51                          push cx
   191 000000E9 51                          push cx
   192                                  
   193 000000EA 240F                        and al,15               ;limit al to 15
   194 000000EC 98                          cbw                     ;ah=0
   195                                     
   196 000000ED D2E0                        shl al,cl               ;al*=16
   197 000000EF 05[DF01]                    add ax,data
   198 000000F2 96                          xchg si,ax              ;si = source address of rendered bitmap char
   199                                  
   200 000000F3 59                          pop cx                  ;cx=4
   201 000000F4 F3A5                        rep movsw
   202 000000F6 81C73801                    add di,320-8
   203 000000FA 59                          pop cx                  ;cx=4
   204 000000FB F3A5                        rep movsw
   205                                  
   206 000000FD 5F                          pop di                    
   207 000000FE 58                          pop ax
   208 000000FF C3                          ret
   209                                  
   210                                  render_chars_once:
   211 00000100 0E                          push cs
   212 00000101 1F                          pop ds                  ; ds:si in code segment
   213 00000102 0E                          push cs
   214 00000103 07                          pop es                  ; es:di in code segment
   215 00000104 BF[DF01]                    mov di,data             ; dest address of render data
   216 00000107 30FF                        xor bh,bh
   217                                    .render_char:
   218 00000109 30E4                        xor ah,ah
   219 0000010B 88F8                        mov al,bh
   220 0000010D B104                        mov cl,4                ; cl is also used below
   221 0000010F F6E1                        mul cl
   222 00000111 89C6                        mov si,ax
   223 00000113 81C6[5F01]                  add si,.img
   224                                    .render_char_part:          ; input requirement at first time cl=4
   225 00000117 AC                          lodsb                   ; use lodsb instead of movsb to keep a copy in al
   226 00000118 AA                          stosb                   ; draw in left top nibble
   227 00000119 53                          push bx                 ; save cur x and y
   228 0000011A 51                          push cx                 ; cur loop counter (4,3,2,1)
   229 0000011B 51                          push cx
   230 0000011C 5B                          pop bx                  ; bx = counter
   231 0000011D D1E3                        shl bx,1                ; bx *= 2
   232 0000011F 53                          push bx                 ; save counter*2 for right bottom
   233 00000120 83FB02                      cmp bx,2                ; skip top line of left bottom nibble
   234 00000123 7403                        je .flip_bits
   235 00000125 884101                      mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   236                                    .flip_bits:                 ; flips all bits dropping highest bit
   237 00000128 B108                        mov cl,8                ; 8 bits to flip
   238 0000012A 30E4                        xor ah,ah
   239                                    .flip_bit:
   240 0000012C BB0180                      mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   241 0000012F D2E3                        shl bl,cl
   242 00000131 84D8                        test al,bl
   243 00000133 7406                        jz .next_bit
   244 00000135 49                          dec cx
   245 00000136 D2EF                        shr bh,cl
   246 00000138 08FC                        or ah,bh
   247 0000013A 41                          inc cx
   248                                    .next_bit:
   249 0000013B E2EF                        loop .flip_bit          ; loop 8 bits for flipping
   250 0000013D 886503                      mov [di+3],ah           ; draw in right top nibble
   251 00000140 5B                          pop bx                  ; bx = counter*2
   252 00000141 83FB02                      cmp bx,2                ; skip top line of right bottom nibble
   253 00000144 7403                        je .flip_done
   254 00000146 886105                      mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   255                                    .flip_done:
   256 00000149 59                          pop cx                  ; restore loop counter
   257 0000014A 5B                          pop bx                  ; restore x and y
   258 0000014B E2CA                        loop .render_char_part
   259                                    .clear_bottom_line:
   260 0000014D 83C707                      add di,7
   261 00000150 30C0                        xor al,al
   262 00000152 AA                          stosb                   ; right bottom
   263 00000153 83C703                      add di,3
   264 00000156 AA                          stosb                   ; left bottom
   265                                    .next_char:
   266 00000157 FEC7                        inc bh                  ; next char
   267 00000159 80FF10                      cmp bh,16
   268 0000015C 7CAB                        jl .render_char
   269 0000015E C3                          ret
   270                                    .img:
   271 0000015F 00000000                    db 0,0,0,0                        ; empty
   272 00000163 00000001                    db 0,0,0,1                        ; dot
   273 00000167 00000003                    db 0,0,0,3                        ; minus
   274 0000016B 00000103                    db 0,0,1,3                        ; plus
   275 0000016F 00000307                    db 0,0,3,7                        ; hat
   276 00000173 00000707                    db 0,0,7,7                        ; block
   277 00000177 0001070F                    db 0,1,7,15                       ; star
   278 0000017B 00030F0F                    db 0,3,15,15                      ; fat plus
   279 0000017F 000F1F3F                    db 0,15,31,63                     ;
   280 00000183 011F3F3F                    db 1,31,63,63                     ; spindle
   281 00000187 071F1F3F                    db 7,31,31,63                     ; robot head
   282 0000018B 0F1F3F3F                    db 15,31,63,63                    ;
   283 0000018F 0F3F3F7F                    db 15,63,63,127                   ;
   284 00000193 1F3F7F7F                    db 31,63,127,127                  ;
   285 00000197 1F7FFFFF                    db 31,127,255,255                 ;
   286 0000019B 3F7FFFFF                    db 63,127,255,255                 ; largest dot
   287                                  
   288                                  sin:
   289 0000019F 000103040607090A0B-         db 0x00,0x01,0x03,0x04,0x06,0x07,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0e,0x0f,0x0f,0x0f
   289 000001A8 0C0D0E0E0F0F0F     
   290 000001AF 0F0F0F0F0E0E0D0C0B-         db 0x0f,0x0f,0x0f,0x0f,0x0e,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x07,0x06,0x04,0x03,0x01
   290 000001B8 0A090706040301     
   291 000001BF 00FFFDFCFAF9F7F6F5-         db 0x00,0xff,0xfd,0xfc,0xfa,0xf9,0xf7,0xf6,0xf5,0xf4,0xf3,0xf2,0xf2,0xf1,0xf1,0xf1
   291 000001C8 F4F3F2F2F1F1F1     
   292 000001CF F1F1F1F1F2F2F3F4F5-         db 0xf1,0xf1,0xf1,0xf1,0xf2,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf9,0xfa,0xfc,0xfd,0xff
   292 000001D8 F6F7F9FAFCFDFF     
   293                                  
   294                                  %assign num $-render_chars_once
   295                                  %warning render and img num bytes
   295          ******************       warning: render and img 223 bytes [-w+user]
   296                                  
   297                                  ; %assign num_eff fx0-fx_table
   298                                  ; %warning num_eff
   299                                  
   300                                  %assign num $-$$
   301                                  %warning total num
   301          ******************       warning: total 479 [-w+user]
   302                                  
   303                                  data:                                 ; destination for 128 bytes rendered bitmap data
