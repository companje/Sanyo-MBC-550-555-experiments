     1                                  ; tixy512.asm by Rick Companje, 2021-2022, MIT licence
     2                                  ; a tribute to Martin Kleppe's https://tixy.land
     3                                  ; as well as a tribute to the Sanyo MBC-550/555 PC (1984)
     4                                  ; which forced me to be creative with code since 1994.
     5                                  ;
     6                                  ; The Sanyo MBC-55x has a very limited ROM BIOS. After some basic
     7                                  ; hardware setup a RAM BIOS loaded from a floppy disk takes over.
     8                                  ; This means that we don't have any BIOS functions when running
     9                                  ; our own code from the bootsector.
    10                                  
    11                                  ; to run this code write the compiled code to the bootsector of a
    12                                  ; Sanyo MBC-55x floppy or use an emulator like the one in this repo.
    13                                  ;
    14                                  ; add your own visuals by adding your own functions to the function table.
    15                                  ;
    16                                  ; t = time
    17                                  ; i = index
    18                                  ; x = x-pos
    19                                  ; y = y-pos
    20                                  
    21                                  org 0
    22                                  cpu 8086
    23                                  RED equ 0xf000
    24                                  GREEN equ 0x0c00
    25                                  BLUE equ 0xf400
    26                                  top equ 9*320+10*8
    27                                  
    28                                  %define t dh
    29                                  %define i dl
    30                                  %define x bh
    31                                  %define y bl
    32                                  
    33                                  setup:
    34                                  
    35                                      ;clear the screen
    36 00000000 B8000C                      mov ax,GREEN
    37 00000003 B90040                      mov cx,0x4000           ; 16k
    38 00000006 31FF                        xor di,di
    39 00000008 8EC0                        mov es,ax               ; es=GREEN
    40 0000000A F3AA                        rep stosb                        
    41 0000000C B4F0                        mov ah,0xf0             ; ax=RED
    42 0000000E 8EC0                        mov es,ax               ; red + blue 
    43 00000010 31FF                        xor di,di
    44 00000012 B580                        mov ch,0x80             ; cx=32k
    45 00000014 F3AA                        rep stosb
    46                                  
    47                                      ; generate 16x8 bitmap data for 16 sizes of dots.
    48                                      ; because the dots are symmetric we can save 97 bytes
    49                                      ; by mirroring the left-top nibble
    50 00000016 E86800                      call render_chars_once
    51                                  
    52 00000019 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
    53                                  draw:
    54 0000001B BF900B                      mov di,top              ; left top corner to center tixy
    55                                  dot:
    56 0000001E 88D0                        mov al,i                ; al=index
    57 00000020 30E4                        xor ah,ah               ; ah=0
    58 00000022 B110                        mov cl,16
    59 00000024 F6F1                        div cl                  ; calculate x and y from i
    60 00000026 93                          xchg ax,bx              ; bh=x, bl=y
    61                                  
    62                                  func:
    63 00000027 88F8                        mov al,x   
    64 00000029 00F0                        add al,t
    65                                  
    66                                  draw_char_color:
    67 0000002B 3C00                        cmp al,0
    68 0000002D 9C                          pushf
    69 0000002E 7D02                        jge .red
    70 00000030 F6D8                        neg al
    71                                  .red:
    72 00000032 BD00F0                      mov bp,RED
    73 00000035 E82800                      call draw_char
    74 00000038 9D                          popf
    75 00000039 7D02                        jge .green_blue
    76 0000003B 30C0                        xor al,al ; if negative then just red, so clear (al=0) green and blue
    77                                  .green_blue:
    78 0000003D BD000C                      mov bp,GREEN
    79 00000040 E81D00                      call draw_char
    80 00000043 BD00F4                      mov bp,BLUE
    81 00000046 E81700                      call draw_char
    82                                      
    83 00000049 FEC2                        inc i            ; i++
    84 0000004B 83C708                      add di,8         
    85 0000004E 80FF0F                      cmp x,15
    86 00000051 7CCB                        jl dot           ; next col
    87 00000053 81C70002                    add di,512       
    88 00000057 80FB0F                      cmp y,15
    89 0000005A 7CC2                        jl dot           ; next line
    90 0000005C FEC6                        inc t
    91 0000005E EBBB                        jmp draw         ; next frame
    92                                  
    93                                  draw_char:                  ;es:di=vram (not increasing), al=char 0..15, destroys cx
    94 00000060 50                          push ax
    95                                      ; push cx
    96 00000061 57                          push di
    97                                  
    98 00000062 55                          push bp
    99 00000063 07                          pop es                  ;es=bp
   100 00000064 0E                          push cs
   101 00000065 1F                          pop ds                  ;ds=cs
   102                                  
   103 00000066 B90400                      mov cx,4
   104 00000069 51                          push cx
   105 0000006A 51                          push cx
   106                                  
   107 0000006B 240F                        and al,15               ;limit al
   108 0000006D 98                          cbw                     ;ah=0
   109                                     
   110 0000006E D2E0                        shl al,cl               ;al*=16
   111 00000070 05[2001]                    add ax,data
   112 00000073 96                          xchg si,ax
   113                                  
   114 00000074 59                          pop cx                  ;cx=4
   115 00000075 F3A5                        rep movsw
   116 00000077 81C73801                    add di,320-8
   117 0000007B 59                          pop cx                  ;cx=4
   118 0000007C F3A5                        rep movsw
   119                                  
   120 0000007E 5F                          pop di                    
   121                                      ; pop cx                  
   122 0000007F 58                          pop ax
   123 00000080 C3                          ret
   124                                  
   125                                  render_chars_once:
   126 00000081 0E                          push cs
   127 00000082 1F                          pop ds                  ; ds:si in code segment
   128 00000083 0E                          push cs
   129 00000084 07                          pop es                  ; es:di in code segment
   130 00000085 BF[2001]                    mov di,data             ; dest address of render data
   131 00000088 30FF                        xor bh,bh
   132                                  .render_char:
   133 0000008A 30E4                        xor ah,ah
   134 0000008C 88F8                        mov al,bh
   135 0000008E B104                        mov cl,4                ; cl is also used below
   136 00000090 F6E1                        mul cl
   137 00000092 89C6                        mov si,ax
   138 00000094 81C6[E000]                  add si,img
   139                                  .render_char_part:          ; input requirement at first time cl=4
   140 00000098 AC                          lodsb                   ; use lodsb instead of movsb to keep a copy in al
   141 00000099 AA                          stosb                   ; draw in left top nibble
   142 0000009A 53                          push bx                 ; save cur x and y
   143 0000009B 51                          push cx                 ; cur loop counter (4,3,2,1)
   144 0000009C 51                          push cx
   145 0000009D 5B                          pop bx                  ; bx = counter
   146 0000009E D1E3                        shl bx,1                ; bx *= 2
   147 000000A0 53                          push bx                 ; save counter*2 for right bottom
   148 000000A1 83FB02                      cmp bx,2                ; skip top line of left bottom nibble
   149 000000A4 7403                        je .flip_bits
   150 000000A6 884101                      mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   151                                  .flip_bits:                 ; flips all bits dropping highest bit
   152 000000A9 B108                        mov cl,8                ; 8 bits to flip
   153 000000AB 30E4                        xor ah,ah
   154                                  .flip_bit:
   155 000000AD BB0180                      mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   156 000000B0 D2E3                        shl bl,cl
   157 000000B2 84D8                        test al,bl
   158 000000B4 7406                        jz .next_bit
   159 000000B6 49                          dec cx
   160 000000B7 D2EF                        shr bh,cl
   161 000000B9 08FC                        or ah,bh
   162 000000BB 41                          inc cx
   163                                  .next_bit:
   164 000000BC E2EF                        loop .flip_bit          ; loop 8 bits for flipping
   165 000000BE 886503                      mov [di+3],ah           ; draw in right top nibble
   166 000000C1 5B                          pop bx                  ; bx = counter*2
   167 000000C2 83FB02                      cmp bx,2                ; skip top line of right bottom nibble
   168 000000C5 7403                        je .flip_done
   169 000000C7 886105                      mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   170                                  .flip_done:
   171 000000CA 59                          pop cx                  ; restore loop counter
   172 000000CB 5B                          pop bx                  ; restore x and y
   173 000000CC E2CA                        loop .render_char_part
   174                                  .clear_bottom_line:
   175 000000CE 83C707                      add di,7
   176 000000D1 30C0                        xor al,al
   177 000000D3 AA                          stosb                   ; right bottom
   178 000000D4 83C703                      add di,3
   179 000000D7 AA                          stosb                   ; left bottom
   180                                  .next_char:
   181 000000D8 FEC7                        inc bh                  ; next char
   182 000000DA 80FF10                      cmp bh,16
   183 000000DD 7CAB                        jl .render_char
   184 000000DF C3                          ret
   185                                  
   186                                  img:
   187 000000E0 00000000                    db 0, 0, 0, 0                        ; empty
   188 000000E4 00000001                    db 0, 0, 0, 1                        ; dot
   189 000000E8 00000003                    db 0, 0, 0, 3                        ; minus
   190 000000EC 00000103                    db 0, 0, 1, 3                        ; plus
   191 000000F0 00000307                    db 0, 0, 3, 7                        ; hat
   192 000000F4 00000707                    db 0, 0, 7, 7                        ; block
   193 000000F8 0001070F                    db 0, 1, 7, 15                       ; star
   194 000000FC 00030F0F                    db 0, 3, 15, 15                      ; fat plus
   195 00000100 000F1F3F                    db 0, 15, 31, 63                   
   196 00000104 011F3F3F                    db 1, 31, 63, 63                     ; spindle
   197 00000108 071F1F3F                    db 7, 31, 31, 63                     ; robot head
   198 0000010C 0F1F3F3F                    db 15, 31, 63, 63
   199 00000110 0F3F3F7F                    db 15, 63, 63, 127
   200 00000114 1F3F7F7F                    db 31, 63, 127, 127
   201 00000118 1F7FFFFF                    db 31, 127, 255, 255
   202 0000011C 3F7FFFFF                    db 63, 127, 255, 255
   203                                  
   204                                  %assign num $-render_chars_once
   205                                  %warning render and img num bytes
   205          ******************       warning: render and img 159 bytes [-w+user]
   206                                  
   207                                  %assign num $-$$
   208                                  %warning total num
   208          ******************       warning: total 288 [-w+user]
   209                                  
   210                                  data:
