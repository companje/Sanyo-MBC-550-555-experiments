     1                                  ; tixy512.asm by Rick Companje, 2021-2022, MIT licence
     2                                  ; a tribute to Martin Kleppe's beautiful https://tixy.land
     3                                  ; as well as a tribute to the Sanyo MBC-550/555 PC (1984)
     4                                  ; which forced me to be creative with code since 1994.
     5                                  ;
     6                                  ; The Sanyo MBC-55x has a very limited ROM BIOS. After some 
     7                                  ; hardware setup by the ROM BIOS a RAM BIOS loaded from
     8                                  ; floppy takes over. This means that we don't have any BIOS
     9                                  ; functions when running our own code from the bootsector. 
    10                                  ;
    11                                  ; The Sanyo has no display mode 13 (even with the original
    12                                  ; RAM BIOS). It uses a 6845 video chip with three bitmapped 
    13                                  ; graphics planes and is organized as 50 rows by 80 columns.
    14                                  ; One column consists of 4 bytes. Then the next column starts.
    15                                  ; After 80 columns a new row starts. A bitmap of 16x8 pixels 
    16                                  ; is made up of 2 columns on row 1 and 2 columns on row 2...
    17                                  ;
    18                                  ; To run this code write the compiled code to the bootsector of a
    19                                  ; Sanyo MBC-55x floppy or use an emulator like the one written
    20                                  ; in Processing/Java in this repo.
    21                                  ;
    22                                  ; Add your own visuals by adding your own functions to the fx_table.
    23                                  ;
    24                                  ; t = time
    25                                  ; i = index
    26                                  ; x = x-pos
    27                                  ; y = y-pos
    28                                  
    29                                  org 0
    30                                  cpu 8086
    31                                  RED equ 0xf000
    32                                  GREEN equ 0x0c00
    33                                  BLUE equ 0xf400
    34                                  top equ 9*320+10*8
    35                                  effect_timeout equ 20
    36                                  num_effects equ fx0-fx_table
    37                                  start_effect equ 0 ; num_effects-1
    38                                  
    39                                  %define t dh
    40                                  %define i dl
    41                                  %define x bh
    42                                  %define y bl
    43                                  
    44 00000000 E98D00                      jmp setup
    45                                  
    46 00000003 53616E796F312E32            db 'Sanyo1.2'
    47 0000000B 0002020100027000            db 0x00,0x02,0x02,0x01,0x00,0x02,0x70,0x00,
    48 00000013 D002FD0200090002            db 0xd0,0x02,0xfd,0x02,0x00,0x09,0x00,0x02,
    49 0000001B 00000000001C00FF            db 0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0xff,
    50 00000023 202020202020205361-         db '       Sanyo MBC-550/555        ',0x00
    50 0000002C 6E796F204D42432D35-
    50 00000035 35302F353535202020-
    50 0000003E 202020202000       
    51                                  
    52                                  fx_table: 
    53 00000044 [4D][52][59][5C]-           db fx0,fx1,fx2,fx3,fx4,fx5,fx6,fx7,fx8
    53 00000048 [67][6C][73][78]-  
    53 0000004C [85]               
    54                                  
    55                                  fx0:
    56 0000004D 88F8                        mov al,x   
    57 0000004F 00F0                        add al,t
    58 00000051 C3                          ret
    59                                  fx1:
    60 00000052 88F8                        mov al,x
    61 00000054 F6E3                        mul y
    62 00000056 00F0                        add al,t
    63 00000058 C3                          ret
    64                                  fx2:
    65 00000059 88D0                        mov al,i
    66                                      ; push bx
    67                                      ; mov al,t           ; t
    68                                      ; times 2 shr al,1    ; /=2
    69                                      ; and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
    70                                      ; times 2 shl al,1    ; *=4
    71                                      ; mov bx,sin
    72                                      ; xlat                ; extract sin value
    73                                      ; pop bx
    74 0000005B C3                          ret
    75                                  fx3:
    76 0000005C 88D0                        mov al,i
    77 0000005E D0E8<rep 4h>                times 4 shr al,1
    78 00000066 C3                          ret
    79                                  fx4:
    80 00000067 88D8                        mov al,y
    81 00000069 2C07                        sub al,7
    82 0000006B C3                          ret
    83                                  fx5:
    84 0000006C 88D8                        mov al,y
    85 0000006E 2C03                        sub al,3
    86 00000070 00F0                        add al,t
    87 00000072 C3                          ret
    88                                  fx6: ;y-t*4
    89 00000073 88D8                        mov al,y
    90 00000075 28F8                        sub al,x
    91 00000077 C3                          ret
    92                                  fx7:
    93 00000078 88D8                        mov al,y
    94 0000007A 2C06                        sub al,6
    95 0000007C 86E0                        xchg ah,al
    96 0000007E 88F8                        mov al,x
    97 00000080 2C06                        sub al,6
    98 00000082 F6E4                        mul ah
    99 00000084 C3                          ret
   100                                  fx8: ;x and y
   101 00000085 88F8                        mov al,x
   102 00000087 20D8                        and al,y
   103 00000089 A802                        test al,2
   104 0000008B 7402                        je .done
   105 0000008D F6D8                        neg al
   106                                    .done:
   107 0000008F C3                          ret
   108                                      
   109                                  setup:
   110                                      ;set video chip from 72 to 80 columns
   111 00000090 BE[4C01]                    mov si,profile25x80
   112 00000093 BB0000                      mov bx,0
   113 00000096 FC                          cld
   114                                  .lp:
   115 00000097 88D8                        mov al,bl
   116 00000099 E630                        out 0x30,al            ;CRTC address port
   117 0000009B 2E8A00                      mov al,[cs: bx+si+0]
   118 0000009E E632                        out 0x32,al            ;CRTC data port
   119 000000A0 43                          inc bx
   120 000000A1 80FB0A                      cmp bl,10
   121 000000A4 7CF1                        jl .lp
   122                                      
   123                                      ;clear the screen
   124 000000A6 B8000C                      mov ax,GREEN
   125 000000A9 B90040                      mov cx,0x4000           ; 16k
   126 000000AC 31FF                        xor di,di               ; di=0
   127 000000AE 8EC0                        mov es,ax               ; es=GREEN
   128 000000B0 F3AA                        rep stosb               ; clear red channel     
   129 000000B2 B4F0                        mov ah,0xf0             ; ax=RED
   130 000000B4 8EC0                        mov es,ax               ; red + blue 
   131 000000B6 31FF                        xor di,di               ; di=0
   132 000000B8 B580                        mov ch,0x80             ; cx=32k
   133 000000BA F3AA                        rep stosb               ; clear blue and green channel
   134                                  
   135                                      ; generate 16x8 bitmap data for 16 sizes of dots.
   136                                      ; because the dots are symmetric we can save at least
   137                                      ; 97 bytes by mirroring the left-top nibble
   138 000000BC E89700                      call render_chars_once
   139                                  
   140 000000BF BD0000                      mov bp,0                ; start with effect nr.
   141                                  
   142 000000C2 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
   143                                  draw:
   144 000000C4 BF900B                      mov di,top              ; left top corner to center tixy
   145                                  dot:
   146 000000C7 88D0                        mov al,i                ; al=index
   147 000000C9 30E4                        xor ah,ah               ; ah=0
   148 000000CB B110                        mov cl,16
   149 000000CD F6F1                        div cl                  ; calculate x and y from i
   150 000000CF 93                          xchg ax,bx              ; bh=x, bl=y
   151                                  
   152 000000D0 55                          push bp
   153 000000D1 53                          push bx
   154 000000D2 87DD                        xchg bx,bp
   155 000000D4 8BAF[4400]                  mov bp,[bx+fx_table]
   156 000000D8 81E5FF00                    and bp,0xff
   157 000000DC 5B                          pop bx
   158 000000DD FFD5                        call bp
   159 000000DF 5D                          pop bp
   160                                  
   161                                  draw_char_color:
   162 000000E0 55                          push bp
   163 000000E1 3C00                        cmp al,0
   164 000000E3 9C                          pushf
   165 000000E4 7D02                        jge .red
   166 000000E6 F6D8                        neg al
   167                                    .red:
   168 000000E8 BD00F0                      mov bp,RED
   169 000000EB E83D00                      call draw_char
   170 000000EE 9D                          popf
   171 000000EF 7D02                        jge .green_blue
   172 000000F1 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
   173                                    .green_blue:
   174 000000F3 BD000C                      mov bp,GREEN
   175 000000F6 E83200                      call draw_char
   176 000000F9 BD00F4                      mov bp,BLUE
   177 000000FC E82C00                      call draw_char
   178 000000FF 5D                          pop bp                  ; restore bp (used for effect function)
   179                                    .next:  
   180 00000100 FEC2                        inc i                   ; i++
   181 00000102 83C708                      add di,8         
   182 00000105 80FF0F                      cmp x,15
   183 00000108 7CBD                        jl dot                  ; next col
   184 0000010A 81C70002                    add di,512       
   185 0000010E 80FB0F                      cmp y,15
   186 00000111 7CB4                        jl dot                  ; next line
   187 00000113 FEC6                        inc t
   188 00000115 80FE14                      cmp t,effect_timeout
   189 00000118 7CAA                        jl draw                 ; next frame
   190 0000011A 45                          inc bp                  ; inc effect
   191 0000011B 30F6                        xor t,t                 ; reset time
   192 0000011D 83FD08                      cmp bp,8
   193 00000120 7CA2                        jl draw                 ; next effect
   194 00000122 BD0000                      mov bp,0                ; reset effect
   195 00000125 30F6                        xor t,t                 ; reset time
   196 00000127 30D2                        xor i,i
   197 00000129 EB99                        jmp draw
   198                                  
   199                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   200 0000012B 50                          push ax
   201 0000012C 57                          push di
   202                                  
   203 0000012D 55                          push bp
   204 0000012E 07                          pop es                  ; es=bp
   205 0000012F 0E                          push cs
   206 00000130 1F                          pop ds                  ;ds=cs
   207                                  
   208 00000131 B90400                      mov cx,4
   209 00000134 51                          push cx
   210 00000135 51                          push cx
   211                                  
   212 00000136 240F                        and al,15               ;limit al to 15
   213 00000138 98                          cbw                     ;ah=0
   214                                     
   215 00000139 D2E0                        shl al,cl               ;al*=16
   216 0000013B 05[F501]                    add ax,data
   217 0000013E 96                          xchg si,ax              ;si = source address of rendered bitmap char
   218                                  
   219 0000013F 59                          pop cx                  ;cx=4
   220 00000140 F3A5                        rep movsw
   221 00000142 81C73801                    add di,320-8
   222 00000146 59                          pop cx                  ;cx=4
   223 00000147 F3A5                        rep movsw
   224                                  
   225 00000149 5F                          pop di                    
   226 0000014A 58                          pop ax
   227 0000014B C3                          ret
   228                                  
   229                                  profile25x80:
   230 0000014C 70                          db 112  ;0  Horizontal Total
   231 0000014D 50                          db 80   ;1  Horizontal Displayed
   232 0000014E 58                          db 88   ;2  Horizontal Sync Position
   233 0000014F 4A                          db 0x4a ;3  Horizontal and Vertical Sync Widths
   234 00000150 41                          db 65   ;4  Vertical Total
   235 00000151 00                          db 0    ;5  Vertical Total Adjust
   236 00000152 32                          db 50   ;6  Vertical Displayed
   237 00000153 38                          db 56   ;7  Vertical Sync position
   238 00000154 00                          db 0    ;8  Interlace and Skew
   239 00000155 03                          db 3    ;9  Maximum Raster Address
   240                                  
   241                                  render_chars_once:
   242 00000156 0E                          push cs
   243 00000157 1F                          pop ds                  ; ds:si in code segment
   244 00000158 0E                          push cs
   245 00000159 07                          pop es                  ; es:di in code segment
   246 0000015A BF[F501]                    mov di,data             ; dest address of render data
   247 0000015D 30FF                        xor bh,bh
   248                                    .render_char:
   249 0000015F 30E4                        xor ah,ah
   250 00000161 88F8                        mov al,bh
   251 00000163 B104                        mov cl,4                ; cl is also used below
   252 00000165 F6E1                        mul cl
   253 00000167 89C6                        mov si,ax
   254 00000169 81C6[B501]                  add si,.img
   255                                    .render_char_part:          ; input requirement at first time cl=4
   256 0000016D AC                          lodsb                   ; use lodsb instead of movsb to keep a copy in al
   257 0000016E AA                          stosb                   ; draw in left top nibble
   258 0000016F 53                          push bx                 ; save cur x and y
   259 00000170 51                          push cx                 ; cur loop counter (4,3,2,1)
   260 00000171 51                          push cx
   261 00000172 5B                          pop bx                  ; bx = counter
   262 00000173 D1E3                        shl bx,1                ; bx *= 2
   263 00000175 53                          push bx                 ; save counter*2 for right bottom
   264 00000176 83FB02                      cmp bx,2                ; skip top line of left bottom nibble
   265 00000179 7403                        je .flip_bits
   266 0000017B 884101                      mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   267                                    .flip_bits:                 ; flips all bits dropping highest bit
   268 0000017E B108                        mov cl,8                ; 8 bits to flip
   269 00000180 30E4                        xor ah,ah
   270                                    .flip_bit:
   271 00000182 BB0180                      mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   272 00000185 D2E3                        shl bl,cl
   273 00000187 84D8                        test al,bl
   274 00000189 7406                        jz .next_bit
   275 0000018B 49                          dec cx
   276 0000018C D2EF                        shr bh,cl
   277 0000018E 08FC                        or ah,bh
   278 00000190 41                          inc cx
   279                                    .next_bit:
   280 00000191 E2EF                        loop .flip_bit          ; loop 8 bits for flipping
   281 00000193 886503                      mov [di+3],ah           ; draw in right top nibble
   282 00000196 5B                          pop bx                  ; bx = counter*2
   283 00000197 83FB02                      cmp bx,2                ; skip top line of right bottom nibble
   284 0000019A 7403                        je .flip_done
   285 0000019C 886105                      mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   286                                    .flip_done:
   287 0000019F 59                          pop cx                  ; restore loop counter
   288 000001A0 5B                          pop bx                  ; restore x and y
   289 000001A1 E2CA                        loop .render_char_part
   290                                    .clear_bottom_line:
   291 000001A3 83C707                      add di,7
   292 000001A6 30C0                        xor al,al
   293 000001A8 AA                          stosb                   ; right bottom
   294 000001A9 83C703                      add di,3
   295 000001AC AA                          stosb                   ; left bottom
   296                                    .next_char:
   297 000001AD FEC7                        inc bh                  ; next char
   298 000001AF 80FF10                      cmp bh,16
   299 000001B2 7CAB                        jl .render_char
   300 000001B4 C3                          ret
   301                                    .img:
   302 000001B5 00000000                    db 0,0,0,0                        ; empty
   303 000001B9 00000001                    db 0,0,0,1                        ; dot
   304 000001BD 00000003                    db 0,0,0,3                        ; minus
   305 000001C1 00000103                    db 0,0,1,3                        ; plus
   306 000001C5 00000307                    db 0,0,3,7                        ; hat
   307 000001C9 00000707                    db 0,0,7,7                        ; block
   308 000001CD 0001070F                    db 0,1,7,15                       ; star
   309 000001D1 00030F0F                    db 0,3,15,15                      ; fat plus
   310 000001D5 000F1F3F                    db 0,15,31,63                     ;
   311 000001D9 011F3F3F                    db 1,31,63,63                     ; spindle
   312 000001DD 071F1F3F                    db 7,31,31,63                     ; robot head
   313 000001E1 0F1F3F3F                    db 15,31,63,63                    ;
   314 000001E5 0F3F3F7F                    db 15,63,63,127                   ;
   315 000001E9 1F3F7F7F                    db 31,63,127,127                  ;
   316 000001ED 1F7FFFFF                    db 31,127,255,255                 ;
   317 000001F1 3F7FFFFF                    db 63,127,255,255                 ; largest dot
   318                                  
   319                                  %assign num $-render_chars_once
   320                                  %warning render and img num bytes
   320          ******************       warning: render and img 159 bytes [-w+user]
   321                                  
   322                                  ; sin:
   323                                  ;     db 0x00,0x01,0x03,0x04,0x06,0x07,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0e,0x0f,0x0f,0x0f
   324                                  ;     db 0x0f,0x0f,0x0f,0x0f,0x0e,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x07,0x06,0x04,0x03,0x01
   325                                  ;     db 0x00,0xff,0xfd,0xfc,0xfa,0xf9,0xf7,0xf6,0xf5,0xf4,0xf3,0xf2,0xf2,0xf1,0xf1,0xf1
   326                                  ;     db 0xf1,0xf1,0xf1,0xf1,0xf2,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf9,0xfa,0xfc,0xfd,0xff
   327                                  
   328                                  
   329                                  %assign num $-$$
   330                                  %warning total num
   330          ******************       warning: total 501 [-w+user]
   331                                  
   332                                  data:                                 ; destination for 128 bytes rendered bitmap data
   333                                  
   334 000001F5 <bin 59E0Bh>            incbin "Sanyo-MS-DOS-2.11-minimal.img",($-$$)  ; include default disk image skipping first 512 bytes
