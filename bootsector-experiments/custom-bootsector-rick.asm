; Rick Companje, March 29th, 2022
cpu 8086
org 0x0

;     jmp code

;     db 'Sanyo1.2'
;     db 0x00,0x02,0x02,0x01,0x00,0x02,0x70,0x00,
;     db 0xd0,0x02,0xfd,0x02,0x00,0x09,0x00,0x02,
;     db 0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0xff,
;     db '       Sanyo MBC-550/555        ',0x00

cols equ 80
rows equ 25
lines equ 200
; startpos equ 4*24 + 4*cols*8

; %define t ch  ; dit werkt op zich

; setProfile:
;     mov bx,0
;     cld
; .lp:
;     mov al,bl
;     out 0x30,al            ;CRTC address port
;     mov al,[cs: bx+si+0]
;     out 0x32,al            ;CRTC data port
;     inc bx
;     cmp bl,10
;     jl .lp
;     ret

; profile25x80:
;     db 112  ;0  Horizontal Total
;     db 80   ;1  Horizontal Displayed
;     db 88   ;2  Horizontal Sync Position
;     db 0x4a ;3  Horizontal and Vertical Sync Widths
;     db 65   ;4  Vertical Total
;     db 0    ;5  Vertical Total Adjust
;     db 50   ;6  Vertical Displayed
;     db 56   ;7  Vertical Sync position
;     db 0    ;8  Interlace and Skew
;     db 3    ;9  Maximum Raster Address


code:
    call clearScreen
    ; hlt
    mov bl,10
    jmp code

clearScreen:
    cld
    ; mov ax,0x5555  ; bitmap pattern
    ; mov ax,0x8080  ; bitmap pattern
    ; mov bp,0xf000  ; red + blue
    ; mov es,bp
    ; mov di,0
    ; mov cx,32000-100 ; 0x4000
    ; rep stosb

    mov al,0x55
    mov bp,0xf000  ; red
    mov es,bp
    mov di,0
    mov cx,cols*lines
    rep stosb

    mov al,0x55
    mov bp,0x0c00  ; green
    mov es,bp
    mov di,0
    mov cx,cols*lines
    rep stosb

    mov al,0x55
    mov bp,0xf400  ; blue
    mov es,bp
    mov di,0
    mov cx,cols*lines
    rep stosb

    ret


; code:  
;     ; call setDisplayMode80x25
;     ; mov si,profile25x80
;     ; call setProfile
;     call clearScreen

; ; _loop:
; ;     jmp _loop

;     ; push cs
;     ; pop ds              ; data=code segment

; draw:
;     mov ch,0            ; t
; top:
;     mov cl,0            ; i
;     mov di,startpos
;     mov dh,0            ; y           
; repeatY:
;     mov dl,0            ; x
; repeatX:
;     ; push bx
;     ; cs call fx0
;     ; mov al,dh
    
;     ; pop bx

;     ; mov al,15
;     ; add al,ch
;     ; push bx
;     ; mov bx,buf
;     ; mov al,cl
;     ; times 4 shr al,1
;     ; sub al,7
;     ; cs xlat
;     ; pop bx

;     ; mov al,dh           ; y
;     ; times 3 shr al,1    ; /=8
;     ; ; add al,ch           ; +=t
;     ; and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
;     ; ; times 2 shl al,1    ; *=4
;     ; mov bx,sin
;     ; cs xlat                ; extract sin value
;     mov al,cl
;     times 4 shr al,1    ; /=16
;     add al,ch

    

;     call draw_dot_color
;     inc dl              ; x
;     inc cl              ; i
;     add di,8
;     cmp dl,16
;     jl repeatX
;     mov dl,0
;     add di,(cols-16)*8    ; skip remaining cols
;     inc dh
;     cmp dh,16
;     jl repeatY
;     inc ch              ; t
;     jmp top



; fx0:
;     mov al,ch           ; t
;     times 2 shr al,1    ; /=2
;     and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
;     times 2 shl al,1    ; *=4
;     mov bx,sin
;     cs xlat                ; extract sin value
;     ret

; draw_dot_color:
;     mov bx,0xf000    ; red
;     call draw_dot
;     or al,al
;     jns .draw_blue_green  ; check sign bit for negative number
;     mov al,0         ; clear dot on blue and green channel
; .draw_blue_green:
;     neg al
;     mov bx,0xf400    ; blue
;     call draw_dot
;     mov bx,0x0c00    ; green
;     call draw_dot
;     ret

; draw_dot:
;     push di
;     push ax
;     push cx
;     mov ah,al    
;     or al,al
;     jns .positive
;     neg al
; .positive:
;     mov es,bx    ; vram
;     and al,15    ; limit to 15 (4 bits)
;     mov cl,8
;     mul cl    ; ax=al*8
;     mov si,ax
;     add si,img
;     times 4 cs movsw
;     add di,(4*cols)-8
;     mov si,ax
;     add si,img+128
;     times 4 cs movsw
;     pop cx
;     pop ax
;     pop di
;     ret

; table: db fx0

; sin:
;     db 0x00,0x01,0x03,0x04,0x06,0x07,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0E,0x0F,0x0F,0x0F
;     db 0x0F,0x0F,0x0F,0x0F,0x0E,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x07,0x06,0x04,0x03,0x01
;     db 0x00,0xFF,0xFD,0xFC,0xFA,0xF9,0xF7,0xF6,0xF5,0xF4,0xF3,0xF2,0xF2,0xF1,0xF1,0xF1
;     db 0xF1,0xF1,0xF1,0xF1,0xF2,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF9,0xFA,0xFC,0xFD,0xFF

; img:
;     db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80
;     db 0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xC0
;     db 0x00,0x00,0x00,0x03,0x00,0x00,0x80,0xE0,0x00,0x00,0x00,0x03,0x00,0x00,0x80,0xE0
;     db 0x00,0x00,0x03,0x07,0x00,0x00,0xE0,0xF0,0x00,0x00,0x03,0x07,0x00,0x00,0xE0,0xF0
;     db 0x00,0x00,0x07,0x0F,0x00,0x80,0xF0,0xF8,0x00,0x00,0x07,0x0F,0x00,0x80,0xF0,0xF8
;     db 0x00,0x03,0x0F,0x1F,0x00,0xE0,0xF8,0xFC,0x00,0x07,0x1F,0x1F,0x00,0xF0,0xFC,0xFC
;     db 0x00,0x0F,0x1F,0x3F,0x80,0xF8,0xFC,0xFE,0x00,0x0F,0x3F,0x3F,0x80,0xF8,0xFE,0xFE
;     db 0x07,0x1F,0x3F,0x7F,0xF0,0xFC,0xFE,0xFF,0x07,0x3F,0x7F,0x7F,0xF0,0xFE,0xFF,0xFF
;     db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;     db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
;     db 0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00
;     db 0x03,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0xE0,0x00,0x00,0x00
;     db 0x07,0x00,0x00,0x00,0xF0,0x80,0x00,0x00,0x07,0x00,0x00,0x00,0xF0,0x80,0x00,0x00
;     db 0x0F,0x03,0x00,0x00,0xF8,0xE0,0x00,0x00,0x1F,0x07,0x00,0x00,0xFC,0xF0,0x00,0x00
;     db 0x1F,0x0F,0x00,0x00,0xFC,0xF8,0x80,0x00,0x3F,0x0F,0x00,0x00,0xFE,0xF8,0x80,0x00
;     db 0x3F,0x1F,0x07,0x00,0xFE,0xFC,0xF0,0x00,0x7F,0x3F,0x07,0x00,0xFF,0xFE,0xF0,0x00

; buf:
;     times 16*16 db 5

; %include "lib.asm"
; incbin "Sanyo-MS-DOS-2.11-minimal.img",($-$$)  ; include default disk image skipping first 512 bytes

