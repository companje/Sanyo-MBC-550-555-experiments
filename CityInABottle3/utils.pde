
void calc_xy_and_ray() {
  //calc xy
  ax = di;
  cl = 2;
  ax >>= cl;
  bl = (byte)COLS;
  x = (byte)(ax%bl);
  y = (byte)(ax/bl);
  
  //calc x-ray 
  al = x;
  cl ++; //inc cx to 3
  al *= cl; // *=3
  al -= SCALE;
  a = al;
    
  //calc y-ray
  al = y;
  cl --; //dec cx
  al <<= cl; // *=4
  cl = SCALE; //cl = tmp
  cl -= al; //flip vertical
  b = cl;
  
}



void movsw() {
  try {
    mem[es+(di++)] = mem[ds+si++];
    mem[es+(di++)] = mem[ds+si++];
  } 
  catch (Exception e) {
  }
}

int[] get_primes() {
  int p[]={1, 7, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59, 61, 67, 71, 73, 79, 83, 89, 91, 97, 101, 103, 107, 109, 113, 119, 127, 131, 133, 137, 139, 149, 151, 157, 161, 163, 167, 169, 173, 179, 181, 191, 193, 197, 199, 203, 211, 217, 221, 223, 227, 229, 233, 239, 241, 247, 251, 257, 259, 263, 269, 271, 277, 281, 283, 287, 289, 293, 299, 301, 307, 311, 313, 317, 323, 329, 331, 337, 343, 347, 349, 353, 359, 361, 367, 371, 373, 377, 379, 383, 389, 391, 397, 401, 403, 409, 413, 419, 421, 427, 431, 433, 437, 439, 443, 449, 457, 461, 463, 467, 469, 479, 481, 487, 491, 493, 497, 499, 503, 509, 511, 521, 523, 527, 529, 533, 541, 547, 551, 553, 557, 559, 563, 569, 571, 577, 581, 587, 589, 593, 599, 601, 607, 611, 613, 617, 619, 623, 629, 631, 637, 641, 643, 647, 653, 659, 661, 667, 673, 677, 679, 683, 689, 691, 697, 701, 703, 707, 709, 713, 719, 721, 727, 731, 733, 739, 743, 749, 751, 757, 761, 763, 767, 769, 773, 779, 787, 791, 793, 797, 799, 809, 811, 817, 821, 823, 827, 829, 833, 839, 841, 851, 853, 857, 859, 863, 871, 877, 881, 883, 887, 889, 893, 899, 901, 907, 911, 917, 919, 923, 929, 931, 937, 941, 943, 947, 949, 953, 959, 961, 967, 971, 973, 977, 983, 989, 991, 997, 1003, 1007, 1009, 1013, 1019, 1021, 1027, 1031, 1033, 1037, 1039, 1043, 1049, 1051, 1057, 1061, 1063, 1069, 1073, 1079, 1081, 1087, 1091, 1093, 1097, 1099, 1103, 1109, 1117, 1121, 1123, 1127, 1129, 1139, 1141, 1147, 1151, 1153, 1157, 1159, 1163, 1169, 1171, 1181, 1183, 1187, 1189, 1193, 1201, 1207, 1211, 1213, 1217, 1219, 1223, 1229, 1231, 1237, 1241, 1247, 1249, 1253, 1259, 1261, 1267, 1271, 1273, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1313, 1319, 1321, 1327, 1333, 1337, 1339, 1343, 1349, 1351, 1357, 1361, 1363, 1367, 1369, 1373, 1379, 1381, 1387, 1391, 1393, 1399, 1403, 1409, 1411, 1417, 1421, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1457, 1459, 1469, 1471, 1477, 1481, 1483, 1487, 1489, 1493, 1499, 1501, 1511, 1513, 1517, 1519, 1523, 1531, 1537, 1541, 1543, 1547, 1549, 1553, 1559, 1561, 1567, 1571, 1577, 1579, 1583, 1589, 1591, 1597, 1601, 1603, 1607, 1609, 1613, 1619, 1621, 1627, 1631, 1633, 1637, 1643, 1649, 1651, 1657, 1663, 1667, 1669, 1673, 1679, 1681, 1687, 1691, 1693, 1697, 1699, 1703, 1709, 1711, 1717, 1721, 1723, 1729, 1733, 1739, 1741, 1747, 1751, 1753, 1757, 1759, 1763, 1769, 1777, 1781, 1783, 1787, 1789, 1799, 1801, 1807, 1811, 1813, 1817, 1819, 1823, 1829, 1831, 1841, 1843, 1847, 1849, 1853, 1861, 1867, 1871, 1873, 1877, 1879, 1883, 1889, 1891, 1897, 1901, 1907, 1909, 1913, 1919, 1921, 1927, 1931, 1933, 1937, 1939, 1943, 1949, 1951, 1957, 1961, 1963, 1967, 1973, 1979, 1981, 1987, 1993, 1997, 1999, 2003, 2009, 2011, 2017, 2021, 2023, 2027, 2029, 2033, 2039, 2041, 2047, 2051, 2053, 2059, 2063, 2069, 2071, 2077, 2081, 2083, 2087, 2089, 2093, 2099, 2107, 2111, 2113, 2117, 2119, 2129, 2131, 2137, 2141, 2143, 2147, 2149, 2153, 2159, 2161, 2171, 2173, 2177, 2179, 2183, 2191, 2197, 2201, 2203, 2207, 2209, 2213, 2219, 2221, 2227, 2231, 2237, 2239, 2243, 2249, 2251, 2257, 2261, 2263, 2267, 2269, 2273, 2279, 2281, 2287, 2291, 2293, 2297, 2303, 2309, 2311, 2317, 2323, 2327, 2329, 2333, 2339, 2341, 2347, 2351, 2353, 2357, 2359, 2363, 2369, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2401, 2407, 2411, 2413, 2417, 2419, 2423, 2429, 2437, 2441, 2443, 2447, 2449, 2459, 2461, 2467, 2471, 2473, 2477, 2479, 2483, 2489, 2491, 2501, 2503, 2507, 2509, 2513, 2521, 2527, 2531, 2533, 2537, 2539, 2543, 2549, 2551, 2557, 2561, 2567, 2569, 2573, 2579, 2581, 2587, 2591, 2593, 2597, 2599, 2603, 2609, 2611, 2617, 2621, 2623, 2627, 2633, 2639, 2641, 2647, 2653, 2657, 2659, 2663, 2669, 2671, 2677, 2681, 2683, 2687, 2689, 2693, 2699, 2701, 2707, 2711, 2713, 2719, 2723, 2729, 2731, 2737, 2741, 2743, 2747, 2749, 2753, 2759, 2767, 2771, 2773, 2777, 2779, 2789, 2791, 2797, 2801, 2803, 2807, 2809, 2813, 2819, 2821, 2831, 2833, 2837, 2839, 2843, 2851, 2857, 2861, 2863, 2867, 2869, 2873, 2879, 2881, 2887, 2891, 2897, 2899, 2903, 2909, 2911, 2917, 2921, 2923, 2927, 2929, 2933, 2939, 2941, 2947, 2951, 2953, 2957, 2963, 2969, 2971, 2977, 2983, 2987, 2989, 2993, 2999, 3001, 3007, 3011, 3013, 3017, 3019, 3023, 3029, 3031, 3037, 3041, 3043, 3049, 3053, 3059, 3061, 3067, 3071, 3073, 3077, 3079, 3083, 3089, 3097, 3101, 3103, 3107, 3109, 3119, 3121, 3127, 3131, 3133, 3137, 3139, 3143, 3149, 3151, 3161, 3163, 3167, 3169, 3173, 3181, 3187, 3191, 3193, 3197, 3199, 3203, 3209, 3211, 3217, 3221, 3227, 3229, 3233, 3239, 3241, 3247, 3251, 3253, 3257, 3259, 3263, 3269, 3271, 3277, 3281, 3283, 3287, 3293, 3299, 3301, 3307, 3313, 3317, 3319, 3323, 3329, 3331, 3337, 3341, 3343, 3347, 3349, 3353, 3359, 3361, 3367, 3371, 3373, 3379, 3383, 3389, 3391, 3397, 3401, 3403, 3407, 3409, 3413, 3419, 3427, 3431, 3433, 3437, 3439, 3449, 3451, 3457, 3461, 3463, 3467, 3469, 3473, 3479, 3481, 3491, 3493, 3497, 3499, 3503, 3511, 3517, 3521, 3523, 3527, 3529, 3533, 3539, 3541, 3547, 3551, 3557, 3559, 3563, 3569, 3571, 3577, 3581, 3583, 3587, 3589, 3593, 3599, 3601, 3607, 3611, 3613, 3617, 3623, 3629, 3631, 3637, 3643, 3647, 3649, 3653, 3659, 3661, 3667, 3671, 3673, 3677, 3679, 3683, 3689, 3691, 3697, 3701, 3703, 3709, 3713, 3719, 3721, 3727, 3731, 3733, 3737, 3739, 3743, 3749, 3757, 3761, 3763, 3767, 3769, 3779, 3781, 3787, 3791, 3793, 3797, 3799, 3803, 3809, 3811, 3821, 3823, 3827, 3829, 3833, 3841, 3847, 3851, 3853, 3857, 3859, 3863, 3869, 3871, 3877, 3881, 3887, 3889, 3893, 3899, 3901, 3907, 3911, 3913, 3917, 3919, 3923, 3929, 3931, 3937, 3941, 3943, 3947, 3953, 3959, 3961, 3967, 3973, 3977, 3979, 3983, 3989, 3991, 3997, 4001, 4003, 4007, 4009, 4013, 4019, 4021, 4027, 4031, 4033, 4039, 4043, 4049, 4051, 4057, 4061, 4063, 4067, 4069, 4073, 4079, 4087, 4091, 4093, 4097, 4099, 4109, 4111, 4117, 4121, 4123, 4127, 4129, 4133, 4139, 4141, 4151, 4153, 4157, 4159, 4163, 4171, 4177, 4181, 4183, 4187, 4189, 4193, 4199, 4201, 4207, 4211, 4217, 4219, 4223, 4229, 4231, 4237, 4241, 4243, 4247, 4249, 4253, 4259, 4261, 4267, 4271, 4273, 4277, 4283, 4289, 4291, 4297, 4303, 4307, 4309, 4313, 4319, 4321, 4327, 4331, 4333, 4337, 4339, 4343, 4349, 4351, 4357, 4361, 4363, 4369, 4373, 4379, 4381, 4387, 4391, 4393, 4397, 4399, 4403, 4409, 4417, 4421, 4423, 4427, 4429, 4439, 4441, 4447, 4451, 4453, 4457, 4459, 4463, 4469, 4471, 4481, 4483, 4487, 4489, 4493, 4501, 4507, 4511, 4513, 4517, 4519, 4523, 4529, 4531, 4537, 4541, 4547, 4549, 4553, 4559, 4561, 4567, 4571, 4573, 4577, 4579, 4583, 4589, 4591, 4597, 4601, 4603, 4607, 4613, 4619, 4621, 4627, 4633, 4637, 4639, 4643, 4649, 4651, 4657, 4661, 4663, 4667, 4669, 4673, 4679, 4681, 4687, 4691, 4693, 4699, 4703, 4709, 4711, 4717, 4721, 4723, 4727, 4729, 4733, 4739, 4747, 4751, 4753, 4757, 4759, 4769, 4771, 4777, 4781, 4783, 4787, 4789, 4793, 4799, 4801, 4811, 4813, 4817, 4819, 4823, 4831, 4837, 4841, 4843, 4847, 4849, 4853, 4859, 4861, 4867, 4871, 4877, 4879, 4883, 4889, 4891, 4897, 4901, 4903, 4907, 4909, 4913, 4919, 4921, 4927, 4931, 4933, 4937, 4943, 4949};
  return p;
}

void loadBin(String filename, int addr) {
  byte b[] = loadBytes(filename);
  for (int i=0; i<b.length; i++) {
    mem[addr+i] = b[i];
  }
}

void setImageFromMemory(PImage img) {
  img.loadPixels();
  for (int y=0, bit=128, j=0, w=img.width, h=img.height; y<h; y++) {
    for (int x=0; x<w; x++, bit=128>>(x%8), j++) {
      int i = int(y/4)*(w/2)+(y%4)+int(x/8)*4;
      int r = (mem[R+i] & bit)>0 ? 255 : 0;
      int g = (mem[G+i] & bit)>0 ? 255 : 0;
      int b = (mem[B+i] & bit)>0 ? 255 : 0;
      img.pixels[j] = color(r, g, b);
    }
  }
  img.updatePixels();
}

//void saveGreen(String filename) {
//  byte b[] = new byte[ROWS*COLS*4];
//  for (int i=0; i<b.length; i++) {
//    b[i] = (byte)(cells[i] >> 3); // /=8
//  }
//  saveBytes(filename, b);
//}

//void cellsToMem() {
//  for (int y=0, i=0; y<ROWS; y++) {
//    for (int x=0; x<COLS; x++, i++) {
//      int si = (int)cells[i];
//      setCellGreen(y, x, si);
//    }
//  }
//}

//void saveCells(String filename) { 
//  byte b[] = new byte[ROWS*COLS]; 
//  for (int i=0; i<b.length; i++) {
//    b[i] = (byte)cells[i];
//  }
//  saveBytes(filename,b);
//}

//void loadCells(String filename) { 
//  byte b[] = loadBytes(filename); 
//  for (int i=0; i<b.length; i++) {
//    cells[i] = b[i];
//  }
//}

//void saveCells(String filename) { //16 colors per cell. 2 cells per byte
//  byte[] b = new byte[(ROWS * COLS) / 2];
//  for (int i = 0; i < b.length; i++) {
//    int v1 = cells[i * 2] ;
//    int v2 = cells[i * 2 + 1] ;
//    b[i] = (byte)((v1 << 4) | (v2 & 0x0F));
//  }
//  saveBytes(filename, b);
//}

//void saveChangeMask(String filename) { //1 bit per cell, (8 cells per byte)
////dit zou goed kunnen werken. nog niet echt getest.
//  byte[] b = new byte[(ROWS * COLS) / 8];
//  for (int i = 0; i < b.length; i++) {
//    for (int j=7; j>0; j--) {
//      int v = (cells[i * 2 + (7-j)] != prev_cells[i * 2 + (7-j)]) ? 1 : 0; 
//      b[i] |= (byte)(v << j);
//    }
//  }
//  saveBytes(filename, b);
//}

//void loadCells(String filename) {
//  byte[] b = loadBytes(filename);
//  for (int i = 0; i < b.length; i++) {
//    int v = b[i] & 0xFF;
//    cells[i * 2] = (v >> 4) ;
//    cells[i * 2 + 1] = (v & 0x0F) ;
//  }
//}


////32 kleuren dus 8 frames (256/32=8) per (80x50) 4000 bytes of anders: 80*50/8=500 bytes per frame 4bits per cell


////void saveCells2(String filename) { 
////  byte b[] = new byte[ROWS*COLS]; 
////  for (int i=0; i<b.length; i++) {
////    b[i] = (byte)cells[i];
////  }
////  saveBytes(filename,b);
////}

////void loadCells2(String filename) { 
////  byte b[] = loadBytes(filename); 
////  for (int i=0; i<b.length; i++) {
////    cells[i] = b[i];
////  }
////}



//void setCell(int row, int col, int si, int channel) {
//  //b = constrain(b/32, 0, 7); //deze regel kan uit bij 255 resolutie
//  for (int i=0; i<4; i++) {
//    if (fontOffset+si+i>=0) {
//      mem[channel+row*COLS*4 + col*4 + i] = mem[fontOffset+si+i];
//    } else println("error setCell", fontOffset+si+i);
//  }
//}

//void setCellRed(int row, int col, int si) {
//  setCell(row, col, si, R);
//}

//void setCellGreen(int row, int col, int si) {
//  setCell(row, col, si, G);
//}
//void setCellBlue(int row, int col, int si) {
//  setCell(row, col, si, B);
//}

//void copyCells(int[] from, int[] to) {
//  for (int i=0; i<to.length; i++) {
//    to[i] = from[i];
//  }
//}

//int countChangedCells(int[] a, int[] b) {
//  int c=0;
//  for (int i=0; i<a.length; i++) {
//    if (a[i] != b[i]) c++;
//  }
//  return c;
//}

//ArrayList<Integer> getChangedIndexes(int[] a, int[] b) {
//  ArrayList<Integer> r = new ArrayList();
//  for (int i=0; i<a.length; i++) {
//    if (a[i] != b[i]) r.add(i);
//  }
//  return r;
//}
