     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4                              <1> NUM_SECTORS equ 5          ; number of sectors to read
     5                              <1> BAR_WIDTH equ 30
     6                              <1> COLS  equ 72
     7                              <1> ROWS  equ 50
     8                              <1> LINES equ 200
     9                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    10                              <1> RED   equ 0xf000
    11                              <1> GREEN equ 0x1c00
    12                              <1> BLUE  equ 0xf400
    13                              <1> DST   equ 0x38              ; absolute addres: 32592
    14                              <1> XD    equ 4
    15                              <1> YD    equ COLS*XD
    16                              <1> Color.R equ 0b100
    17                              <1> Color.G equ 0b010
    18                              <1> Color.B equ 0b001
    19                              <1> Color.W equ 0b111
    20                              <1> Color.C equ 0b011
    21                              <1> Color.M equ 0b101
    22                              <1> Color.Y equ 0b110
    23                              <1> Color.K equ 0b000
    24                              <1> 
    25                              <1> boot:
    26 00000000 FA                  <1>   cli
    27 00000001 FC                  <1>   cld
    28 00000002 E8B600              <1>   call clear_green          
    29 00000005 B005                <1>   mov al, 5
    30 00000007 E610                <1>   out 10h, al               ; select address 0x1c000 as green video page
    31 00000009 B8001C              <1>   mov ax,GREEN      
    32 0000000C 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
    33 0000000E B83800              <1>   mov ax,DST                
    34 00000011 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
    35 00000013 BF0000              <1>   mov di,0                  ;
    36 00000016 B200                <1>   mov dl,0                  ; track=0
    37 00000018 B601                <1>   mov dh,1                  ; sector=1
    38 0000001A B90500              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
    39 0000001D EB0B                <1>   jmp move_head
    40                              <1> 
    41                              <1> ; ───────────────────────────────────────────────────────────────────────────
    42                              <1> 
    43                              <1> next_sector:
    44 0000001F FEC6                <1>   inc dh                    ; sector++
    45 00000021 80FE0A              <1>   cmp dh,10
    46 00000024 7218                <1>   jb read_sector            ; if (dh<9) read_sector
    47 00000026 B601                <1>   mov dh,1
    48 00000028 FEC2                <1>   inc dl                    ; else track++ ; sector=1
    49                              <1> 
    50                              <1> move_head:
    51 0000002A 88D0                <1>   mov al,dl
    52 0000002C E60E                <1>   out 0Eh,al               ; set track number
    53 0000002E B018                <1>   mov al,18h     
    54 00000030 E608                <1>   out 8,al                 ; seek track, load head
    55 00000032 B000                <1>   mov al,0
    56 00000034 E61C                <1>   out 1Ch,al               ; set desired drive/side
    57 00000036 D40A                <1>   aam
    58                              <1> 
    59                              <1> head_moving:
    60 00000038 E408                <1>   in al,8
    61 0000003A A801                <1>   test al,1
    62 0000003C 75FA                <1>   jnz head_moving
    63                              <1> 
    64                              <1> read_sector:
    65 0000003E 88F0                <1>   mov al,dh
    66 00000040 E60C                <1>   out 0Ch,al                ; sector number
    67 00000042 B702                <1>   mov bh,2                  ; 00000010b
    68 00000044 B396                <1>   mov bl,96h                ; 10010110b
    69 00000046 B400                <1>   mov ah,0
    70 00000048 B080                <1>   mov al,80h
    71 0000004A E608                <1>   out 8,al                  ; read sector
    72 0000004C D40A<rep 4h>        <1>   times 4 aam               ; wait
    73                              <1> 
    74                              <1> check_status_1:
    75 00000054 E408                <1>   in al,8                   ; read status
    76 00000056 D0F8                <1>   sar al,1                  ; status/=2
    77 00000058 731F                <1>   jnb check_status_3
    78 0000005A 75F8                <1>   jnz check_status_1
    79                              <1> 
    80                              <1> wait_for_data:
    81 0000005C E408                <1>   in al,8                   ; read status
    82 0000005E 20D8                <1>   and al,bl                 ; 96h
    83 00000060 74FA                <1>   jz wait_for_data
    84                              <1> 
    85                              <1> store_byte_1:
    86 00000062 E40E                <1>   in al,0Eh
    87 00000064 AA                  <1>   stosb
    88                              <1> 
    89                              <1> check_status_2:
    90 00000065 E408                <1>   in al,8                   ; read status
    91 00000067 48                  <1>   dec ax                    ; status--
    92 00000068 74FB                <1>   jz check_status_2         ; if (status==0) repeat
    93 0000006A 38F8                <1>   cmp al, bh                ; bh=2
    94 0000006C 750B                <1>   jnz check_status_3        ; if (status==1) 
    95                              <1> 
    96                              <1> store_byte_2:
    97 0000006E E40E                <1>   in al,0Eh  
    98 00000070 AA                  <1>   stosb
    99                              <1> 
   100                              <1> check_status_4:
   101 00000071 E408                <1>   in al,8                   ; read status
   102 00000073 38F8                <1>   cmp al, bh                ; bh=2
   103 00000075 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   104 00000077 EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   105                              <1> 
   106                              <1> ; ───────────────────────────────────────────────────────────────────────────
   107                              <1> 
   108                              <1> check_status_3:
   109 00000079 E408                <1>   in al, 8                  ; read status
   110 0000007B A81C                <1>   test al, 1Ch              ; 00011100
   111 0000007D 7402                <1>   jz while_sectors
   112 0000007F EBBD                <1>   jmp read_sector
   113                              <1> 
   114                              <1> ; ───────────────────────────────────────────────────────────────────────────
   115                              <1> 
   116                              <1> while_sectors:
   117 00000081 E80F00              <1>   call progress_bar
   118 00000084 E299                <1>   loop next_sector
   119                              <1> 
   120                              <1> done_reading:
   121 00000086 0E                  <1>   push cs
   122 00000087 17                  <1>   pop ss
   123 00000088 BC0000              <1>   mov sp,0
   124 0000008B E82D00              <1>   call clear_green
   125 0000008E 0E                  <1>   push cs
   126 0000008F 1F                  <1>   pop ds
   127 00000090 E98B01              <1>   jmp setup
   128                              <1> 
   129                              <1> ; ───────────────────────────────────────────────────────────────────────────
   130                              <1> 
   131                              <1> progress_bar:
   132                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   133 00000093 52                  <1>   push dx
   134 00000094 53                  <1>   push bx
   135 00000095 31D2                <1>   xor dx,dx
   136 00000097 B81E00              <1>   mov ax,BAR_WIDTH
   137 0000009A BB0500              <1>   mov bx,NUM_SECTORS    
   138 0000009D F7E1                <1>   mul cx
   139 0000009F F7F3                <1>   div bx
   140 000000A1 5B                  <1>   pop bx
   141 000000A2 5A                  <1>   pop dx
   142 000000A3 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   143 000000A5 D1E6                <1>   shl si,1                  ; *=2
   144 000000A7 D1E6                <1>   shl si,1                  ; *=2  
   145 000000A9 BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   146 000000AC 29F5                <1>   sub bp,si
   147 000000AE 3EC64600FF          <1>   mov byte [ds:bp],-1
   148 000000B3 C3                  <1>   ret
   149                              <1> 
   150                              <1> clear_red:
   151 000000B4 B800F0              <1>   mov ax,RED
   152 000000B7 E81900              <1>   call clear_channel
   153 000000BA C3                  <1>   ret
   154                              <1> 
   155                              <1> clear_green:
   156 000000BB B8001C              <1>   mov ax,GREEN
   157 000000BE E81200              <1>   call clear_channel
   158 000000C1 C3                  <1>   ret
   159                              <1> 
   160                              <1> clear_blue:
   161 000000C2 B800F4              <1>   mov ax,BLUE
   162 000000C5 E80B00              <1>   call clear_channel
   163 000000C8 C3                  <1>   ret
   164                              <1> 
   165                              <1> clear_screen:
   166 000000C9 E8E8FF              <1>   call clear_red
   167 000000CC E8ECFF              <1>   call clear_green
   168 000000CF E8F0FF              <1>   call clear_blue
   169 000000D2 C3                  <1>   ret
   170                              <1> 
   171                              <1> clear_channel:
   172 000000D3 8EC0                <1>   mov es,ax
   173 000000D5 B9201C              <1>   mov cx,COLS*ROWS*2
   174 000000D8 31FF                <1>   xor di,di
   175 000000DA 31C0                <1>   xor ax,ax
   176 000000DC F3AB                <1>   rep stosw         ; clear screen
   177 000000DE C3                  <1>   ret
   178                              <1> 
   179                              <1> ; ───────────────────────────────────────────────────────────────────────────
   180                              <1> 
   181 000000DF 00<rep 121h>        <1> times (512)-($-$$) db 0
   182                              <1> 
     2                                  
     3                                  draw_string:
     4 00000200 BA00F4                    mov dx,BLUE
     5 00000203 BB00F0                    mov bx,RED
     6 00000206 BE[2D02]                  mov si,font
     7 00000209 B93B00                    mov cx,59
     8                                  .lp
     9 0000020C A5                        movsw
    10                                  
    11 0000020D AD                        lodsw
    12 0000020E AB                        stosw
    13 0000020F 1E                        push ds
    14 00000210 8EDB                      mov ds,bx
    15 00000212 8945FE                    mov [di-2],ax
    16 00000215 8EDA                      mov ds,dx
    17 00000217 8865FF                    mov [di-1],ah
    18 0000021A 1F                        pop ds
    19 0000021B E2EF                      loop .lp
    20 0000021D C3                        ret
    21                                  
    22                                  setup:
    23 0000021E B8001C                    mov ax,GREEN
    24 00000221 8EC0                      mov es,ax
    25                                    
    26 00000223 BF0000                    mov di,0
    27 00000226 E8D7FF                    call draw_string
    28 00000229 E8D4FF                    call draw_string
    29                                    
    30 0000022C F4                        hlt
    31                                  
    32 0000022D <bin E8h>               font: incbin "data/8x4-nibble-font.bin"
    33                                  
    34                                  text: 
    35 00000315 00<rep 2CCEBh>          times (180*1024)-($-$$) db 0
    36                                  
