     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4 00000000 EB04                <1> jmp boot
     5                              <1> 
     6                              <1> NUM_SECTORS equ 50          ; number of sectors to read
     7                              <1> BAR_WIDTH equ 30
     8                              <1> COLS  equ 72
     9                              <1> ROWS  equ 50
    10                              <1> LINES equ 200
    11                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    12                              <1> RED   equ 0xf000
    13                              <1> GREEN equ 0x1c00
    14                              <1> BLUE  equ 0xf400
    15                              <1> DST   equ 0x38
    16                              <1> XD    equ 4
    17                              <1> YD    equ COLS*XD
    18                              <1> FONT equ 0xFF00
    19                              <1> BYTES_PER_ROW equ 8*COLS  ; 25 lines
    20                              <1> Color.R equ 0b100
    21                              <1> Color.G equ 0b010
    22                              <1> Color.B equ 0b001
    23                              <1> Color.W equ 0b111
    24                              <1> Color.C equ 0b011
    25                              <1> Color.M equ 0b101
    26                              <1> Color.Y equ 0b110
    27                              <1> Color.K equ 0b000
    28                              <1> CTRL equ 0b0000100000000000
    29                              <1> KEY_LEFT  equ 0b00011100
    30                              <1> KEY_RIGHT equ 0b00011101
    31                              <1> KEY_UP    equ 0b00011110
    32                              <1> KEY_DOWN  equ 0b00011111
    33                              <1> 
    34 00000002 00                  <1> cursor.x: db 0
    35 00000003 00                  <1> cursor.y: db 0
    36                              <1> key:
    37 00000004 00                  <1>   .code db 0
    38 00000005 00                  <1>   .ctrl db 0
    39                              <1> 
    40                              <1> ; %macro set_cursor_row 1
    41                              <1> ;   mov di,%1 * BYTES_PER_ROW
    42                              <1> ; %endmacro
    43                              <1> 
    44                              <1> %macro set_cursor 2
    45                              <1>   mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    46                              <1>   ; mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> 
    50                              <1> boot:
    51 00000006 FA                  <1>   cli
    52 00000007 FC                  <1>   cld
    53                              <1> 
    54 00000008 E8C600              <1>   call clear_green          
    55 0000000B B005                <1>   mov al, 5
    56 0000000D E610                <1>   out 10h, al           ; select address 0x1c000 as green video page
    57                              <1> 
    58 0000000F B000                <1>   mov al,0
    59 00000011 E63A                <1>   out 0x3a,al           ; keyboard \force state/
    60 00000013 E63A                <1>   out 0x3a,al           ; keyboard \force state/
    61 00000015 B0FF                <1>   mov al,0xFF
    62 00000017 E63A                <1>   out 0x3a,al           ; keyboard \reset/
    63 00000019 E63A                <1>   out 0x3a,al           ; keyboard \mode/
    64 0000001B B037                <1>   mov al,0x37
    65 0000001D E63A                <1>   out 0x3a,al           ; keyboard \set command
    66                              <1> 
    67 0000001F B8001C              <1>   mov ax,GREEN      
    68 00000022 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
    69 00000024 B83800              <1>   mov ax,DST                
    70 00000027 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
    71 00000029 BF0000              <1>   mov di,0                  ;
    72 0000002C B200                <1>   mov dl,0                  ; track=0
    73 0000002E B601                <1>   mov dh,1                  ; sector=1
    74 00000030 B93200              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
    75 00000033 EB0B                <1>   jmp move_head
    76                              <1> 
    77                              <1> ; ───────────────────────────────────────────────────────────────────────────
    78                              <1> 
    79                              <1> next_sector:
    80 00000035 FEC6                <1>   inc dh                    ; sector++
    81 00000037 80FE0A              <1>   cmp dh,10
    82 0000003A 7218                <1>   jb read_sector            ; if (dh<9) read_sector
    83 0000003C B601                <1>   mov dh,1
    84 0000003E FEC2                <1>   inc dl                    ; else track++ ; sector=1
    85                              <1> 
    86                              <1> move_head:
    87 00000040 88D0                <1>   mov al,dl
    88 00000042 E60E                <1>   out 0Eh,al               ; set track number
    89 00000044 B018                <1>   mov al,18h     
    90 00000046 E608                <1>   out 8,al                 ; seek track, load head
    91 00000048 B000                <1>   mov al,0
    92 0000004A E61C                <1>   out 1Ch,al               ; set desired drive/side
    93 0000004C D40A                <1>   aam
    94                              <1> 
    95                              <1> head_moving:
    96 0000004E E408                <1>   in al,8
    97 00000050 A801                <1>   test al,1
    98 00000052 75FA                <1>   jnz head_moving
    99                              <1> 
   100                              <1> read_sector:
   101 00000054 88F0                <1>   mov al,dh
   102 00000056 E60C                <1>   out 0Ch,al                ; sector number
   103 00000058 B702                <1>   mov bh,2                  ; 00000010b
   104 0000005A B396                <1>   mov bl,96h                ; 10010110b
   105 0000005C B400                <1>   mov ah,0
   106 0000005E B080                <1>   mov al,80h
   107 00000060 E608                <1>   out 8,al                  ; read sector
   108 00000062 D40A<rep 4h>        <1>   times 4 aam               ; wait
   109                              <1> 
   110                              <1> check_status_1:
   111 0000006A E408                <1>   in al,8                   ; read status
   112 0000006C D0F8                <1>   sar al,1                  ; status/=2
   113 0000006E 731F                <1>   jnb check_status_3
   114 00000070 75F8                <1>   jnz check_status_1
   115                              <1> 
   116                              <1> wait_for_data:
   117 00000072 E408                <1>   in al,8                   ; read status
   118 00000074 20D8                <1>   and al,bl                 ; 96h
   119 00000076 74FA                <1>   jz wait_for_data
   120                              <1> 
   121                              <1> store_byte_1:
   122 00000078 E40E                <1>   in al,0Eh
   123 0000007A AA                  <1>   stosb
   124                              <1> 
   125                              <1> check_status_2:
   126 0000007B E408                <1>   in al,8                   ; read status
   127 0000007D 48                  <1>   dec ax                    ; status--
   128 0000007E 74FB                <1>   jz check_status_2         ; if (status==0) repeat
   129 00000080 38F8                <1>   cmp al, bh                ; bh=2
   130 00000082 750B                <1>   jnz check_status_3        ; if (status==1) 
   131                              <1> 
   132                              <1> store_byte_2:
   133 00000084 E40E                <1>   in al,0Eh  
   134 00000086 AA                  <1>   stosb
   135                              <1> 
   136                              <1> check_status_4:
   137 00000087 E408                <1>   in al,8                   ; read status
   138 00000089 38F8                <1>   cmp al, bh                ; bh=2
   139 0000008B 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   140 0000008D EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   141                              <1> 
   142                              <1> ; ───────────────────────────────────────────────────────────────────────────
   143                              <1> 
   144                              <1> check_status_3:
   145 0000008F E408                <1>   in al, 8                  ; read status
   146 00000091 A81C                <1>   test al, 1Ch              ; 00011100
   147 00000093 7402                <1>   jz while_sectors
   148 00000095 EBBD                <1>   jmp read_sector
   149                              <1> 
   150                              <1> ; ───────────────────────────────────────────────────────────────────────────
   151                              <1> 
   152                              <1> while_sectors:
   153 00000097 E80F00              <1>   call progress_bar
   154 0000009A E299                <1>   loop next_sector
   155                              <1> 
   156                              <1> done_reading:
   157 0000009C 0E                  <1>   push cs
   158 0000009D 17                  <1>   pop ss
   159 0000009E BC0000              <1>   mov sp,0
   160 000000A1 E82D00              <1>   call clear_green
   161 000000A4 0E                  <1>   push cs
   162 000000A5 1F                  <1>   pop ds
   163 000000A6 E92702              <1>   jmp setup
   164                              <1> 
   165                              <1> ; ───────────────────────────────────────────────────────────────────────────
   166                              <1> 
   167                              <1> progress_bar:
   168                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   169 000000A9 52                  <1>   push dx
   170 000000AA 53                  <1>   push bx
   171 000000AB 31D2                <1>   xor dx,dx
   172 000000AD B81E00              <1>   mov ax,BAR_WIDTH
   173 000000B0 BB3200              <1>   mov bx,NUM_SECTORS    
   174 000000B3 F7E1                <1>   mul cx
   175 000000B5 F7F3                <1>   div bx
   176 000000B7 5B                  <1>   pop bx
   177 000000B8 5A                  <1>   pop dx
   178 000000B9 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   179 000000BB D1E6                <1>   shl si,1                  ; *=2
   180 000000BD D1E6                <1>   shl si,1                  ; *=2  
   181 000000BF BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   182 000000C2 29F5                <1>   sub bp,si
   183 000000C4 3EC64600FF          <1>   mov byte [ds:bp],-1
   184 000000C9 C3                  <1>   ret
   185                              <1> 
   186                              <1> clear_red:
   187 000000CA B800F0              <1>   mov ax,RED
   188 000000CD E81900              <1>   call clear_channel
   189 000000D0 C3                  <1>   ret
   190                              <1> 
   191                              <1> clear_green:
   192 000000D1 B8001C              <1>   mov ax,GREEN
   193 000000D4 E81200              <1>   call clear_channel
   194 000000D7 C3                  <1>   ret
   195                              <1> 
   196                              <1> clear_blue:
   197 000000D8 B800F4              <1>   mov ax,BLUE
   198 000000DB E80B00              <1>   call clear_channel
   199 000000DE C3                  <1>   ret
   200                              <1> 
   201                              <1> clear_screen:
   202 000000DF E8E8FF              <1>   call clear_red
   203 000000E2 E8ECFF              <1>   call clear_green
   204 000000E5 E8F0FF              <1>   call clear_blue
   205 000000E8 C3                  <1>   ret
   206                              <1> 
   207                              <1> clear_channel:
   208 000000E9 8EC0                <1>   mov es,ax
   209 000000EB B9201C              <1>   mov cx,COLS*ROWS*2
   210 000000EE 31FF                <1>   xor di,di
   211 000000F0 31C0                <1>   xor ax,ax
   212 000000F2 F3AB                <1>   rep stosw         ; clear screen
   213 000000F4 C3                  <1>   ret
   214                              <1> 
   215                              <1> ; ───────────────────────────────────────────────────────────────────────────
   216                              <1> 
   217                              <1> write_char:   ; ds=FONT, es=GREEN, al=charcode
   218                              <1>   ; zou ik hier ds moeten pushen? omdat je er vanuit wilt gaan dat DS en CS altijd gelijk zijn
   219 000000F5 50                  <1>   push ax
   220 000000F6 50                  <1>   push ax
   221 000000F7 B8001C              <1>   mov ax,GREEN
   222 000000FA 8EC0                <1>   mov es,ax
   223 000000FC B800FF              <1>   mov ax,FONT
   224 000000FF 8ED8                <1>   mov ds,ax
   225 00000101 58                  <1>   pop ax
   226 00000102 B408                <1>   mov ah,8
   227 00000104 F6E4                <1>   mul ah        ; al*=ah
   228 00000106 89C6                <1>   mov si,ax
   229 00000108 A5                  <1>   movsw
   230 00000109 A5                  <1>   movsw
   231 0000010A 81C71C01            <1>   add di,0x11c
   232 0000010E A5                  <1>   movsw
   233 0000010F A5                  <1>   movsw
   234 00000110 81EF2001            <1>   sub di,0x120
   235 00000114 81FF4038            <1>   cmp di,14400   ; dit later oplossen met cursor positie
   236 00000118 7202                <1>   jb .return
   237 0000011A 31FF                <1>   xor di,di      ; move to left top. change later to scroll
   238                              <1> .return
   239 0000011C 58                  <1>   pop ax
   240 0000011D C3                  <1>   ret
   241                              <1> 
   242                              <1> ; ───────────────────────────────────────────────────────────────────────────
   243                              <1> 
   244                              <1> write_string:
   245 0000011E 2E8A07              <1>   mov al,[cs:bx]
   246 00000121 43                  <1>   inc bx
   247 00000122 08C0                <1>   or al,al
   248 00000124 7405                <1>   jz .return
   249 00000126 E8CCFF              <1>   call write_char
   250 00000129 EBF3                <1>   jmp short write_string
   251                              <1> .return
   252 0000012B C3                  <1>   ret
   253                              <1> 
   254                              <1> ; ───────────────────────────────────────────────────────────────────────────
   255                              <1> 
   256                              <1> write_binary_byte:    ; input AL
   257 0000012C 50                  <1>   push ax
   258 0000012D 88C3                <1>   mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   259 0000012F B90800              <1>   mov cx, 8           ; We gaan 8 bits schrijven
   260                              <1> .lp:
   261 00000132 D0C3                <1>   rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   262 00000134 B80000              <1>   mov ax, 0           ; AH leegmaken
   263 00000137 1430                <1>   adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   264 00000139 51                  <1>   push cx             ; CX opslaan
   265 0000013A E8B8FF              <1>   call write_char      ; Schrijf het karakter naar het scherm
   266 0000013D 59                  <1>   pop cx              ; CX herstellen
   267 0000013E E2F2                <1>   loop .lp            ; Loop voor alle 8 bits
   268 00000140 58                  <1>   pop ax
   269 00000141 C3                  <1>   ret
   270                              <1> 
   271                              <1> ; ───────────────────────────────────────────────────────────────────────────
   272                              <1> 
   273                              <1> write_binary_word:    ; input AX
   274 00000142 50                  <1>   push ax
   275 00000143 52                  <1>   push dx            ; DX opslaan (we gebruiken het later)
   276 00000144 89C2                <1>   mov dx, ax         ; Kopieer AX naar DX (we werken op DX)
   277 00000146 B91000              <1>   mov cx, 16         ; We gaan 16 bits schrijven
   278                              <1> .lp:
   279 00000149 D1C2                <1>   rol dx, 1          ; Rotate DX naar links (hoogste bit komt in Carry Flag)
   280 0000014B B80000              <1>   mov ax, 0          ; AH leegmaken
   281 0000014E 1430                <1>   adc al, 48         ; Als Carry Flag 1 is, wordt '1', anders '0'  
   282 00000150 51                  <1>   push cx            ; CX opslaan
   283 00000151 E8A1FF              <1>   call write_char    ; Schrijf het karakter naar het scherm
   284 00000154 59                  <1>   pop cx             ; CX herstellen
   285 00000155 E2F2                <1>   loop .lp           ; Loop voor alle 16 bits
   286 00000157 5A                  <1>   pop dx             ; DX herstellen
   287 00000158 58                  <1>   pop ax
   288 00000159 C3                  <1>   ret
   289                              <1> 
   290                              <1> ; ───────────────────────────────────────────────────────────────────────────
   291                              <1> 
   292                              <1> write_number_word:
   293 0000015A 50                  <1>     push ax
   294 0000015B 52                  <1>     push dx
   295 0000015C 31D2                <1>     xor dx,dx
   296 0000015E 52                  <1>     push dx ;high byte is zero
   297 0000015F 31D2                <1> .clp xor dx,dx
   298 00000161 2EF736[7D01]        <1>     cs div word [.base]
   299 00000166 92                  <1>     xchg ax,dx
   300 00000167 05300E              <1>     add ax,0xe30
   301 0000016A 50                  <1>     push ax
   302 0000016B 92                  <1>     xchg ax,dx
   303 0000016C 09C0                <1>     or ax,ax
   304 0000016E 75EF                <1>     jnz .clp
   305 00000170 58                  <1> .dlp pop ax
   306 00000171 08E4                <1>     or ah,ah
   307 00000173 7405                <1>     jz .done
   308 00000175 E87DFF              <1>     call write_char
   309 00000178 EBF6                <1>     jmp short .dlp
   310 0000017A 5A                  <1> .done pop dx
   311 0000017B 58                  <1>     pop ax
   312 0000017C C3                  <1>     ret
   313 0000017D 0A00                <1> .base dw 10
   314                              <1> 
   315                              <1> ; ───────────────────────────────────────────────────────────────────────────
   316                              <1> 
   317                              <1> check_keys:
   318 0000017F E43A                <1>   in al,0x3a        ; get keyboard status
   319 00000181 88C4                <1>   mov ah,al
   320 00000183 2408                <1>   and al,0b00001000 ; keep only 1 for 'ctrl'
   321 00000185 2EA2[0500]          <1>   mov [cs:key.ctrl],al
   322 00000189 F6C402              <1>   test ah,2         ; keypressed flag is in ah, not in al anymore
   323 0000018C 7410                <1>   jz .return
   324 0000018E E438                <1>   in al,0x38        ; get data byte from keyboard  
   325 00000190 2EA2[0400]          <1>   mov [cs:key.code],al
   326 00000194 B037                <1>   mov al,0x37
   327 00000196 E63A                <1>   out 0x3a,al       ; drop key?  
   328 00000198 0C01                <1>   or al,1           ; set zero flag to false to indicate a keypress
   329 0000019A 2EA1[0400]          <1>   mov ax,[cs:key]   ; ctrl status in ah, keycode in al, ZF low means a key was pressed
   330 0000019E C3                  <1> .return ret
   331                              <1> 
   332                              <1> 
   333                              <1> 
   334                              <1> ;fillscreen:  ; al=lower 3 bits = Color RGBWCMYK - 4th bit = method???? - support for mask?? - or dither pattern??
   335                              <1> ;   ret
   336                              <1> 
   337                              <1> ;fillarea (minx,miny,maxx,maxy) color, pattern
   338                              <1> 
   339                              <1> ;rect (x,y,width,height) stroke color, strokeweight, fill
   340                              <1> ; much faster and simpler on the grid than off the grid
   341                              <1> ; zou je de randen buiten het grid vooraf of naderhand kunnen doen. en het deel op het grid met de snelle methode
   342                              <1> 
   343                              <1> 
   344                              <1> ; wide font by stretching the font horizontally using bitshift
   345                              <1> 
   346                              <1> 
   347                              <1> fill_white:
   348 0000019F B8FFFF              <1>   mov ax,0xffff
   349 000001A2 E84B00              <1>   call fill_red
   350 000001A5 E84F00              <1>   call fill_green
   351 000001A8 E85300              <1>   call fill_blue
   352 000001AB C3                  <1>   ret
   353                              <1> 
   354                              <1> fill_pink:
   355 000001AC B8FFFF              <1>   mov ax,0xffff
   356 000001AF E83E00              <1>   call fill_red
   357 000001B2 B455                <1>   mov ah,0b01010101
   358 000001B4 B0AA                <1>   mov al,0b10101010
   359 000001B6 E83E00              <1>   call fill_green
   360 000001B9 E84200              <1>   call fill_blue
   361 000001BC C3                  <1>   ret
   362                              <1> 
   363                              <1> fill_pink2:
   364 000001BD B8FFFF              <1>   mov ax,0xffff
   365 000001C0 E82D00              <1>   call fill_red
   366 000001C3 B4CC                <1>   mov ah,0b11001100
   367 000001C5 B033                <1>   mov al,0b00110011
   368 000001C7 E82D00              <1>   call fill_green
   369 000001CA E83100              <1>   call fill_blue
   370 000001CD C3                  <1>   ret
   371                              <1> 
   372                              <1> fill_pink3:
   373 000001CE B8FFFF              <1>   mov ax,0xffff
   374 000001D1 E81C00              <1>   call fill_red
   375 000001D4 B411                <1>   mov ah,0b00010001
   376 000001D6 B044                <1>   mov al,0b01000100
   377 000001D8 E81C00              <1>   call fill_green
   378 000001DB E82000              <1>   call fill_blue
   379 000001DE C3                  <1>   ret
   380                              <1> 
   381                              <1> fill_pink4:
   382 000001DF B8FFFF              <1>   mov ax,0xffff
   383 000001E2 E80B00              <1>   call fill_red
   384 000001E5 B4F7                <1>   mov ah,0b11110111
   385 000001E7 B07F                <1>   mov al,0b01111111
   386 000001E9 E80B00              <1>   call fill_green
   387 000001EC E80F00              <1>   call fill_blue
   388 000001EF C3                  <1>   ret
   389                              <1> 
   390                              <1> fill_red:
   391 000001F0 BB00F0              <1>   mov bx,RED
   392 000001F3 E80F00              <1>   call fill_channel
   393 000001F6 C3                  <1>   ret
   394                              <1> fill_green:
   395 000001F7 BB001C              <1>   mov bx,GREEN
   396 000001FA E80800              <1>   call fill_channel
   397 000001FD C3                  <1>   ret
   398                              <1> fill_blue:
   399 000001FE BB00F4              <1>   mov bx,BLUE
   400 00000201 E80100              <1>   call fill_channel
   401 00000204 C3                  <1>   ret
   402                              <1> 
   403                              <1> fill_channel: ;ax=pattern
   404 00000205 8EC3                <1>   mov es,bx
   405 00000207 B9201C              <1>   mov cx,COLS*ROWS*2
   406 0000020A 31FF                <1>   xor di,di
   407 0000020C F3AB                <1>   rep stosw
   408 0000020E C3                  <1>   ret
   409                              <1> 
   410                              <1> ; ───────────────────────────────────────────────────────────────────────────
   411                              <1> 
   412                              <1> draw_spr:
   413 0000020F 8B1C                <1>   mov bx,[si]
   414 00000211 46<rep 2h>          <1>   times 2 inc si
   415                              <1> draw_pic:
   416 00000213 B800F0              <1>   mov ax, RED
   417 00000216 E80D00              <1>   call draw_channel
   418 00000219 B8001C              <1>   mov ax, GREEN
   419 0000021C E80700              <1>   call draw_channel
   420 0000021F B800F4              <1>   mov ax, BLUE
   421 00000222 E80100              <1>   call draw_channel
   422 00000225 C3                  <1>   ret
   423                              <1> 
   424                              <1> ; ───────────────────────────────────────────────────────────────────────────
   425                              <1> 
   426                              <1> draw_channel:
   427 00000226 57                  <1>   push di
   428 00000227 8EC0                <1>   mov es,ax
   429 00000229 31C9                <1>   xor cx,cx
   430 0000022B 88F9                <1>   mov cl,bh        ; rows (bl)
   431                              <1> .rows_loop:
   432 0000022D 51                  <1>   push cx
   433 0000022E 31C9                <1>   xor cx,cx
   434 00000230 88D9                <1>   mov cl,bl        ; cols (bh)
   435                              <1> .cols_loop:
   436 00000232 A5                  <1>   movsw
   437 00000233 A5                  <1>   movsw
   438 00000234 E2FC                <1>   loop .cols_loop
   439 00000236 81C72001            <1>   add di,COLS*4    ; one row down
   440 0000023A B400                <1>   mov ah,0
   441 0000023C 88D8                <1>   mov al,bl
   442 0000023E D1E0<rep 2h>        <1>   times 2 shl ax,1
   443 00000242 29C7                <1>   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   444 00000244 59                  <1>   pop cx
   445 00000245 E2E6                <1>   loop .rows_loop
   446 00000247 5F                  <1>   pop di
   447 00000248 C3                  <1>   ret
   448                              <1> 
   449                              <1> ; ───────────────────────────────────────────────────────────────────────────
   450                              <1> 
   451                              <1> calc_di_from_bx:  ; input bl,bh [0,0,71,49]
   452 00000249 B89000              <1>   mov ax,144      ; 2*72 cols
   453 0000024C F6E7                <1>   mul bh          ; bh*=144 resultaat in AX
   454 0000024E D1E0                <1>   shl ax,1        ; verdubbel AX
   455 00000250 89C7                <1>   mov di,ax       ; di=ax (=bh*288)
   456 00000252 D0E3                <1>   shl bl,1        ; bl*=2
   457 00000254 D0E3                <1>   shl bl,1        ; bl*=2
   458 00000256 B700                <1>   mov bh,0
   459 00000258 01DF                <1>   add di,bx       ; di+=bl
   460 0000025A C3                  <1>   ret
   461                              <1> ; ───────────────────────────────────────────────────────────────────────────
   462                              <1> 
   463                              <1> 
   464                              <1> ; set_cursor:
   465                              <1> ; cursor_next_char
   466                              <1> 
   467                              <1> 
   468                              <1> 
   469                              <1> ; times (512)-($-$$) db 0             ; doesn't fit in the bootsector anymore
   470                              <1> 
     2                                  %include "player.asm"
     1                              <1> ; %include "sprite.asm"
     2                              <1> 
     3                              <1> ; player:
     4                              <1> 
     5                              <1> ; .mode dw .walk_left 
     6                              <1> 
     7                              <1> ; .update:
     8                              <1> 
     9                              <1> 
    10                              <1> ;   ret
    11                              <1> 
    12                              <1> ; .draw:
    13                              <1> ;   ; xor di,di
    14                              <1> ;   ; push cs
    15                              <1> ;   ; pop ds
    16                              <1> ;   ; mov si, img.stand_1
    17                              <1> ;   ; mov bh,4 ; cols 
    18                              <1> ;   ; mov bl,4 ; rows
    19                              <1> ;   ; call draw_pic
    20                              <1> ;   ; ret
    21                              <1> 
    22                              <1> ;   push cs
    23                              <1> ;   pop ds
    24                              <1> 
    25                              <1> ;   push bp
    26                              <1> ;   mov bp,[.mode]
    27                              <1> 
    28                              <1> ;   mov bx,[bp+pos]
    29                              <1> ;   call calc_di_from_bx
    30                              <1> ;   mov si,[bp+img_data]
    31                              <1> ;   mov cl,[bp+framesize]
    32                              <1> ;   mov byte al,[bp+frame]
    33                              <1> ;   mul cl
    34                              <1> ;   add si,ax
    35                              <1> ;   mov bx,[bp+size]
    36                              <1> ;   call draw_pic
    37                              <1> ;   call .next_frame
    38                              <1> ;   pop bp
    39                              <1> ;   ret
    40                              <1> 
    41                              <1> ; .next_frame:
    42                              <1> ;   ; mov bp, .stand
    43                              <1> ;   inc byte [bp+frame]
    44                              <1> ;   mov cl,[bp+frames]
    45                              <1> ;   cmp byte [bp+frame],cl
    46                              <1> ;   jb .done
    47                              <1> ;   mov byte [bp+frame],0
    48                              <1> ; .done
    49                              <1> ;   ret
    50                              <1> 
    51                              <1> ; ; ───────────────────────────────────────────────────────────────────────────
    52                              <1> 
    53                              <1> 
    54                              <1> ; player.stand:
    55                              <1> ;   .size.w db 4
    56                              <1> ;   .size.h db 4
    57                              <1> ;   .pos.x db 5
    58                              <1> ;   .pos.y db 36
    59                              <1> ;   .vel.vx db 1
    60                              <1> ;   .vel.vy db -1
    61                              <1> ;   .frame db 0
    62                              <1> ;   .frames db 4
    63                              <1> ;   .framesize db 192
    64                              <1> ;   .data dw img.stand_1
    65                              <1> 
    66                              <1> ; player.walk_fw:
    67                              <1> ;   .size.w db 4
    68                              <1> ;   .size.h db 4
    69                              <1> ;   .pos.x db 42
    70                              <1> ;   .pos.y db 5
    71                              <1> ;   .vel.vx db -1
    72                              <1> ;   .vel.vy db 1
    73                              <1> ;   .frame db 0
    74                              <1> ;   .frames db 2
    75                              <1> ;   .framesize db 192
    76                              <1> ;   .data dw img.walk_fw_1
    77                              <1> 
    78                              <1> ; player.walk_bw:
    79                              <1> ;   .size.w db 4
    80                              <1> ;   .size.h db 4
    81                              <1> ;   .pos.x db 38
    82                              <1> ;   .pos.y db 29
    83                              <1> ;   .vel.vx db -1
    84                              <1> ;   .vel.vy db 1
    85                              <1> ;   .frame db 0
    86                              <1> ;   .frames db 2
    87                              <1> ;   .framesize db 192
    88                              <1> ;   .data dw img.walk_bw_1
    89                              <1> 
    90                              <1> ; player.walk_left:
    91                              <1> ;   .size.w db 4
    92                              <1> ;   .size.h db 4
    93                              <1> ;   .pos.x db 31
    94                              <1> ;   .pos.y db 19
    95                              <1> ;   .vel.vx db 1
    96                              <1> ;   .vel.vy db 1
    97                              <1> ;   .frame db 0
    98                              <1> ;   .frames db 4
    99                              <1> ;   .framesize db 192
   100                              <1> ;   .data dw img.walk_left_1
   101                              <1> 
   102                              <1> ; player.walk_right:
   103                              <1> ;   .size.w db 4
   104                              <1> ;   .size.h db 4
   105                              <1> ;   .pos.x db 29
   106                              <1> ;   .pos.y db 13
   107                              <1> ;   .vel.vx db 1
   108                              <1> ;   .vel.vy db -1
   109                              <1> ;   .frame db 0
   110                              <1> ;   .frames db 4
   111                              <1> ;   .framesize db 192
   112                              <1> ;   .data dw img.walk_right_1
     3                                  
     4 0000025B 226122202020202020-     msg_a:            db '"a"         ',0
     4 00000264 20202000           
     5 00000268 53686966742B412020-     msg_shift_a:      db 'Shift+A     ',0
     5 00000271 20202000           
     6 00000275 4374726C2B41202020-     msg_ctrl_a:       db 'Ctrl+A      ',0
     6 0000027E 20202000           
     7 00000282 4374726C2B53686966-     msg_ctrl_shift_a: db 'Ctrl+Shift+A',0
     7 0000028B 742B4100           
     8 0000028F 4C4546542020202020-     msg_left:         db 'LEFT        ',0
     8 00000298 20202000           
     9 0000029C 524947485420202020-     msg_right:        db 'RIGHT       ',0
     9 000002A5 20202000           
    10 000002A9 555020202020202020-     msg_up:           db 'UP          ',0
    10 000002B2 20202000           
    11 000002B6 444F574E2020202020-     msg_down:         db 'DOWN        ',0
    11 000002BF 20202000           
    12 000002C3 4F74686572206B6579-     msg_other_key:    db 'Other key   ',0
    12 000002CC 20202000           
    13                                  
    14                                  ; img1: incbin "data/player/player-rotations-1.spr"
    15                                  ; img2: incbin "data/player/player-rotations-2.spr"
    16                                  ; img3: incbin "data/player/player-rotations-3.spr"
    17                                  ; img4: incbin "data/player/player-rotations-4.spr"
    18                                  ; img5: incbin "data/player/player-rotations-5.spr"
    19                                  ; img6: incbin "data/player/player-rotations-6.spr"
    20                                  ; img7: incbin "data/player/player-rotations-7.spr"
    21                                  
    22                                  ; size equ 0
    23                                  ; w equ 0
    24                                  ; h equ 1
    25                                  ; pos equ 2
    26                                  ; x equ 2
    27                                  ; y equ 3
    28                                  ; vel equ 4
    29                                  ; vx equ 4
    30                                  ; vy equ 5
    31                                  ; frame equ 6
    32                                  ; frames equ 7
    33                                  ; framesize equ 8
    34                                  ; img_data equ 9
    35                                  
    36                                  ; player: 
    37                                  ;   .size.w db 4
    38                                  ;   .size.h db 4
    39                                  ;   .pos.x db 0
    40                                  ;   .pos.y db 0
    41                                  ;   .vel.vx db -1
    42                                  ;   .vel.vy db 1
    43                                  ;   .frame db 0
    44                                  ;   .frames db 4
    45                                  ;   .framesize db 192
    46                                  ;   .img_data dw img1+2
    47                                  
    48                                  
    49                                  DELAY equ 4000
    50                                  
    51                                  ; img_player: incbin "data/player/Sprite-0013-32x32.spr"
    52                                  
    53                                  ; %macro set_cursor 2
    54                                  ;   mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    55                                  ;   ; mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    56                                  ; %endmacro
    57                                  
    58                                  %macro draw_frame 1
    59                                    set_cursor 10,10
    60                                    mov si,%1
    61                                    call draw_spr
    62                                    call _wait
    63                                  %endmacro
    64                                  
    65                                  setup:
    66 000002D0 31ED                      xor bp,bp
    67                                  
    68 000002D2 EB08                      jmp draw
    69                                  
    70                                  _wait:
    71 000002D4 B9A00F                    mov cx,DELAY
    72 000002D7 D40A                      .lp aam
    73 000002D9 E2FC                      loop .lp
    74 000002DB C3                        ret
    75                                  
    76                                  draw:
    77 000002DC 0E                        push cs
    78 000002DD 1F                        pop ds
    79                                  
    80                                   
    81                                    draw_frame img1
    59                              <1>  set_cursor 10,10
    45 000002DE BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000002E1 BE[7710]            <1>  mov si,%1
    61 000002E4 E828FF              <1>  call draw_spr
    62 000002E7 E8EAFF              <1>  call _wait
    82                                    draw_frame img2
    59                              <1>  set_cursor 10,10
    45 000002EA BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000002ED BE[7913]            <1>  mov si,%1
    61 000002F0 E81CFF              <1>  call draw_spr
    62 000002F3 E8DEFF              <1>  call _wait
    83                                    draw_frame img3
    59                              <1>  set_cursor 10,10
    45 000002F6 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000002F9 BE[7B16]            <1>  mov si,%1
    61 000002FC E810FF              <1>  call draw_spr
    62 000002FF E8D2FF              <1>  call _wait
    84                                    draw_frame img4
    59                              <1>  set_cursor 10,10
    45 00000302 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000305 BE[7D19]            <1>  mov si,%1
    61 00000308 E804FF              <1>  call draw_spr
    62 0000030B E8C6FF              <1>  call _wait
    85                                    draw_frame img5
    59                              <1>  set_cursor 10,10
    45 0000030E BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000311 BE[7F1C]            <1>  mov si,%1
    61 00000314 E8F8FE              <1>  call draw_spr
    62 00000317 E8BAFF              <1>  call _wait
    86                                    draw_frame img6
    59                              <1>  set_cursor 10,10
    45 0000031A BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 0000031D BE[811F]            <1>  mov si,%1
    61 00000320 E8ECFE              <1>  call draw_spr
    62 00000323 E8AEFF              <1>  call _wait
    87                                    draw_frame img7
    59                              <1>  set_cursor 10,10
    45 00000326 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000329 BE[8322]            <1>  mov si,%1
    61 0000032C E8E0FE              <1>  call draw_spr
    62 0000032F E8A2FF              <1>  call _wait
    88                                    draw_frame img8
    59                              <1>  set_cursor 10,10
    45 00000332 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000335 BE[8525]            <1>  mov si,%1
    61 00000338 E8D4FE              <1>  call draw_spr
    62 0000033B E896FF              <1>  call _wait
    89                                    draw_frame img9
    59                              <1>  set_cursor 10,10
    45 0000033E BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000341 BE[8728]            <1>  mov si,%1
    61 00000344 E8C8FE              <1>  call draw_spr
    62 00000347 E88AFF              <1>  call _wait
    90                                    draw_frame img10
    59                              <1>  set_cursor 10,10
    45 0000034A BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 0000034D BE[892B]            <1>  mov si,%1
    61 00000350 E8BCFE              <1>  call draw_spr
    62 00000353 E87EFF              <1>  call _wait
    91                                    draw_frame img11
    59                              <1>  set_cursor 10,10
    45 00000356 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000359 BE[8B2E]            <1>  mov si,%1
    61 0000035C E8B0FE              <1>  call draw_spr
    62 0000035F E872FF              <1>  call _wait
    92                                    draw_frame img12
    59                              <1>  set_cursor 10,10
    45 00000362 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000365 BE[8D31]            <1>  mov si,%1
    61 00000368 E8A4FE              <1>  call draw_spr
    62 0000036B E866FF              <1>  call _wait
    93                                    draw_frame img13
    59                              <1>  set_cursor 10,10
    45 0000036E BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000371 BE[8F34]            <1>  mov si,%1
    61 00000374 E898FE              <1>  call draw_spr
    62 00000377 E85AFF              <1>  call _wait
    94                                    draw_frame img14
    59                              <1>  set_cursor 10,10
    45 0000037A BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 0000037D BE[9137]            <1>  mov si,%1
    61 00000380 E88CFE              <1>  call draw_spr
    62 00000383 E84EFF              <1>  call _wait
    95                                    draw_frame img15
    59                              <1>  set_cursor 10,10
    45 00000386 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000389 BE[933A]            <1>  mov si,%1
    61 0000038C E880FE              <1>  call draw_spr
    62 0000038F E842FF              <1>  call _wait
    96                                    draw_frame img16
    59                              <1>  set_cursor 10,10
    45 00000392 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 00000395 BE[953D]            <1>  mov si,%1
    61 00000398 E874FE              <1>  call draw_spr
    62 0000039B E836FF              <1>  call _wait
    97                                    draw_frame img17
    59                              <1>  set_cursor 10,10
    45 0000039E BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003A1 BE[9740]            <1>  mov si,%1
    61 000003A4 E868FE              <1>  call draw_spr
    62 000003A7 E82AFF              <1>  call _wait
    98                                    draw_frame img18
    59                              <1>  set_cursor 10,10
    45 000003AA BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003AD BE[9943]            <1>  mov si,%1
    61 000003B0 E85CFE              <1>  call draw_spr
    62 000003B3 E81EFF              <1>  call _wait
    99                                    draw_frame img19
    59                              <1>  set_cursor 10,10
    45 000003B6 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003B9 BE[9B46]            <1>  mov si,%1
    61 000003BC E850FE              <1>  call draw_spr
    62 000003BF E812FF              <1>  call _wait
   100                                    draw_frame img20
    59                              <1>  set_cursor 10,10
    45 000003C2 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003C5 BE[9D49]            <1>  mov si,%1
    61 000003C8 E844FE              <1>  call draw_spr
    62 000003CB E806FF              <1>  call _wait
   101                                    draw_frame img21
    59                              <1>  set_cursor 10,10
    45 000003CE BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003D1 BE[9F4C]            <1>  mov si,%1
    61 000003D4 E838FE              <1>  call draw_spr
    62 000003D7 E8FAFE              <1>  call _wait
   102                                    draw_frame img22
    59                              <1>  set_cursor 10,10
    45 000003DA BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003DD BE[A14F]            <1>  mov si,%1
    61 000003E0 E82CFE              <1>  call draw_spr
    62 000003E3 E8EEFE              <1>  call _wait
   103                                    draw_frame img23
    59                              <1>  set_cursor 10,10
    45 000003E6 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003E9 BE[A352]            <1>  mov si,%1
    61 000003EC E820FE              <1>  call draw_spr
    62 000003EF E8E2FE              <1>  call _wait
   104                                    draw_frame img24
    59                              <1>  set_cursor 10,10
    45 000003F2 BFA816              <2>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <2> 
    60 000003F5 BE[A555]            <1>  mov si,%1
    61 000003F8 E814FE              <1>  call draw_spr
    62 000003FB E8D6FE              <1>  call _wait
   105                                  
   106                                    
   107                                    ; call player.update
   108                                    ; call player.draw
   109                                  
   110 000003FE 45                        inc bp
   111 000003FF 89E8                      mov ax,bp
   112                                    set_cursor 12,50
    45 00000401 BFC81B              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   113 00000404 E853FD                    call write_number_word     ; draw frame counter
   114                                    
   115 00000407 E875FD                    call check_keys
   116 0000040A 7503                      jnz .onkey
   117                                    ;else
   118 0000040C E9CDFE                    jmp draw            ; else continue draw loop
   119                                  
   120                                  
   121                                  
   122                                  
   123                                  .onkey:
   124                                    set_cursor 2,10
    45 0000040F BFA804              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   125 00000412 2EA1[0400]                mov ax,[cs:key]
   126 00000416 E829FD                    call write_binary_word
   127                                  
   128 00000419 3D6108                    cmp ax,CTRL+'a'
   129 0000041C 7428                        je .on_key_ctrl_a
   130 0000041E 3D4108                    cmp ax,CTRL+'A'
   131 00000421 7428                        je .on_key_ctrl_shift_a
   132 00000423 83F861                    cmp ax,'a'
   133 00000426 7428                        je .on_key_a
   134 00000428 83F841                    cmp ax,'A'
   135 0000042B 7428                        je .on_key_shift_a
   136 0000042D 83F81C                    cmp ax,KEY_LEFT
   137 00000430 7428                        je .on_key_left
   138 00000432 83F81D                    cmp ax,KEY_RIGHT
   139 00000435 7428                        je .on_key_right
   140 00000437 83F81E                    cmp ax,KEY_UP
   141 0000043A 7428                        je .on_key_up
   142 0000043C 83F81F                    cmp ax,KEY_DOWN
   143 0000043F 7428                        je .on_key_down
   144                                    ;else
   145 00000441 BB[C302]                    mov bx, msg_other_key             ; msg_other_key
   146 00000444 EB28                        jmp .print_msg
   147                                  
   148                                  .on_key_ctrl_a:
   149 00000446 BB[7502]                  mov bx, msg_ctrl_a                  ; msg_ctrl_a
   150 00000449 EB23                      jmp .print_msg
   151                                  
   152                                  .on_key_ctrl_shift_a:
   153 0000044B BB[8202]                  mov bx, msg_ctrl_shift_a            ; msg_ctrl_shift_a
   154 0000044E EB1E                      jmp .print_msg
   155                                  
   156                                  .on_key_a:
   157 00000450 BB[5B02]                  mov bx, msg_a                       ; msg_a
   158 00000453 EB19                      jmp .print_msg
   159                                  
   160                                  .on_key_shift_a:
   161 00000455 BB[6802]                  mov bx, msg_shift_a                 ; msg_shift_a
   162 00000458 EB14                      jmp .print_msg
   163                                  
   164                                  .on_key_left:
   165 0000045A BB[8F02]                  mov bx, msg_left                    ; msg_left
   166 0000045D EB0F                      jmp .print_msg
   167                                  
   168                                  .on_key_right:
   169 0000045F BB[9C02]                  mov bx, msg_right                   ; msg_right
   170 00000462 EB0A                      jmp .print_msg
   171                                  
   172                                  .on_key_up:
   173 00000464 BB[A902]                  mov bx, msg_up                      ; msg_up
   174 00000467 EB05                      jmp .print_msg
   175                                  
   176                                  .on_key_down:
   177 00000469 BB[B602]                  mov bx, msg_down                    ; msg_down
   178 0000046C EB00                      jmp .print_msg
   179                                  
   180                                  .print_msg:
   181                                    set_cursor 1,10
    45 0000046E BF6802              <1>  mov di,%1 * BYTES_PER_ROW + %2 * 4
    46                              <1> 
   182 00000471 E8AAFC                    call write_string
   183                                  
   184 00000474 E965FE                    jmp draw
   185                                  
   186                                  
   187                                  %include "assets.asm"
     1                              <1> img:
     2 00000477 <bin C0h>           <1>   .walk_bw_1 incbin "data/sprites/walk_bw_1.bin"
     3 00000537 <bin C0h>           <1>   .walk_bw_2 incbin "data/sprites/walk_bw_2.bin"
     4 000005F7 <bin C0h>           <1>   .walk_fw_1 incbin "data/sprites/walk_fw_1.bin"
     5 000006B7 <bin C0h>           <1>   .walk_fw_2 incbin "data/sprites/walk_fw_2.bin"
     6 00000777 <bin C0h>           <1>   .walk_left_1 incbin "data/sprites/walk_left_1.bin"
     7 00000837 <bin C0h>           <1>   .walk_left_2 incbin "data/sprites/walk_left_2.bin"
     8 000008F7 <bin C0h>           <1>   .walk_left_3 incbin "data/sprites/walk_left_3.bin"
     9 000009B7 <bin C0h>           <1>   .walk_left_4 incbin "data/sprites/walk_left_4.bin"
    10 00000A77 <bin C0h>           <1>   .walk_right_1 incbin "data/sprites/walk_right_1.bin"
    11 00000B37 <bin C0h>           <1>   .walk_right_2 incbin "data/sprites/walk_right_2.bin"
    12 00000BF7 <bin C0h>           <1>   .walk_right_3 incbin "data/sprites/walk_right_3.bin"
    13 00000CB7 <bin C0h>           <1>   .walk_right_4 incbin "data/sprites/walk_right_4.bin"
    14 00000D77 <bin C0h>           <1>   .stand_1 incbin "data/sprites/stand_1.bin"
    15 00000E37 <bin C0h>           <1>   .stand_2 incbin "data/sprites/stand_2.bin"
    16 00000EF7 <bin C0h>           <1>   .stand_3 incbin "data/sprites/stand_3.bin"
    17 00000FB7 <bin C0h>           <1>   .stand_4 incbin "data/sprites/stand_4.bin"
    18                              <1> 
    19                              <1> 
   188                                  ; kipjes: incbin "data/bg/200x176.bin"
   189                                  
   190                                  
   191 00001077 <bin 302h>              img1: incbin "data/ship/ship-1.spr"
   192 00001379 <bin 302h>              img2: incbin "data/ship/ship-2.spr"
   193 0000167B <bin 302h>              img3: incbin "data/ship/ship-3.spr"
   194 0000197D <bin 302h>              img4: incbin "data/ship/ship-4.spr"
   195 00001C7F <bin 302h>              img5: incbin "data/ship/ship-5.spr"
   196 00001F81 <bin 302h>              img6: incbin "data/ship/ship-6.spr"
   197 00002283 <bin 302h>              img7: incbin "data/ship/ship-7.spr"
   198 00002585 <bin 302h>              img8: incbin "data/ship/ship-8.spr"
   199 00002887 <bin 302h>              img9: incbin "data/ship/ship-9.spr"
   200 00002B89 <bin 302h>              img10: incbin "data/ship/ship-10.spr"
   201 00002E8B <bin 302h>              img11: incbin "data/ship/ship-11.spr"
   202 0000318D <bin 302h>              img12: incbin "data/ship/ship-12.spr"
   203 0000348F <bin 302h>              img13: incbin "data/ship/ship-13.spr"
   204 00003791 <bin 302h>              img14: incbin "data/ship/ship-14.spr"
   205 00003A93 <bin 302h>              img15: incbin "data/ship/ship-15.spr"
   206 00003D95 <bin 302h>              img16: incbin "data/ship/ship-16.spr"
   207 00004097 <bin 302h>              img17: incbin "data/ship/ship-17.spr"
   208 00004399 <bin 302h>              img18: incbin "data/ship/ship-18.spr"
   209 0000469B <bin 302h>              img19: incbin "data/ship/ship-19.spr"
   210 0000499D <bin 302h>              img20: incbin "data/ship/ship-20.spr"
   211 00004C9F <bin 302h>              img21: incbin "data/ship/ship-21.spr"
   212 00004FA1 <bin 302h>              img22: incbin "data/ship/ship-22.spr"
   213 000052A3 <bin 302h>              img23: incbin "data/ship/ship-23.spr"
   214 000055A5 <bin 302h>              img24: incbin "data/ship/ship-24.spr"
   215                                  
   216                                  
   217 000058A7 00<rep 27759h>          times (180*1024)-($-$$) db 0
   218                                  
   219                                  
   220                                  
