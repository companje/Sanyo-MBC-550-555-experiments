     1                                  org 0
     2                                  cpu 8086
     3                                  
     4                                  H equ 50      ; 50x4 lines = 200px
     5                                  W equ 72    ; =COLS
     6                                  WH equ W*H
     7                                  ; RED   equ 0xf000
     8                                  ; GREEN equ 0x0c00  ;; 1=0x0c00 2=0x1c00, 3=0x2c00, 4=0x3c00 ????
     9                                  ; BLUE  equ 0xf400
    10                                  
    11 00000000 EB18                    jmp setup
    12                                  
    13 00000002 53616E796F312E32            db 'Sanyo1.2'
    14 0000000A 0002                        dw 512     ; Number of bytes per sector
    15 0000000C 02                          db 2       ; Number of sectors per cluster
    16 0000000D 01                          db 1       ; Number of FAT copies
    17 0000000E 0002                        dw 512     ; Number of root directory entries
    18 00000010 70                          db 112     ; Total number of sectors in the filesystem
    19 00000011 00                          db 0       ; Media descriptor type
    20 00000012 0002                        dw 512     ; Number of sectors per FAT
    21 00000014 FD02                        dw 765     ; ? Number of sectors per track
    22 00000016 00                          db 0     ; ? Number of heads   (now first byte of sine table)
    23 00000017 09                          db 9     ; ? Number of heads  
    24 00000018 0002                        dw 512   ; Number of hidden sectors
    25                                  
    26                                  %include "1.asm"
     1                              <1> COLS  equ 72
     2                              <1> TOP   equ 9*4*COLS+20*4    ; row=9,col=20
     3                              <1> RED   equ 0xf0
     4                              <1> GREEN equ 0x0c
     5                              <1> BLUE  equ 0xf4
     6                              <1> 
     7                              <1> effect_timeout equ 50      ; every 30 frames another effect
     8                              <1> isqrt_table    equ 1000    ; available location in code segment
     9                              <1> 
    10                              <1> ; using dx and bx registers as t,i,x,y variables
    11                              <1> %define t dh
    12                              <1> %define i dl
    13                              <1> %define x bh
    14                              <1> %define y bl
    15                              <1> 
    16                              <1> ; fx_table:      ; the 'effects' table: 8 bytes, overwriting the 'Sanyo1.2' tag
    17                              <1> ;     db fx0,fx1,fx2,fx3
    18                              <1> 
    19                              <1> ; sin_table: ;31 bytes, (input -15..15 index=0..31)
    20                              <1> ;     db 0,-3,-6,-9,-11,-13,-15,-15,-15,-15,-13,-11,-9,-6,-3,
    21                              <1> ;     db 0, 3, 6, 9, 11, 13, 15, 15, 15, 15, 13, 11, 9, 6, 3,0  
    22                              <1>     ; tried to mirror the second line of the sine table with code 
    23                              <1>     ; but would take a same of amount of bytes
    24                              <1> 
    25                              <1> ; fx0: ; x
    26                              <1> ;     mov al,x
    27                              <1> ;     ret
    28                              <1> 
    29                              <1> ; fx1: ; y-7
    30                              <1> ;     mov al,y
    31                              <1> ;     sub al,7
    32                              <1> ;     ret
    33                              <1> 
    34                              <1> ; fx2: ; y+t
    35                              <1> ;     mov al,y
    36                              <1> ;     add al,t
    37                              <1> ;     ret
    38                              <1> 
    39                              <1> ; fx3: ; y-t
    40                              <1> ;     mov al,y
    41                              <1> ;     sub al,x
    42                              <1> ;     ret
    43                              <1> 
    44                              <1> ; sin: ; sine function
    45                              <1> ;     call wrap
    46                              <1> ;     push bx
    47                              <1> ;     add al,15 ; sin(-15) = sin_table[0]
    48                              <1> ;     mov bx,sin_table
    49                              <1> ;     xlat 
    50                              <1> ;     pop bx
    51                              <1> ;     ret
    52                              <1> 
    53                              <1> ; wrap: ; while (al>15) al-=15; while (al<-15) al+=15
    54                              <1> ;     cmp al,15
    55                              <1> ;     jg .sub16
    56                              <1> ;     cmp al,-15
    57                              <1> ;     jl .add16
    58                              <1> ;     ret
    59                              <1> ;   .sub16:
    60                              <1> ;     sub al,31
    61                              <1> ;     jmp wrap
    62                              <1> ;   .add16:
    63                              <1> ;     add al,31
    64                              <1> ;     jmp wrap
    65                              <1> 
    66                              <1> ; limit: ; if (al>15) al=15; else if (al<-15) al=-15;
    67                              <1> ;     cmp al,15
    68                              <1> ;     jg .pos16
    69                              <1> ;     cmp al,-15
    70                              <1> ;     jnl .ret
    71                              <1> ;     mov al,-15
    72                              <1> ;     ret
    73                              <1> ;   .pos16:
    74                              <1> ;     mov al,15
    75                              <1> ;   .ret:
    76                              <1> ;     ret
    77                              <1> 
    78                              <1> ; calc_isqrt_xx_yy: ; isqrt_table[i] = sqrt(x^2+y^2)
    79                              <1> ;     push dx
    80                              <1> ;     push di
    81                              <1> ;     mov di,isqrt_table      ; di=isqrt_table[0]
    82                              <1> ;     add di,dx               ; di+=i
    83                              <1> ;     mov al,x
    84                              <1> ;     inc al
    85                              <1> ;     mul al                  ; x*x
    86                              <1> ;     xchg ax,cx
    87                              <1> ;     mov al,y
    88                              <1> ;     inc al
    89                              <1> ;     mul al                  ; y*y
    90                              <1> ;     add ax,cx               ; + 
    91                              <1> ;   .isqrt:  ; while((L+1)^2<=y) L++; return L
    92                              <1> ;     xchg cx,ax              ; cx=y
    93                              <1> ;     xor ax,ax               ; ax=L=0
    94                              <1> ;   .loop:
    95                              <1> ;     inc ax
    96                              <1> ;     push ax
    97                              <1> ;     mul ax
    98                              <1> ;     cmp ax,cx
    99                              <1> ;     pop ax
   100                              <1> ;     jl .loop
   101                              <1> ;     dec ax
   102                              <1> ;   .end_isqrt:
   103                              <1> ;     mov [di],al             ; store al
   104                              <1> ;     pop di
   105                              <1> ;     pop dx
   106                              <1> ;     ret
   107                              <1> 
   108                              <1> setup:
   109                              <1> 
   110                              <1>   ;no need to clear the screen. ROM BIOS does this already.
   111                              <1> 
   112                              <1>     ;set ds and es segments to cs
   113 0000001A 0E                  <1>     push cs
   114 0000001B 1F                  <1>     pop ds                  ; ds:si in code segment
   115 0000001C 0E                  <1>     push cs
   116 0000001D 07                  <1>     pop es                  ; es:di in code segment
   117                              <1> 
   118                              <1>     ; generate 16x8 bitmap data for 16 sizes of dots.
   119                              <1>     ; Because the dots are symmetric we can save at least
   120                              <1>     ; 97 bytes by mirroring the left-top corner 3 times
   121                              <1> 
   122 0000001E E87B00              <1>     call generate_chars
   123                              <1> 
   124 00000021 31ED                <1>     xor bp,bp               ; start with effect 0
   125 00000023 31D2                <1>     xor dx,dx               ; t=i=0 (clear time and index)
   126                              <1> 
   127                              <1> draw:
   128 00000025 BF700A              <1>     mov di,TOP              ; left top corner to center tixy
   129                              <1>   .dot:
   130 00000028 52                  <1>     push dx
   131 00000029 88D0                <1>     mov al,i                ; al=index
   132 0000002B 30E4                <1>     xor ah,ah               ; ah=0
   133 0000002D B110                <1>     mov cl,16
   134 0000002F F6F1                <1>     div cl                  ; calculate x and y from i
   135 00000031 93                  <1>     xchg ax,bx              ; bh=x, bl=y
   136 00000032 5A                  <1>     pop dx
   137                              <1> 
   138                              <1>     ;on the first frame calc sqrt table for every i
   139                              <1>     ;reusing the i,x,y loop here. this saves some bytes.
   140                              <1>     ; or t,t
   141                              <1>     ; jnz .call_effect
   142                              <1>     ; call calc_isqrt_xx_yy
   143                              <1>   
   144                              <1>   ; .call_effect:
   145                              <1>   ;   push bp                   ; bp contains current effect number
   146                              <1>   ;   mov bp, [fx_table + bp]   ; overwrite bp with address of effect
   147                              <1>   ;   and bp,0xff               ; reduce address to single byte
   148                              <1>   ;   call bp                   ; call effect, al contains result
   149                              <1>   ;   pop bp                    ; restore effect number
   150 00000033 B00F                <1>    mov al,15
   151                              <1> 
   152                              <1>   .draw_char_color:
   153 00000035 3C00                <1>     cmp al,0
   154 00000037 9C                  <1>     pushf
   155 00000038 7D02                <1>     jge .red
   156 0000003A F6D8                <1>     neg al
   157                              <1> 
   158                              <1>   .red:
   159 0000003C B900F0              <1>     mov cx,RED << 8         ; ch=0xf0, cl=0
   160 0000003F E83900              <1>     call draw_char
   161 00000042 9D                  <1>     popf
   162 00000043 7D02                <1>     jge .green_blue
   163 00000045 30C0                <1>     xor al,al               ; if negative then just red so clear (al=0) green and blue
   164                              <1> 
   165                              <1>   .green_blue:
   166 00000047 B50C                <1>     mov ch,GREEN
   167 00000049 E82F00              <1>     call draw_char
   168 0000004C B5F4                <1>     mov ch,BLUE
   169 0000004E E82A00              <1>     call draw_char
   170                              <1> 
   171                              <1>   .next:  
   172 00000051 FEC2                <1>     inc i                   ; i++
   173 00000053 83C708              <1>     add di,8         
   174 00000056 80FF0F              <1>     cmp x,15
   175 00000059 7CCD                <1>     jl .dot                  ; next col
   176 0000005B 81C72001            <1>     add di,4*COLS       
   177 0000005F 81C7A000            <1>     add di,160
   178 00000063 80FB0F              <1>     cmp y,15
   179 00000066 7CC0                <1>     jl .dot                  ; next line
   180 00000068 FEC6                <1>     inc t
   181 0000006A 80FE32              <1>     cmp t,effect_timeout
   182 0000006D 72B6                <1>     jb draw                 ; next frame
   183 0000006F 45                  <1>     inc bp                  ; inc effect
   184 00000070 30F6                <1>     xor t,t                 ; reset time
   185 00000072 83FD03              <1>     cmp bp,3
   186 00000075 7CAE                <1>     jl draw                 ; next effect
   187 00000077 31ED                <1>     xor bp,bp               ; reset effect
   188 00000079 EBAA                <1>     jmp draw
   189                              <1> 
   190                              <1> draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   191 0000007B 50                  <1>     push ax
   192 0000007C 57                  <1>     push di
   193                              <1> 
   194 0000007D 51                  <1>     push cx
   195 0000007E 07                  <1>     pop es                  ; es=bp (color channel now cx)
   196 0000007F 0E                  <1>     push cs
   197 00000080 1F                  <1>     pop ds                  ; ds=cs
   198                              <1> 
   199 00000081 B90400              <1>     mov cx,4
   200 00000084 51                  <1>     push cx
   201 00000085 51                  <1>     push cx
   202                              <1> 
   203 00000086 240F                <1>     and al,15               ; limit al to 15
   204 00000088 98                  <1>     cbw                     ; ah=0
   205                              <1>    
   206 00000089 D2E0                <1>     shl al,cl               ; al*=16
   207 0000008B 05[3801]            <1>     add ax,bitmap_data
   208 0000008E 96                  <1>     xchg si,ax              ; si = source address of rendered bitmap char
   209                              <1> 
   210 0000008F 59                  <1>     pop cx                  ;cx=4
   211 00000090 F3A5                <1>     rep movsw
   212 00000092 81C71801            <1>     add di,4*COLS-8
   213 00000096 59                  <1>     pop cx                  ;cx=4
   214 00000097 F3A5                <1>     rep movsw
   215                              <1> 
   216 00000099 5F                  <1>     pop di                    
   217 0000009A 58                  <1>     pop ax
   218 0000009B C3                  <1>     ret
   219                              <1> 
   220                              <1> generate_chars:
   221 0000009C BF[3801]            <1>     mov di,bitmap_data      ; dest address of render data
   222 0000009F 30FF                <1>     xor bh,bh
   223                              <1>   
   224                              <1>   .render_char:
   225 000000A1 30E4                <1>     xor ah,ah
   226 000000A3 88F8                <1>     mov al,bh
   227 000000A5 B90400              <1>     mov cx,4                ; cl is also used below
   228 000000A8 F6E1                <1>     mul cl
   229 000000AA 89C6                <1>     mov si,ax
   230 000000AC 81C6[F800]          <1>     add si,img
   231                              <1>   
   232                              <1>   .render_char_part:        ; input requirement at first time cl=4
   233 000000B0 AC                  <1>     lodsb                   ; use lodsb instead of movsb to keep a copy in al
   234 000000B1 AA                  <1>     stosb                   ; draw in left top nibble
   235 000000B2 53                  <1>     push bx                 ; save cur x and y
   236 000000B3 51                  <1>     push cx                 ; cur loop counter (4,3,2,1)
   237 000000B4 51                  <1>     push cx
   238 000000B5 5B                  <1>     pop bx                  ; bx = counter
   239 000000B6 D1E3                <1>     shl bx,1                ; bx *= 2
   240 000000B8 53                  <1>     push bx                 ; save counter*2 for right bottom
   241 000000B9 83FB02              <1>     cmp bx,2                ; skip top line of left bottom nibble
   242 000000BC 7403                <1>     je .flip_bits
   243 000000BE 884101              <1>     mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   244                              <1> 
   245                              <1>   .flip_bits:                 ; flips all bits dropping highest bit
   246 000000C1 B108                <1>     mov cl,8                ; 8 bits to flip
   247 000000C3 30E4                <1>     xor ah,ah
   248                              <1>   
   249                              <1>   .flip_bit:
   250 000000C5 BB0180              <1>     mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   251 000000C8 D2E3                <1>     shl bl,cl
   252 000000CA 84D8                <1>     test al,bl
   253 000000CC 7406                <1>     jz .next_bit
   254 000000CE 49                  <1>     dec cx
   255 000000CF D2EF                <1>     shr bh,cl
   256 000000D1 08FC                <1>     or ah,bh
   257 000000D3 41                  <1>     inc cx
   258                              <1> 
   259                              <1>   .next_bit:
   260 000000D4 E2EF                <1>     loop .flip_bit          ; loop 8 bits for flipping
   261 000000D6 886503              <1>     mov [di+3],ah           ; draw in right top nibble
   262 000000D9 5B                  <1>     pop bx                  ; bx = counter*2
   263 000000DA 83FB02              <1>     cmp bx,2                ; skip top line of right bottom nibble
   264 000000DD 7403                <1>     je .flip_done
   265 000000DF 886105              <1>     mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   266                              <1> 
   267                              <1>   .flip_done:
   268 000000E2 59                  <1>     pop cx                  ; restore loop counter
   269 000000E3 5B                  <1>     pop bx                  ; restore x and y
   270 000000E4 E2CA                <1>     loop .render_char_part
   271                              <1> 
   272                              <1>   .clear_bottom_line:
   273 000000E6 83C707              <1>     add di,7
   274 000000E9 30C0                <1>     xor al,al
   275 000000EB AA                  <1>     stosb                   ; right bottom
   276 000000EC 83C703              <1>     add di,3
   277 000000EF AA                  <1>     stosb                   ; left bottom
   278                              <1> 
   279                              <1>   .next_char:
   280 000000F0 FEC7                <1>     inc bh                  ; next char
   281 000000F2 80FF10              <1>     cmp bh,16
   282 000000F5 7CAA                <1>     jl .render_char
   283 000000F7 C3                  <1>     ret
   284                              <1> 
   285                              <1> img:
   286 000000F8 00000000            <1>     db 0,0,0,0
   287 000000FC 00000001            <1>     db 0,0,0,1
   288 00000100 00000003            <1>     db 0,0,0,3
   289 00000104 00000103            <1>     db 0,0,1,3
   290 00000108 00000307            <1>     db 0,0,3,7
   291 0000010C 0000070F            <1>     db 0,0,7,15
   292 00000110 00030F1F            <1>     db 0,3,15,31
   293 00000114 00071F3F            <1>     db 0,7,31,63
   294 00000118 010F3F3F            <1>     db 1,15,63,63
   295 0000011C 031F3F3F            <1>     db 3,31,63,63
   296 00000120 071F3F7F            <1>     db 7,31,63,127
   297 00000124 071F7F7F            <1>     db 7,31,127,127
   298 00000128 073F7F7F            <1>     db 7,63,127,127
   299 0000012C 0F3F7F7F            <1>     db 15,63,127,127
   300 00000130 0F3F7FFF            <1>     db 15,63,127,255
   301 00000134 1F7FFFFF            <1>     db 31,127,255,255
   302                              <1> 
   303                              <1> ; %assign num $-$$
   304                              <1> ; %warning total num
   305                              <1> 
   306                              <1> bitmap_data:                          ; destination for 128 bytes rendered bitmap data
   307                              <1> 
    27                                  
    28 00000138 00<rep 59EC8h>          times 368640-($-$$) db 0   ;fill up floppy
    29                                  
