     1                                  %include "sanyo.asm"
     1                              <1> %include "header.asm"
     1                              <2> org 0
     2                              <2> cpu 8086
     3                              <2> 
     4                              <2> RED   equ 0xf000
     5                              <2> GREEN equ 0x1c00
     6                              <2> BLUE  equ 0xf400
     7                              <2> COLS  equ 72
     8                              <2> DST   equ 0x38 ; 7F5h                ; absolute addres: 32592
     9                              <2> NUM_SECTORS equ 9  ; 160 ... 360k met 2 sectors per KB    ; number of sectors for your user code
    10                              <2> XD    equ 4
    11                              <2> YD    equ COLS*XD
     2                              <1> 
     3 00000000 EB1B                <1> jmp bootloader
     4                              <1> 
     5 00000002 5269636B79626F7949- <1> db 'RickyboyII',1,0,0,2,112,0,0,0,2,0,253,2,0,9,0,2,0  ; 2,0, is replaced by II
     5 0000000B 490100000270000000- <1>
     5 00000014 0200FD020009000200  <1>
     6                              <1> 
     7                              <1> bootloader:
     8 0000001D FA                  <1>   cli
     9 0000001E FC                  <1>   cld
    10                              <1> 
    11 0000001F B8001C              <1>   mov ax, GREEN     ; green segment
    12 00000022 8EC0                <1>   mov es, ax
    13 00000024 BF0000              <1>   mov di, 0
    14 00000027 B80000              <1>   mov ax, 0
    15 0000002A B90020              <1>   mov cx, 2000h
    16 0000002D F3AB                <1>   rep stosw         ; clear screen
    17 0000002F B005                <1>   mov al, 5
    18 00000031 E610                <1>   out 10h, al       ; set green video page
    19                              <1>   
    20                              <1>   ; hlt
    21                              <1> 
    22 00000033 8CC8                <1>   mov ax, cs
    23 00000035 8ED8                <1>   mov ds, ax
    24 00000037 B83800              <1>   mov ax, DST       ; was 7F5h, destination segment for floppy data
    25 0000003A 8EC0                <1>   mov es, ax
    26 0000003C BF0000              <1>   mov di, 0
    27                              <1> 
    28 0000003F B200                <1>   mov dl, 0         ; track=0 (was 1!)
    29 00000041 B601                <1>   mov dh, 1         ; sector=1
    30 00000043 B90900              <1>   mov cx, NUM_SECTORS ;48h       ; read 48h (72) sectors (36864 bytes)
    31 00000046 EB0B                <1>   jmp move_head
    32                              <1> 
    33                              <1> next_sector:
    34 00000048 FEC6                <1>   inc dh                    ; sector++
    35 0000004A 80FE09              <1>   cmp dh, 9
    36 0000004D 7218                <1>   jb  read_sector           ; if (dh<9) read_sector
    37 0000004F B601                <1>   mov dh, 1
    38 00000051 FEC2                <1>   inc dl                    ; else track++ ; sector=1
    39                              <1> 
    40                              <1> move_head:
    41 00000053 88D0                <1>   mov al, dl
    42 00000055 E60E                <1>   out 0Eh, al               ; set track number
    43 00000057 B018                <1>   mov al, 18h     
    44 00000059 E608                <1>   out 8, al                 ; seek track, load head
    45 0000005B B000                <1>   mov al, 0
    46 0000005D E61C                <1>   out 1Ch, al               ; set desired drive/side
    47 0000005F D40A                <1>   aam
    48                              <1> 
    49                              <1> .head_moving
    50 00000061 E408                <1>   in al, 8
    51 00000063 A801                <1>   test al, 1
    52 00000065 75FA                <1>   jnz .head_moving
    53                              <1> 
    54                              <1> read_sector:
    55 00000067 88F0                <1>   mov al, dh
    56 00000069 E60C                <1>   out 0Ch, al               ; sector number
    57 0000006B 89D5                <1>   mov bp, dx                ; save dx. we use it tmp for status request
    58 0000006D BA0800              <1>   mov dx, 8
    59                              <1> 
    60 00000070 B702                <1>   mov bh, 2                 ; 00000010b
    61 00000072 B396                <1>   mov bl, 96h               ; 10010110b
    62                              <1> 
    63 00000074 B400                <1>   mov ah, 0
    64 00000076 B080                <1>   mov al, 80h
    65 00000078 E608                <1>   out 8, al                 ; read sector
    66 0000007A 89FC                <1>   mov sp, di                ; save di. we should not be using push/pop from now on
    67 0000007C D40A<rep 4h>        <1>   times 4 aam               ; wait
    68                              <1> 
    69                              <1> check_status_1:
    70 00000084 EC                  <1>   in  al, dx                ; read status
    71 00000085 D0F8                <1>   sar al, 1                 ; status/=2
    72 00000087 731C                <1>   jnb check_status_3
    73 00000089 75F9                <1>   jnz check_status_1
    74                              <1> 
    75                              <1> wait_for_data:
    76 0000008B EC                  <1>   in  al, dx                ; read status
    77 0000008C 20D8                <1>   and al, bl                ; 96h
    78 0000008E 74FB                <1>   jz  wait_for_data
    79                              <1> 
    80                              <1> store_byte_1:
    81 00000090 E40E                <1>   in  al, 0Eh
    82 00000092 AA                  <1>   stosb
    83                              <1> 
    84                              <1> check_status_2:
    85 00000093 EC                  <1>   in  al, dx                ; read status
    86 00000094 48                  <1>   dec ax                    ; status--
    87 00000095 74FC                <1>   jz  check_status_2        ; if (status==0) repeat
    88 00000097 38F8                <1>   cmp al, bh                ; bh=2
    89 00000099 750A                <1>   jnz check_status_3        ; if (status==1) 
    90                              <1> 
    91                              <1> store_byte_2:
    92 0000009B E40E                <1>   in  al, 0Eh
    93 0000009D AA                  <1>   stosb
    94                              <1> 
    95                              <1> check_status_4:
    96 0000009E EC                  <1>   in  al, dx                ; read status
    97 0000009F 38F8                <1>   cmp al, bh                ; bh=2
    98 000000A1 74F8                <1>   jz  store_byte_2          ; if (status==2) repeat
    99 000000A3 EBEE                <1>   jmp check_status_2        ; else: was jmp SI
   100                              <1> 
   101                              <1> ; ───────────────────────────────────────────────────────────────────────────
   102                              <1> 
   103                              <1> check_status_3:
   104 000000A5 EC                  <1>   in  al, dx                ; read status
   105 000000A6 89EA                <1>   mov dx, bp                ; restore dx
   106 000000A8 A81C                <1>   test  al, 1Ch             ; 00011100
   107 000000AA 7404                <1>   jz  while_sectors
   108 000000AC 89E7                <1>   mov di, sp                ; restore di
   109 000000AE EBB7                <1>   jmp read_sector
   110                              <1> 
   111                              <1> ; ───────────────────────────────────────────────────────────────────────────
   112                              <1> 
   113                              <1> while_sectors:
   114 000000B0 E296                <1>   loop next_sector
   115                              <1> 
   116                              <1> done_reading:
   117 000000B2 B80000              <1>   mov ax,0
   118 000000B5 8ED0                <1>   mov ss,ax
   119 000000B7 BC0000              <1>   mov sp,0
   120                              <1> 
   121 000000BA 0E                  <1>   push cs
   122 000000BB 1F                  <1>   pop ds
   123 000000BC E94101              <1>   jmp setup                 ; important to jmp to allow variables above setup
   124                              <1> 
   125                              <1> 
   126 000000BF 00<rep 141h>        <1> times (512)-($-$$) db 0
   127                              <1> 
   128                              <1> 
   129                              <1> 
     2                                  
     3                                  ; db 0
     4                                  
     5                                  setup:
     6                                  
     7                                  ;   hlt
     8                                  
     9                                  ;   times 512 db 1
    10                                  ;   times 512 db 2
    11                                  ;   times 512 db 3
    12                                  ;   times 512 db 4
    13                                  ;   times 512 db 5
    14                                  ;   times 512 db 6
    15                                  ;   times 512 db 7
    16                                  ;   times 512 db 8
    17                                  ;   times 512 db 9
    18                                  ;   times 512 db 10
    19                                  ;   times 512 db 11
    20                                  ;   times 512 db 12
    21                                  ;   times 512 db 13
    22                                  ;   times 512 db 14
    23                                  ;   times 512 db 15
    24                                  ;   times 512 db 16
    25                                  ;   times 512 db 17
    26                                  ;   times 512 db 18
    27                                  ;   times 512 db 19
    28                                  ;   times 512 db 20
    29                                  ;   times 512 db 21
    30                                  ;   times 512 db 22
    31                                  ;   times 512 db 23
    32                                  ;   times 512 db 24
    33                                  ;   times 512 db 25
    34                                  ;   times 512 db 26
    35                                  ;   times 512 db 27
    36                                  ;   times 512 db 28
    37                                  ;   times 512 db 29
    38                                  ;   times 512 db 30
    39                                  ;   times 512 db 31
    40                                  ;   times 512 db 32
    41                                  ;   times 512 db 33
    42                                  ;   times 512 db 34
    43                                  ;   times 512 db 35
    44                                  ;   times 512 db 36
    45                                  ;   times 512 db 37
    46                                  ;   times 512 db 38
    47                                  ;   times 512 db 39
    48                                  ;   times 512 db 40
    49                                  ;   times 512 db 41
    50                                  ;   times 512 db 42
    51                                  ;   times 512 db 43
    52                                  ;   times 512 db 44
    53                                  ;   times 512 db 45
    54                                  ;   times 512 db 46
    55                                  ;   times 512 db 47
    56                                  ;   times 512 db 48
    57                                  ;   times 512 db 49
    58                                  ;   times 512 db 50
    59                                  ;   times 512 db 51
    60                                  ;   times 512 db 52
    61                                  ;   times 512 db 53
    62                                  ;   times 512 db 54
    63                                  ;   times 512 db 55
    64                                  ;   times 512 db 56
    65                                  ;   times 512 db 57
    66                                  ;   times 512 db 58
    67                                  ;   times 512 db 59
    68                                  ;   times 512 db 60
    69                                  ;   times 512 db 61
    70                                  ;   times 512 db 62
    71                                  ;   times 512 db 63
    72                                  ;   times 512 db 64
    73                                  ;   times 512 db 65
    74                                  ;   times 512 db 66
    75                                  ;   times 512 db 67
    76                                  ;   times 512 db 68
    77                                  ;   times 512 db 69
    78                                  ;   times 512 db 70
    79                                  ;   times 512 db 71
    80                                  ;   times 512 db 72
    81                                  ;   times 512 db 73
    82                                  ;   times 512 db 74
    83                                  ;   times 512 db 75
    84                                  ;   times 512 db 76
    85                                  
    86                                  
    87                                  
    88                                  ; times (360*1024)-($-$$) db 0
    89                                  
