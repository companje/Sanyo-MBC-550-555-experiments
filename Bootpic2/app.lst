     1                                  ; %include "sanyo.asm"
     2                                  ; %include "header.asm"
     3                                  org 0
     4                                  cpu 8086
     5                                  RED equ 0xf000
     6                                  COLS equ 72
     7 00000000 EB04                    jmp setup
     8                                  
     9                                  %macro set_cursor 2
    10                                    mov bl, %1           ; Zet X in BL
    11                                    mov bh, %2           ; Zet Y in BH
    12                                    call calc_di
    13                                  %endmacro
    14                                   
    15                                  %macro set_channel 1
    16                                    mov ax, %1
    17                                    mov es, ax
    18                                  %endmacro
    19                                  
    20                                  %macro move_down 0
    21                                    add di,YD
    22                                  %endmacro
    23                                  
    24                                  %macro move_up 0
    25                                    sub di,-YD
    26                                  %endmacro
    27                                  
    28                                  p:
    29 00000002 20                      .x db 32
    30 00000003 FF                      .vx db -1
    31 00000004 19                      .y db 25
    32 00000005 01                      .vy db 1
    33                                  
    34                                  setup:
    35 00000006 8CC8                      mov ax, cs
    36 00000008 8ED8                      mov ds, ax
    37                                  
    38 0000000A EB00                      jmp draw
    39                                  
    40                                  draw:
    41                                    set_channel RED
    16 0000000C B800F0              <1>  mov ax, %1
    17 0000000F 8EC0                <1>  mov es, ax
    42 00000011 8B1E[0200]                mov bx, [p.x]           ; x and vx
    43 00000015 8B16[0400]                mov dx, [p.y]           ; y and vy
    44                                  
    45                                    ; Controleer x-richting
    46 00000019 80FB01                    cmp bl, 1              ; Check if x <= 10
    47 0000001C 7F04                      jg .check_x_max         ; If x > 10, skip to next check
    48 0000001E F6DF                      neg bh                  ; Reverse vx
    49 00000020 EB07                      jmp .check_y            ; Skip y-check if x condition is met
    50                                  
    51                                  .check_x_max:
    52 00000022 80FB3F                    cmp bl, 63              ; Check if x >= 50
    53 00000025 7C02                      jl .check_y             ; If x < 50, continue to y-check
    54 00000027 F6DF                      neg bh                  ; Reverse vx
    55                                  
    56                                    ; Controleer y-richting
    57                                  .check_y:
    58 00000029 80FA01                    cmp dl, 1               ; Check if y <= 1
    59 0000002C 7F04                      jg .check_y_max         ; If y > 1, skip to next check
    60 0000002E F6DE                      neg dh                  ; Reverse vy
    61 00000030 EB07                      jmp .update             ; Skip updates if y condition is met
    62                                  
    63                                  .check_y_max:
    64 00000032 80FA31                    cmp dl, 49              ; Check if y >= 45
    65 00000035 7C02                      jl .update              ; If y < 45, continue
    66 00000037 F6DE                      neg dh                  ; Reverse vy
    67                                  
    68                                  .update:
    69 00000039 00FB                      add bl, bh              ; Update x with vx
    70 0000003B 891E[0200]                mov [p.x], bx           ; Store the updated x and vx
    71                                  
    72 0000003F 00F2                      add dl, dh              ; Update y with vy
    73 00000041 8916[0400]                mov [p.y], dx           ; Store the updated y and vy
    74                                  
    75                                    set_cursor [p.x], [p.y]
    10 00000045 8A1E[0200]          <1>  mov bl, %1
    11 00000049 8A3E[0400]          <1>  mov bh, %2
    12 0000004D E84300              <1>  call calc_di
    76 00000050 B8FFFF                    mov ax, -1
    77 00000053 AB                        stosw
    78 00000054 AB                        stosw
    79                                  
    80 00000055 E83200                    call wait_vsync
    81                                  
    82                                    set_cursor [p.x], [p.y]
    10 00000058 8A1E[0200]          <1>  mov bl, %1
    11 0000005C 8A3E[0400]          <1>  mov bh, %2
    12 00000060 E83000              <1>  call calc_di
    83 00000063 B80000                    mov ax, 0
    84 00000066 AB                        stosw
    85 00000067 AB                        stosw
    86                                  
    87 00000068 EBA2                      jmp draw
    88                                  
    89                                  
    90                                  
    91                                  
    92                                  
    93                                  
    94                                  flash_red:
    95 0000006A 06                        push es
    96 0000006B 31FF                      xor di,di
    97                                    set_channel RED
    16 0000006D B800F0              <1>  mov ax, %1
    17 00000070 8EC0                <1>  mov es, ax
    98 00000072 B9201C                    mov cx,7200
    99 00000075 B8FFFF                    mov ax,-1
   100 00000078 F3AB                      rep stosw
   101 0000007A 31FF                      xor di,di
   102 0000007C E80B00                    call wait_vsync
   103 0000007F B9201C                    mov cx,7200
   104 00000082 B80000                    mov ax,0
   105 00000085 F3AB                      rep stosw
   106 00000087 07                        pop es
   107 00000088 C3                        ret
   108                                  
   109                                  
   110                                  
   111                                  
   112                                  ; draw:
   113                                    
   114                                    ; mov al,[p.vx]
   115                                    ; add byte [p.x],al
   116                                    ; inc byte [p.x]
   117                                  
   118                                    ; cmp byte [p.x],COLS-1
   119                                    ; je bounceX
   120                                    ; cmp byte [p.x],1
   121                                    ; je bounceX
   122                                  
   123 00000089 F4                        hlt
   124                                  
   125                                    ; call flash_red
   126                                  
   127                                    ; call wait_vsync
   128                                  
   129                                  
   130                                    ; set_cursor [p.x],[p.y]
   131                                    ; mov ax,0
   132                                    ; stosw
   133                                    ; stosw
   134                                  
   135                                    ; inc byte [p.x]
   136                                  
   137                                  
   138                                    ; jmp draw
   139                                  
   140                                    ; mov si,img    ; first image
   141                                    
   142                                    ; lodsw
   143                                    ; mov bx,ax
   144                                  
   145                                    ; hlt
   146                                  
   147                                    ; xor bx,bx
   148                                    ; call calc_di
   149                                    ; mov bl,72              ; width in cols (1 col = 8px)
   150                                    ; mov bh,16               ; height in rows (1 row = 4px)
   151                                    ; call draw_pic
   152                                  
   153                                    ; hlt
   154                                  
   155                                  wait_vsync:
   156 0000008A FC                        cld
   157 0000008B B9F401                    mov cx,500
   158                                  .w
   159 0000008E D40A                      aam
   160 00000090 E2FC                      loop .w
   161 00000092 C3                        ret
   162                                  
   163                                  calc_di:          ; input bl,bh [0,0,71,49]
   164 00000093 B89000                    mov ax,144      ; 2*72 cols
   165 00000096 F6E7                      mul bh          ; bh*=144 resultaat in AX
   166 00000098 D1E0                      shl ax,1        ; verdubbel AX
   167 0000009A 89C7                      mov di,ax       ; di=ax (=bh*288)
   168 0000009C D0E3                      shl bl,1        ; bl*=2
   169 0000009E D0E3                      shl bl,1        ; bl*=2
   170 000000A0 B700                      mov bh,0
   171 000000A2 01DF                      add di,bx       ; di+=bl
   172 000000A4 C3                        ret
   173                                  
   174                                  draw_pic:          ; DI=offset, [BH,BL]=rows,cols
   175 000000A5 B800F0                    mov ax, RED
   176 000000A8 E80700                    call draw_channel
   177                                    ; mov ax, GREEN
   178 000000AB E80400                    call draw_channel
   179                                    ; mov ax, BLUE
   180 000000AE E80100                    call draw_channel
   181 000000B1 C3                        ret
   182                                  
   183                                  draw_channel: 
   184 000000B2 57                        push di
   185 000000B3 8EC0                      mov es,ax
   186 000000B5 31C9                      xor cx,cx  
   187 000000B7 88F9                      mov cl,bh        ; rows (bh)
   188 000000B9 51                      .rows push cx
   189 000000BA 31C9                      xor cx,cx
   190 000000BC 88D9                      mov cl,bl        ; cols (bl)
   191 000000BE A5<rep 2h>              .cols times 2 movsw
   192 000000C0 E2FC                      loop .cols
   193                                    ; cmp bl,COLS
   194 000000C2 81C72001                  add di,COLS*4
   195 000000C6 88D8                      mov al,bl
   196 000000C8 F6E7                      mul bh
   197 000000CA 29C7                      sub di,ax
   198 000000CC 59                        pop cx
   199 000000CD E2EA                      loop .rows
   200 000000CF 5F                        pop di
   201 000000D0 C3                        ret 
   202                                  
   203                                  
   204                                  
   205                                  ; segment data
   206                                  
   207                                  ; times (1000)-($-$$) db 0
   208                                  
   209                                  ; SECTION Assets
   210                                  
   211                                  startAssets:
   212                                  img:
   213 000000D1 <bin 4800h>               .full incbin "data/full.bin"
   214                                    ; .keylock incbin "data/keylock.bin"
   215                                    ; .key incbin "data/key.bin"
   216                                    ; .owl incbin "data/owl.bin"
   217                                    ; .crown incbin "data/crown.bin"
   218                                    ; .goblet incbin "data/goblet.bin"
   219                                    ; .ring incbin "data/ring.bin"
   220                                    ; .globe incbin "data/globe.bin"
   221                                    ; .feather incbin "data/feather.bin"
   222                                    ; .totum incbin "data/totum.bin"
   223                                    ; .scroll incbin "data/scroll.bin"
   224                                    ; .building incbin "data/building.bin"
   225                                    ; .mirror incbin "data/mirror.bin"
   226                                    ; .harp incbin "data/harp.bin"
   227                                    ; .nar incbin "data/nar.bin"
   228                                    ; .computer incbin "data/computer.bin"
   229                                    ; .way_down incbin "data/way_down.bin"
   230                                    ; .way_left incbin "data/way_left.bin"
   231                                    ; .way_up incbin "data/way_up.bin"
   232                                    ; .way_right incbin "data/way_right.bin"
   233                                    ; .pinkbox incbin "data/pinkbox.bin"
   234                                    ; .greenwall_1 incbin "data/greenwall_1.bin"
   235                                    ; .greenwall_2 incbin "data/greenwall_2.bin"
   236                                    ; .greenwall_3 incbin "data/greenwall_3.bin"
   237                                    ; .redwall_1 incbin "data/redwall_1.bin"
   238                                    ; .redwall_2 incbin "data/redwall_2.bin"
   239                                    ; .redwall_3 incbin "data/redwall_3.bin"
   240                                    ; .box incbin "data/box.bin"
   241                                    ; .vbar incbin "data/vbar.bin"
   242                                    ; .hbar incbin "data/hbar.bin"
   243                                    ; .treetop_1 incbin "data/treetop_1.bin"
   244                                    ; .treetop_2 incbin "data/treetop_2.bin"
   245                                    ; .treetop_3 incbin "data/treetop_3.bin"
   246                                    ; .treething incbin "data/treething.bin"
   247                                    ; .treetop_a incbin "data/treetop_a.bin"
   248                                    ; .treetop_b incbin "data/treetop_b.bin"
   249                                    ; .treeroot_a incbin "data/treeroot_a.bin"
   250                                    ; .treeroot_b incbin "data/treeroot_b.bin"
   251                                    ; .cactus_top incbin "data/cactus_top.bin"
   252                                    ; .cactus_bottom incbin "data/cactus_bottom.bin"
   253                                    ; .roof_1 incbin "data/roof_1.bin"
   254                                    ; .roof_2 incbin "data/roof_2.bin"
   255                                    ; .roof_3 incbin "data/roof_3.bin"
   256                                    ; .house1 incbin "data/house1.bin"
   257                                    ; .question incbin "data/question.bin"
   258                                    ; .stars_1 incbin "data/stars_1.bin"
   259                                    ; .stars_2 incbin "data/stars_2.bin"
   260                                    ; .stars_3 incbin "data/stars_3.bin"
   261                                    ; .stars_4 incbin "data/stars_4.bin"
   262                                    ; .walk_bw_1 incbin "data/walk_bw_1.bin"
   263                                    ; .walk_bw_2 incbin "data/walk_bw_2.bin"
   264                                    ; .walk_fw_1 incbin "data/walk_fw_1.bin"
   265                                    ; .walk_fw_2 incbin "data/walk_fw_2.bin"
   266                                    ; .walk_left_1 incbin "data/walk_left_1.bin"
   267                                    ; .walk_left_2 incbin "data/walk_left_2.bin"
   268                                    ; .walk_left_3 incbin "data/walk_left_3.bin"
   269                                    ; .walk_left_4 incbin "data/walk_left_4.bin"
   270                                    ; .walk_right_1 incbin "data/walk_right_1.bin"
   271                                    ; .walk_right_2 incbin "data/walk_right_2.bin"
   272                                    ; .walk_right_3 incbin "data/walk_right_3.bin"
   273                                    ; .walk_right_4 incbin "data/walk_right_4.bin"
   274                                    ; .stand_1 incbin "data/stand_1.bin"
   275                                    ; .stand_2 incbin "data/stand_2.bin"
   276                                    ; .stand_3 incbin "data/stand_3.bin"
   277                                    ; .stand_4 incbin "data/stand_4.bin"
   278                                    ; .donut_1 incbin "data/donut_1.bin"
   279                                    ; .donut_2 incbin "data/donut_2.bin"
   280                                    ; .donut_3 incbin "data/donut_3.bin"
   281                                    ; .donut_4 incbin "data/donut_4.bin"
   282                                    ; .sqr_ani_1 incbin "data/sqr_ani_1.bin"
   283                                    ; .sqr_ani_2 incbin "data/sqr_ani_2.bin"
   284                                    ; .sqr_ani_3 incbin "data/sqr_ani_3.bin"
   285                                    ; .sqr_ani_4 incbin "data/sqr_ani_4.bin"
   286                                    ; .flower_1 incbin "data/flower_1.bin"
   287                                    ; .flower_2 incbin "data/flower_2.bin"
   288                                    ; .flower_3 incbin "data/flower_3.bin"
   289                                    ; .flower_4 incbin "data/flower_4.bin"
   290                                    ; .explode_1 incbin "data/explode_1.bin"
   291                                    ; .explode_2 incbin "data/explode_2.bin"
   292                                    ; .explode_3 incbin "data/explode_3.bin"
   293                                    ; .explode_4 incbin "data/explode_4.bin"
   294                                    ; .creep_1 incbin "data/creep_1.bin"
   295                                    ; .creep_2 incbin "data/creep_2.bin"
   296                                    ; .creep_3 incbin "data/creep_3.bin"
   297                                    ; .creep_4 incbin "data/creep_4.bin"
   298                                    ; .bouncer_1 incbin "data/bouncer_1.bin"
   299                                    ; .bouncer_2 incbin "data/bouncer_2.bin"
   300                                    ; .bouncer_3 incbin "data/bouncer_3.bin"
   301                                    ; .bouncer_4 incbin "data/bouncer_4.bin"
   302                                    ; .eye_1 incbin "data/eye_1.bin"
   303                                    ; .eye_2 incbin "data/eye_2.bin"
   304                                    ; .eye_3 incbin "data/eye_3.bin"
   305                                    ; .eye_4 incbin "data/eye_4.bin"
   306                                    ; .smurf_1 incbin "data/smurf_1.bin"
   307                                    ; .smurf_2 incbin "data/smurf_2.bin"
   308                                    ; .smurf_3 incbin "data/smurf_3.bin"
   309                                    ; .smurf_4 incbin "data/smurf_4.bin"
   310                                  endAssets:
   311                                  
   312                                  
   313                                  ; segment .text
   314                                  
   315 000048D1 00<rep 5572Fh>          times (360*1024)-($-$$) db 0
   316                                  
