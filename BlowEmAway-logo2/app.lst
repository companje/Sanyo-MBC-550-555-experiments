     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4 00000000 E9CA00              <1> jmp boot
     5                              <1> 
     6                              <1> NUM_SECTORS equ 40          ; number of sectors to read
     7                              <1> BAR_WIDTH equ 30
     8                              <1> COLS  equ 72
     9                              <1> ROWS  equ 50
    10                              <1> LINES equ 200
    11                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    12                              <1> RED   equ 0xf000
    13                              <1> GREEN equ 0x1c00
    14                              <1> BLUE  equ 0xf400
    15                              <1> DST   equ 0x38
    16                              <1> XD    equ 4
    17                              <1> YD    equ COLS*XD
    18                              <1> FONT equ 0xFF00
    19                              <1> BYTES_PER_ROW equ 8*COLS  ; 25 lines
    20                              <1> Color.R equ 0b100
    21                              <1> Color.G equ 0b010
    22                              <1> Color.B equ 0b001
    23                              <1> Color.W equ 0b111
    24                              <1> Color.C equ 0b011
    25                              <1> Color.M equ 0b101
    26                              <1> Color.Y equ 0b110
    27                              <1> Color.K equ 0b000
    28                              <1> CTRL equ 0b0000100000000000
    29                              <1> KEY_LEFT  equ 0b00011100
    30                              <1> KEY_RIGHT equ 0b00011101
    31                              <1> KEY_UP    equ 0b00011110
    32                              <1> KEY_DOWN  equ 0b00011111
    33                              <1> 
    34                              <1> cursor:
    35 00000003 00                  <1> .col: db 0
    36 00000004 00                  <1> .row: db 0
    37                              <1> 
    38                              <1> key:
    39 00000005 00                  <1>   .code db 0
    40 00000006 00                  <1>   .ctrl db 0
    41                              <1> 
    42                              <1> ; textColor: dw Color.R<<8 + Color.Y
    43                              <1> ; textWidth: db 2
    44                              <1> 
    45 00000007 001C                <1> color_channel: dw GREEN
    46 00000009 01                  <1> text_width: db 1
    47                              <1> 
    48                              <1> %macro set_cursor 2
    49                              <1>   ; mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    50                              <1>   mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro print 1
    54                              <1>   push ax
    55                              <1>   push bx
    56                              <1>   push cx
    57                              <1>   push dx
    58                              <1>   jmp %%endstr 
    59                              <1>   %%str: db %1,0
    60                              <1>   %%endstr: 
    61                              <1>   mov bx,%%str
    62                              <1>   call write_string
    63                              <1>   pop dx
    64                              <1>   pop cx
    65                              <1>   pop bx
    66                              <1>   pop ax
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro println 1
    70                              <1>   print %1
    71                              <1>   call new_line
    72                              <1> %endmacro
    73                              <1> 
    74                              <1> %macro print_ax 0
    75                              <1>   call write_signed_number_word
    76                              <1> %endmacro
    77                              <1> 
    78                              <1> %macro print_ax_unsigned 0
    79                              <1>   call write_number_word
    80                              <1> %endmacro
    81                              <1> 
    82                              <1> %macro print_ax_hex 0
    83                              <1>   call write_ax_hex
    84                              <1> %endmacro
    85                              <1> 
    86                              <1> %macro print_ax_bin 0
    87                              <1>   call write_binary_word
    88                              <1> %endmacro
    89                              <1> 
    90                              <1> %macro print_char 1
    91                              <1>   push ax
    92                              <1>   mov al,%1
    93                              <1>   call write_char
    94                              <1>   pop ax
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> %macro print_2chars 1
    98                              <1>   push ax
    99                              <1>   mov ax,%1
   100                              <1>   call write_2chars
   101                              <1>   pop ax
   102                              <1> %endmacro
   103                              <1> 
   104                              <1> ; ------------
   105                              <1> ; println
   106                              <1> 
   107                              <1> %macro println_ax 0
   108                              <1>   print_ax
   109                              <1>   call write_5spaces_newline
   110                              <1> %endmacro
   111                              <1> 
   112                              <1> %macro println_ax_unsigned 0
   113                              <1>   print_ax_unsigned
   114                              <1>   call write_5spaces_newline
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> %macro println_ax_hex 0
   118                              <1>   print_ax_hex
   119                              <1>   call write_5spaces_newline
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> %macro println_ax_bin 0
   123                              <1>   print_ax_bin
   124                              <1>   call write_5spaces_newline
   125                              <1> %endmacro
   126                              <1> 
   127                              <1> write_5spaces_newline:
   128 0000000A 50                  <1>   push ax
   129 0000000B B82020              <1>   mov ax,"  "
   130 0000000E E80B00              <1>   call write_2chars
   131 00000011 E80800              <1>   call write_2chars
   132 00000014 E8EA01              <1>   call write_char
   133 00000017 E84403              <1>   call new_line
   134 0000001A 58                  <1>   pop ax
   135 0000001B C3                  <1>   ret
   136                              <1> 
   137                              <1> write_2chars:
   138 0000001C E8E201              <1>   call write_char
   139 0000001F 86C4                <1>   xchg ah,al
   140 00000021 E8DD01              <1>   call write_char
   141 00000024 C3                  <1>   ret
   142                              <1> 
   143                              <1> %macro register_interrupt 1
   144                              <1>   mov ax,%1
   145                              <1>   stosw
   146                              <1>   mov ax,cs
   147                              <1>   stosw
   148                              <1> %endmacro
   149                              <1> 
   150                              <1> ; int0: hlt
   151                              <1> ; int1: hlt
   152                              <1> ; int2: hlt
   153                              <1> ; int3: hlt
   154                              <1> ; int4: hlt
   155                              <1> 
   156                              <1> int0:; int0: Division by zero
   157 00000025 FC                  <1>   cld
   158 00000026 B800F4              <1>   mov ax,BLUE
   159 00000029 8EC0                <1>   mov es,ax
   160 0000002B 31FF                <1>   xor di,di
   161 0000002D B9201C              <1>   mov cx,7200
   162 00000030 B8FFFF              <1>   mov ax,-1
   163 00000033 F3AB                <1>   rep stosw
   164                              <1>   set_cursor 1,1
    49                              <2> 
    50 00000035 BF0000              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   165                              <1>   print "Division by zero"
    54 00000038 50                  <2>  push ax
    55 00000039 53                  <2>  push bx
    56 0000003A 51                  <2>  push cx
    57 0000003B 52                  <2>  push dx
    58 0000003C EB11                <2>  jmp %%endstr
    59 0000003E 4469766973696F6E20- <2>  %%str: db %1,0
    59 00000047 6279207A65726F00    <2>
    60                              <2>  %%endstr:
    61 0000004F BB[3E00]            <2>  mov bx,%%str
    62 00000052 E81202              <2>  call write_string
    63 00000055 5A                  <2>  pop dx
    64 00000056 59                  <2>  pop cx
    65 00000057 5B                  <2>  pop bx
    66 00000058 58                  <2>  pop ax
   166                              <1>   set_cursor 3,1
    49                              <2> 
    50 00000059 BF8004              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   167 0000005C 58                  <1>   pop ax
   168                              <1>   print "IP="
    54 0000005D 50                  <2>  push ax
    55 0000005E 53                  <2>  push bx
    56 0000005F 51                  <2>  push cx
    57 00000060 52                  <2>  push dx
    58 00000061 EB04                <2>  jmp %%endstr
    59 00000063 49503D00            <2>  %%str: db %1,0
    60                              <2>  %%endstr:
    61 00000067 BB[6300]            <2>  mov bx,%%str
    62 0000006A E8FA01              <2>  call write_string
    63 0000006D 5A                  <2>  pop dx
    64 0000006E 59                  <2>  pop cx
    65 0000006F 5B                  <2>  pop bx
    66 00000070 58                  <2>  pop ax
   169                              <1>   println_ax_hex
   118                              <2>  print_ax_hex
    83 00000071 E80703              <3>  call write_ax_hex
   119 00000074 E893FF              <2>  call write_5spaces_newline
   170 00000077 E8E402              <1>   call new_line
   171                              <1>   print "CS="
    54 0000007A 50                  <2>  push ax
    55 0000007B 53                  <2>  push bx
    56 0000007C 51                  <2>  push cx
    57 0000007D 52                  <2>  push dx
    58 0000007E EB04                <2>  jmp %%endstr
    59 00000080 43533D00            <2>  %%str: db %1,0
    60                              <2>  %%endstr:
    61 00000084 BB[8000]            <2>  mov bx,%%str
    62 00000087 E8DD01              <2>  call write_string
    63 0000008A 5A                  <2>  pop dx
    64 0000008B 59                  <2>  pop cx
    65 0000008C 5B                  <2>  pop bx
    66 0000008D 58                  <2>  pop ax
   172 0000008E 58                  <1>   pop ax
   173                              <1>   println_ax_hex
   118                              <2>  print_ax_hex
    83 0000008F E8E902              <3>  call write_ax_hex
   119 00000092 E875FF              <2>  call write_5spaces_newline
   174 00000095 E8C602              <1>   call new_line
   175                              <1>   print "FLAGS="
    54 00000098 50                  <2>  push ax
    55 00000099 53                  <2>  push bx
    56 0000009A 51                  <2>  push cx
    57 0000009B 52                  <2>  push dx
    58 0000009C EB07                <2>  jmp %%endstr
    59 0000009E 464C4147533D00      <2>  %%str: db %1,0
    60                              <2>  %%endstr:
    61 000000A5 BB[9E00]            <2>  mov bx,%%str
    62 000000A8 E8BC01              <2>  call write_string
    63 000000AB 5A                  <2>  pop dx
    64 000000AC 59                  <2>  pop cx
    65 000000AD 5B                  <2>  pop bx
    66 000000AE 58                  <2>  pop ax
   176 000000AF 58                  <1>   pop ax
   177 000000B0 E8DC01              <1>   call write_binary_word
   178 000000B3 F4                  <1>   hlt
   179                              <1> 
   180                              <1> int1:; int1: Single step debugging
   181 000000B4 B001                <1>   mov al,1
   182 000000B6 EB0C                <1>   jmp int_msg
   183                              <1> int2:; int2: Non maskable interrupt
   184 000000B8 B002                <1>   mov al,2
   185 000000BA EB08                <1>   jmp int_msg
   186                              <1> int3:; int3: For one-byte interrupt
   187 000000BC B003                <1>   mov al,3
   188 000000BE EB04                <1>   jmp int_msg
   189                              <1> 
   190                              <1> int4:; int4: Signed overflow
   191 000000C0 B004                <1>   mov al,4
   192 000000C2 EB00                <1>   jmp int_msg
   193                              <1> int_msg:
   194 000000C4 BFF401              <1>   mov di,500
   195 000000C7 0430                <1>   add al,'0'
   196 000000C9 E83501              <1>   call write_char
   197                              <1>   
   198 000000CC F4                  <1>   hlt
   199                              <1> 
   200                              <1> boot:
   201 000000CD FA                  <1>   cli
   202 000000CE FC                  <1>   cld
   203 000000CF E8E900              <1>   call clear_green    
   204                              <1> 
   205                              <1>   ; init video      
   206 000000D2 B005                <1>   mov al, 5
   207 000000D4 E610                <1>   out 10h, al           ; select address 0x1c000 as green video page
   208                              <1>  
   209                              <1>   ; register interrupts
   210 000000D6 31FF                <1>   xor di,di ; offset 0
   211 000000D8 8EC7                <1>   mov es,di ; segment 0
   212                              <1>   register_interrupt int0
   144 000000DA B8[2500]            <2>  mov ax,%1
   145 000000DD AB                  <2>  stosw
   146 000000DE 8CC8                <2>  mov ax,cs
   147 000000E0 AB                  <2>  stosw
   213                              <1>   register_interrupt int1
   144 000000E1 B8[B400]            <2>  mov ax,%1
   145 000000E4 AB                  <2>  stosw
   146 000000E5 8CC8                <2>  mov ax,cs
   147 000000E7 AB                  <2>  stosw
   214                              <1>   register_interrupt int2
   144 000000E8 B8[B800]            <2>  mov ax,%1
   145 000000EB AB                  <2>  stosw
   146 000000EC 8CC8                <2>  mov ax,cs
   147 000000EE AB                  <2>  stosw
   215                              <1>   register_interrupt int3
   144 000000EF B8[BC00]            <2>  mov ax,%1
   145 000000F2 AB                  <2>  stosw
   146 000000F3 8CC8                <2>  mov ax,cs
   147 000000F5 AB                  <2>  stosw
   216                              <1>   register_interrupt int4
   144 000000F6 B8[C000]            <2>  mov ax,%1
   145 000000F9 AB                  <2>  stosw
   146 000000FA 8CC8                <2>  mov ax,cs
   147 000000FC AB                  <2>  stosw
   217                              <1> 
   218                              <1> 
   219                              <1>   ; init other hardware
   220 000000FD B000                <1>   mov al,0
   221 000000FF E63A                <1>   out 0x3a,al           ; keyboard \force state/
   222 00000101 E63A                <1>   out 0x3a,al           ; keyboard \force state/
   223 00000103 B0FF                <1>   mov al,0xFF
   224 00000105 E63A                <1>   out 0x3a,al           ; keyboard \reset/
   225 00000107 E63A                <1>   out 0x3a,al           ; keyboard \mode/
   226 00000109 B037                <1>   mov al,0x37
   227 0000010B E63A                <1>   out 0x3a,al           ; keyboard \set command
   228                              <1> 
   229 0000010D B8001C              <1>   mov ax,GREEN      
   230 00000110 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
   231 00000112 B83800              <1>   mov ax,DST                
   232 00000115 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
   233 00000117 BF0000              <1>   mov di,0                  ;
   234 0000011A B200                <1>   mov dl,0                  ; track=0
   235 0000011C B601                <1>   mov dh,1                  ; sector=1
   236 0000011E B92800              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
   237 00000121 EB0B                <1>   jmp move_head
   238                              <1> 
   239                              <1> ; ───────────────────────────────────────────────────────────────────────────
   240                              <1> 
   241                              <1> next_sector:
   242 00000123 FEC6                <1>   inc dh                    ; sector++
   243 00000125 80FE0A              <1>   cmp dh,10
   244 00000128 7218                <1>   jb read_sector            ; if (dh<9) read_sector
   245 0000012A B601                <1>   mov dh,1
   246 0000012C FEC2                <1>   inc dl                    ; else track++ ; sector=1
   247                              <1> 
   248                              <1> move_head:
   249 0000012E 88D0                <1>   mov al,dl
   250 00000130 E60E                <1>   out 0Eh,al               ; set track number
   251 00000132 B018                <1>   mov al,18h     
   252 00000134 E608                <1>   out 8,al                 ; seek track, load head
   253 00000136 B000                <1>   mov al,0
   254 00000138 E61C                <1>   out 1Ch,al               ; set desired drive/side
   255 0000013A D40A                <1>   aam
   256                              <1> 
   257                              <1> head_moving:
   258 0000013C E408                <1>   in al,8
   259 0000013E A801                <1>   test al,1
   260 00000140 75FA                <1>   jnz head_moving
   261                              <1> 
   262                              <1> read_sector:
   263 00000142 88F0                <1>   mov al,dh
   264 00000144 E60C                <1>   out 0Ch,al                ; sector number
   265 00000146 B702                <1>   mov bh,2                  ; 00000010b
   266 00000148 B396                <1>   mov bl,96h                ; 10010110b
   267 0000014A B400                <1>   mov ah,0
   268 0000014C B080                <1>   mov al,80h
   269 0000014E E608                <1>   out 8,al                  ; read sector
   270 00000150 D40A<rep 4h>        <1>   times 4 aam               ; wait
   271                              <1> 
   272                              <1> check_status_1:
   273 00000158 E408                <1>   in al,8                   ; read status
   274 0000015A D0F8                <1>   sar al,1                  ; status/=2
   275 0000015C 731F                <1>   jnb check_status_3
   276 0000015E 75F8                <1>   jnz check_status_1
   277                              <1> 
   278                              <1> wait_for_data:
   279 00000160 E408                <1>   in al,8                   ; read status
   280 00000162 20D8                <1>   and al,bl                 ; 96h
   281 00000164 74FA                <1>   jz wait_for_data
   282                              <1> 
   283                              <1> store_byte_1:
   284 00000166 E40E                <1>   in al,0Eh
   285 00000168 AA                  <1>   stosb
   286                              <1> 
   287                              <1> check_status_2:
   288 00000169 E408                <1>   in al,8                   ; read status
   289 0000016B 48                  <1>   dec ax                    ; status--
   290 0000016C 74FB                <1>   jz check_status_2         ; if (status==0) repeat
   291 0000016E 38F8                <1>   cmp al, bh                ; bh=2
   292 00000170 750B                <1>   jnz check_status_3        ; if (status==1) 
   293                              <1> 
   294                              <1> store_byte_2:
   295 00000172 E40E                <1>   in al,0Eh  
   296 00000174 AA                  <1>   stosb
   297                              <1> 
   298                              <1> check_status_4:
   299 00000175 E408                <1>   in al,8                   ; read status
   300 00000177 38F8                <1>   cmp al, bh                ; bh=2
   301 00000179 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   302 0000017B EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   303                              <1> 
   304                              <1> ; ───────────────────────────────────────────────────────────────────────────
   305                              <1> 
   306                              <1> check_status_3:
   307 0000017D E408                <1>   in al, 8                  ; read status
   308 0000017F A81C                <1>   test al, 1Ch              ; 00011100
   309 00000181 7402                <1>   jz while_sectors
   310 00000183 EBBD                <1>   jmp read_sector
   311                              <1> 
   312                              <1> ; ───────────────────────────────────────────────────────────────────────────
   313                              <1> 
   314                              <1> while_sectors:
   315 00000185 E81200              <1>   call progress_bar
   316 00000188 E299                <1>   loop next_sector
   317                              <1> 
   318                              <1> done_reading:
   319 0000018A 0E                  <1>   push cs
   320 0000018B 17                  <1>   pop ss
   321 0000018C BC0000              <1>   mov sp,0
   322 0000018F E82900              <1>   call clear_green
   323 00000192 0E                  <1>   push cs
   324 00000193 1F                  <1>   pop ds
   325                              <1>   set_cursor 1,1 ; nodig?
    49                              <2> 
    50 00000194 BF0000              <2>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   326 00000197 E90C02              <1>   jmp setup
   327                              <1> 
   328                              <1> ; ───────────────────────────────────────────────────────────────────────────
   329                              <1> 
   330                              <1> progress_bar:
   331                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   332 0000019A 52                  <1>   push dx
   333 0000019B 53                  <1>   push bx
   334 0000019C 31D2                <1>   xor dx,dx
   335 0000019E B81E00              <1>   mov ax,BAR_WIDTH
   336 000001A1 BB2800              <1>   mov bx,NUM_SECTORS    
   337 000001A4 F7E1                <1>   mul cx
   338 000001A6 F7F3                <1>   div bx
   339 000001A8 5B                  <1>   pop bx
   340 000001A9 5A                  <1>   pop dx
   341 000001AA 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   342 000001AC D1E6                <1>   shl si,1                  ; *=2
   343 000001AE D1E6                <1>   shl si,1                  ; *=2  
   344 000001B0 BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   345 000001B3 29F5                <1>   sub bp,si
   346 000001B5 3EC64600FF          <1>   mov byte [ds:bp],-1
   347 000001BA C3                  <1>   ret
   348                              <1> 
   349                              <1> clear_green:
   350 000001BB B8001C              <1>   mov ax,GREEN
   351 000001BE E80100              <1>   call clear_channel
   352 000001C1 C3                  <1>   ret
   353                              <1> 
   354                              <1> clear_channel:
   355 000001C2 8EC0                <1>   mov es,ax
   356 000001C4 B9201C              <1>   mov cx,COLS*ROWS*2
   357 000001C7 31FF                <1>   xor di,di
   358 000001C9 31C0                <1>   xor ax,ax
   359 000001CB F3AB                <1>   rep stosw         ; clear screen
   360 000001CD C3                  <1>   ret
   361                              <1> 
   362                              <1> ; ───────────────────────────────────────────────────────────────────────────
   363                              <1> 
   364                              <1> 
   365                              <1> scale2x1:
   366 000001CE 1E                  <1>   push ds
   367 000001CF B8001C              <1>   mov ax,GREEN
   368 000001D2 8EC0                <1>   mov es,ax
   369 000001D4 8ED8                <1>   mov ds,ax
   370 000001D6 B90400              <1>   mov cx,4
   371                              <1> .lp:
   372 000001D9 AC                  <1>   lodsb
   373 000001DA E80B00              <1>   call stretch_bits
   374 000001DD 86C4                <1>   xchg ah,al
   375 000001DF 26886504            <1>   mov byte [es:di+4],ah
   376 000001E3 AA                  <1>   stosb
   377 000001E4 E2F3                <1>   loop .lp
   378 000001E6 1F                  <1>   pop ds
   379 000001E7 C3                  <1>   ret
   380                              <1> 
   381                              <1> 
   382                              <1> stretch_bits: ;input al=byte (00011000), bit duplication result in ax: 0000001111000000
   383 000001E8 51                  <1>   push cx
   384 000001E9 53                  <1>   push bx
   385 000001EA 88C3                <1>   mov bl, al
   386 000001EC 31C0                <1>   xor ax, ax
   387 000001EE B90800              <1>   mov cx, 8
   388                              <1> .lp:
   389 000001F1 D1E0                <1>   shl ax, 1
   390 000001F3 D1E0                <1>   shl ax, 1
   391 000001F5 D0E3                <1>   shl bl, 1
   392 000001F7 7303                <1>   jnc .no1
   393 000001F9 83C803              <1>   or ax, 3
   394                              <1> .no1:
   395 000001FC E2F3                <1>   loop .lp
   396 000001FE 5B                  <1>   pop bx
   397 000001FF 59                  <1>   pop cx
   398 00000200 C3                  <1>   ret
   399                              <1> 
   400                              <1> ; ----------------------
   401                              <1> 
   402                              <1> write_char:
   403 00000201 E81B00              <1>   call write_char_wide
   404 00000204 E80100              <1>   call row_snap
   405 00000207 C3                  <1>   ret
   406                              <1> 
   407                              <1> row_snap:   ; row snap / wrap
   408 00000208 53                  <1>   push bx
   409 00000209 52                  <1>   push dx
   410 0000020A 50                  <1>   push ax
   411 0000020B BB2001              <1>   mov bx,4*COLS
   412 0000020E 31D2                <1>   xor dx,dx
   413 00000210 89F8                <1>   mov ax,di
   414 00000212 F7F3                <1>   div bx       ; ///dit ook als BX 0 is
   415 00000214 83FA00              <1>   cmp dx,0
   416 00000217 7502                <1>   jne .return
   417 00000219 01DF                <1>   add di,bx
   418                              <1> .return
   419 0000021B 58                  <1>   pop ax
   420 0000021C 5A                  <1>   pop dx
   421 0000021D 5B                  <1>   pop bx
   422 0000021E C3                  <1>   ret
   423                              <1> 
   424                              <1> write_char_wide:
   425 0000021F E81900              <1>   call write_char_normal
   426 00000222 56                  <1>   push si
   427 00000223 57                  <1>   push di
   428 00000224 83EF04              <1>   sub di,4
   429 00000227 89FE                <1>   mov si,di
   430 00000229 E8A2FF              <1>   call scale2x1
   431 0000022C 81C71C01            <1>   add di,COLS*4-4
   432 00000230 89FE                <1>   mov si,di
   433 00000232 E899FF              <1>   call scale2x1
   434 00000235 5F                  <1>   pop di
   435 00000236 5E                  <1>   pop si
   436 00000237 83C704              <1>   add di,4 ; because extra wide
   437 0000023A C3                  <1>   ret
   438                              <1> 
   439                              <1> write_char_normal:   ; ds=FONT, es=GREEN, al=charcode
   440 0000023B 56                  <1>   push si
   441 0000023C 52                  <1>   push dx
   442 0000023D 1E                  <1>   push ds
   443 0000023E 06                  <1>   push es
   444 0000023F 50                  <1>   push ax
   445 00000240 53                  <1>   push bx
   446 00000241 31D2                <1>   xor dx,dx
   447 00000243 50                  <1>   push ax  ; voor character pop
   448                              <1>   ; mov ax,GREEN
   449                              <1>   ; mov es,ax
   450 00000244 8E06[0700]          <1>   mov word es,[color_channel]
   451 00000248 B800FF              <1>   mov ax,FONT
   452 0000024B 8ED8                <1>   mov ds,ax
   453 0000024D 58                  <1>   pop ax
   454 0000024E B408                <1>   mov ah,8
   455 00000250 F6E4                <1>   mul ah        ; al*=ah
   456 00000252 89C6                <1>   mov si,ax  
   457                              <1> 
   458 00000254 A5                  <1>   movsw
   459 00000255 A5                  <1>   movsw
   460 00000256 81C71C01            <1>   add di,4*COLS-4
   461 0000025A A5                  <1>   movsw
   462 0000025B A5                  <1>   movsw
   463 0000025C 81EF2001            <1>   sub di,4*COLS
   464                              <1> 
   465                              <1> .return
   466 00000260 5B                  <1>   pop bx
   467 00000261 58                  <1>   pop ax
   468 00000262 07                  <1>   pop es
   469 00000263 1F                  <1>   pop ds
   470 00000264 5A                  <1>   pop dx
   471 00000265 5E                  <1>   pop si
   472 00000266 C3                  <1>   ret
   473                              <1> 
   474                              <1> write_string:
   475 00000267 2E8A07              <1>   mov al,[cs:bx]
   476 0000026A 43                  <1>   inc bx
   477 0000026B 08C0                <1>   or al,al
   478 0000026D 7405                <1>   jz .return
   479 0000026F E88FFF              <1>   call write_char
   480 00000272 EBF3                <1>   jmp short write_string
   481                              <1> .return
   482 00000274 C3                  <1>   ret
   483                              <1> 
   484                              <1> ; ───────────────────────────────────────────────────────────────────────────
   485                              <1> 
   486                              <1> write_binary_byte:    ; input AL
   487 00000275 53                  <1>   push bx
   488 00000276 51                  <1>   push cx
   489 00000277 50                  <1>   push ax
   490 00000278 88C3                <1>   mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   491 0000027A B90800              <1>   mov cx, 8           ; We gaan 8 bits schrijven
   492                              <1> .lp:
   493 0000027D D0C3                <1>   rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   494 0000027F B80000              <1>   mov ax, 0           ; AH leegmaken
   495 00000282 1430                <1>   adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   496 00000284 51                  <1>   push cx             ; CX opslaan
   497 00000285 E879FF              <1>   call write_char      ; Schrijf het karakter naar het scherm
   498 00000288 59                  <1>   pop cx              ; CX herstellen
   499 00000289 E2F2                <1>   loop .lp            ; Loop voor alle 8 bits
   500 0000028B 58                  <1>   pop ax
   501 0000028C 59                  <1>   pop cx
   502 0000028D 5B                  <1>   pop bx
   503 0000028E C3                  <1>   ret
   504                              <1> 
   505                              <1> ; ───────────────────────────────────────────────────────────────────────────
   506                              <1> 
   507                              <1> write_binary_word:    ; input AX
   508 0000028F 51                  <1>   push cx
   509 00000290 50                  <1>   push ax
   510 00000291 52                  <1>   push dx            ; DX opslaan (we gebruiken het later)
   511 00000292 89C2                <1>   mov dx, ax         ; Kopieer AX naar DX (we werken op DX)
   512 00000294 B91000              <1>   mov cx, 16         ; We gaan 16 bits schrijven
   513                              <1> .lp:
   514 00000297 D1C2                <1>   rol dx, 1          ; Rotate DX naar links (hoogste bit komt in Carry Flag)
   515 00000299 B80000              <1>   mov ax, 0          ; AH leegmaken
   516 0000029C 1430                <1>   adc al, 48         ; Als Carry Flag 1 is, wordt '1', anders '0'  
   517 0000029E 51                  <1>   push cx            ; CX opslaan
   518 0000029F E85FFF              <1>   call write_char    ; Schrijf het karakter naar het scherm
   519 000002A2 59                  <1>   pop cx             ; CX herstellen
   520 000002A3 E2F2                <1>   loop .lp           ; Loop voor alle 16 bits
   521 000002A5 5A                  <1>   pop dx             ; DX herstellen
   522 000002A6 58                  <1>   pop ax
   523 000002A7 59                  <1>   pop cx
   524 000002A8 C3                  <1>   ret
   525                              <1> 
   526                              <1> 
   527                              <1> ; ───────────────────────────────────────────────────────────────────────────
   528                              <1> 
   529                              <1> write_number_word:
   530 000002A9 50                  <1>     push ax
   531 000002AA 52                  <1>     push dx
   532 000002AB 31D2                <1>     xor dx,dx
   533 000002AD 52                  <1>     push dx ;high byte is zero
   534 000002AE 31D2                <1> .clp xor dx,dx
   535 000002B0 2EF736[CC02]        <1>     cs div word [.base]
   536 000002B5 92                  <1>     xchg ax,dx
   537 000002B6 05300E              <1>     add ax,0xe30
   538 000002B9 50                  <1>     push ax
   539 000002BA 92                  <1>     xchg ax,dx
   540 000002BB 09C0                <1>     or ax,ax
   541 000002BD 75EF                <1>     jnz .clp
   542 000002BF 58                  <1> .dlp pop ax
   543 000002C0 08E4                <1>     or ah,ah
   544 000002C2 7405                <1>     jz .done
   545 000002C4 E83AFF              <1>     call write_char
   546 000002C7 EBF6                <1>     jmp short .dlp
   547 000002C9 5A                  <1> .done pop dx
   548 000002CA 58                  <1>     pop ax
   549 000002CB C3                  <1>     ret
   550 000002CC 0A00                <1> .base dw 10
   551                              <1> 
   552                              <1> ; ───────────────────────────────────────────────────────────────────────────
   553                              <1> 
   554                              <1> 
   555                              <1> ; ───────────────────────────────────────────────────────────────────────────
   556                              <1> 
   557                              <1> write_signed_number_word:  
   558 000002CE 50                  <1>     push ax
   559 000002CF 09C0                <1>     or ax,ax
   560 000002D1 790A                <1>     jns .write_return        ; if >0 write and return
   561 000002D3 50                  <1>     push ax
   562 000002D4 B82D00              <1>     mov ax,'-'
   563 000002D7 E827FF              <1>     call write_char
   564 000002DA 58                  <1>     pop ax
   565 000002DB F7D8                <1>     neg ax                   ; destroys ax when negative
   566                              <1> .write_return:
   567 000002DD E8C9FF              <1>     call write_number_word
   568 000002E0 58                  <1>     pop ax
   569 000002E1 C3                  <1>     ret
   570                              <1> 
   571                              <1> ; ───────────────────────────────────────────────────────────────────────────
   572                              <1> 
   573                              <1> check_keys:
   574 000002E2 E43A                <1>   in al,0x3a        ; get keyboard status
   575 000002E4 88C4                <1>   mov ah,al
   576 000002E6 2408                <1>   and al,0b00001000 ; keep only 1 for 'ctrl'
   577 000002E8 2EA2[0600]          <1>   mov [cs:key.ctrl],al
   578 000002EC F6C402              <1>   test ah,2         ; keypressed flag is in ah, not in al anymore
   579 000002EF 7410                <1>   jz .return
   580 000002F1 E438                <1>   in al,0x38        ; get data byte from keyboard  
   581 000002F3 2EA2[0500]          <1>   mov [cs:key.code],al
   582 000002F7 B037                <1>   mov al,0x37
   583 000002F9 E63A                <1>   out 0x3a,al       ; drop key?  
   584 000002FB 0C01                <1>   or al,1           ; set zero flag to false to indicate a keypress
   585 000002FD 2EA1[0500]          <1>   mov ax,[cs:key]   ; ctrl status in ah, keycode in al, ZF low means a key was pressed
   586 00000301 C3                  <1> .return ret
   587                              <1> 
   588                              <1> ; ───────────────────────────────────────────────────────────────────────────
   589                              <1> 
   590                              <1> draw_spr:
   591 00000302 53                  <1>   push bx
   592 00000303 8B1C                <1>   mov bx,[si]
   593 00000305 46                  <1>   inc si
   594 00000306 46                  <1>   inc si
   595 00000307 E80200              <1>   call draw_pic
   596 0000030A 5B                  <1>   pop bx
   597 0000030B C3                  <1>   ret
   598                              <1> 
   599                              <1> ; ───────────────────────────────────────────────────────────────────────────
   600                              <1> 
   601                              <1> draw_pic:
   602 0000030C 50                  <1>   push ax
   603 0000030D B800F0              <1>   mov ax, RED
   604 00000310 E80E00              <1>   call draw_channel
   605 00000313 B8001C              <1>   mov ax, GREEN
   606 00000316 E80800              <1>   call draw_channel
   607 00000319 B800F4              <1>   mov ax, BLUE
   608 0000031C E80200              <1>   call draw_channel
   609 0000031F 58                  <1>   pop ax
   610 00000320 C3                  <1>   ret
   611                              <1> 
   612                              <1> ; ───────────────────────────────────────────────────────────────────────────
   613                              <1> 
   614                              <1> draw_channel:
   615 00000321 57                  <1>   push di
   616 00000322 8EC0                <1>   mov es,ax
   617 00000324 31C9                <1>   xor cx,cx
   618 00000326 88F9                <1>   mov cl,bh        ; rows (bl)
   619                              <1> .rows_loop:
   620 00000328 51                  <1>   push cx
   621 00000329 31C9                <1>   xor cx,cx
   622 0000032B 88D9                <1>   mov cl,bl        ; cols (bh)
   623                              <1> .cols_loop:
   624 0000032D A5                  <1>   movsw
   625 0000032E A5                  <1>   movsw
   626 0000032F E2FC                <1>   loop .cols_loop
   627 00000331 81C72001            <1>   add di,COLS*4    ; one row down
   628 00000335 B400                <1>   mov ah,0
   629 00000337 88D8                <1>   mov al,bl
   630 00000339 D1E0<rep 2h>        <1>   times 2 shl ax,1
   631 0000033D 29C7                <1>   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   632 0000033F 59                  <1>   pop cx
   633 00000340 E2E6                <1>   loop .rows_loop
   634 00000342 5F                  <1>   pop di
   635 00000343 C3                  <1>   ret
   636                              <1> 
   637                              <1> ; ───────────────────────────────────────────────────────────────────────────
   638                              <1> 
   639                              <1> calc_di_from_bx:  ; input bl,bh [0,0,71,49]
   640 00000344 B89000              <1>   mov ax,2*COLS      ; 2*72 cols (of 2*80=160)
   641 00000347 F6E7                <1>   mul bh          ; bh*=144 of 160, resultaat in AX
   642 00000349 D1E0                <1>   shl ax,1        ; verdubbel AX
   643 0000034B 89C7                <1>   mov di,ax       ; di=ax (=bh*288 of 320
   644 0000034D D0E3                <1>   shl bl,1        ; bl*=2
   645 0000034F D0E3                <1>   shl bl,1        ; bl*=2
   646 00000351 B700                <1>   mov bh,0
   647 00000353 01DF                <1>   add di,bx       ; di+=bl
   648 00000355 83FF00              <1>   cmp di,0
   649 00000358 7C01                <1>   jl .clamp_top
   650 0000035A C3                  <1>   ret
   651                              <1> .clamp_top
   652 0000035B 31FF                <1>   xor di,di
   653 0000035D C3                  <1>   ret
   654                              <1> 
   655                              <1> 
   656                              <1> ; ───────────────────────────────────────────────────────────────────────────
   657                              <1> 
   658                              <1> new_line:         ; find the value of DI at start of the next line
   659 0000035E 50                  <1>   push ax
   660 0000035F 53                  <1>   push bx
   661 00000360 52                  <1>   push dx
   662 00000361 BB2001              <1>   mov bx,4*COLS
   663 00000364 31D2                <1>   xor dx,dx
   664 00000366 89F8                <1>   mov ax,di
   665 00000368 F7F3                <1>   div bx
   666 0000036A 31D2                <1>   xor dx,dx       ; cwd?
   667 0000036C BB2001              <1>   mov bx,4*COLS      ; can reuse x from above?
   668 0000036F 40                  <1>   inc ax
   669 00000370 F7E3                <1>   mul bx
   670 00000372 052001              <1>   add ax,4*COLS      ; use bx?
   671 00000375 89C7                <1>   mov di,ax
   672 00000377 5A                  <1>   pop dx
   673 00000378 5B                  <1>   pop bx
   674 00000379 58                  <1>   pop ax
   675 0000037A C3                  <1>   ret
   676                              <1> 
   677                              <1> ; ───────────────────────────────────────────────────────────────────────────
   678                              <1> 
   679                              <1> write_ax_hex:
   680 0000037B 50                  <1>   push ax
   681 0000037C 52                  <1>   push dx
   682 0000037D 31D2                <1>   xor dx,dx
   683 0000037F 52                  <1>   push dx ;high byte is zero
   684 00000380 31D2                <1> .clp xor dx,dx
   685 00000382 2EF736[A403]        <1>   cs div word [.base]
   686 00000387 92                  <1>   xchg ax,dx
   687 00000388 3C0A                <1>   cmp al,10
   688 0000038A 7202                <1>   jb .l1     ; 0-9
   689 0000038C 0407                <1>   add al,7   ; A-F
   690 0000038E 05300E              <1> .l1 add ax,0xe30
   691 00000391 50                  <1>   push ax
   692 00000392 92                  <1>   xchg ax,dx
   693 00000393 09C0                <1>   or ax,ax
   694 00000395 75E9                <1>   jnz .clp
   695 00000397 58                  <1> .dlp pop ax
   696 00000398 08E4                <1>   or ah,ah
   697 0000039A 7405                <1>   jz .done
   698 0000039C E862FE              <1>   call write_char
   699 0000039F EBF6                <1>   jmp short .dlp
   700 000003A1 5A                  <1> .done pop dx
   701 000003A2 58                  <1>   pop ax
   702 000003A3 C3                  <1>   ret
   703 000003A4 1000                <1> .base dw 16
   704                              <1> 
   705                              <1> 
   706                              <1> ; times (512)-($-$$) db 0             ; doesn't fit in the bootsector anymore
   707                              <1> 
     2                                  
     3                                  setup:
     4                                    println "The year 2674, Aliens from an other"
    70                              <1>  print %1
    54 000003A6 50                  <2>  push ax
    55 000003A7 53                  <2>  push bx
    56 000003A8 51                  <2>  push cx
    57 000003A9 52                  <2>  push dx
    58 000003AA EB24                <2>  jmp %%endstr
    59 000003AC 546865207965617220- <2>  %%str: db %1,0
    59 000003B5 323637342C20416C69- <2>
    59 000003BE 656E732066726F6D20- <2>
    59 000003C7 616E206F7468657200  <2>
    60                              <2>  %%endstr:
    61 000003D0 BB[AC03]            <2>  mov bx,%%str
    62 000003D3 E891FE              <2>  call write_string
    63 000003D6 5A                  <2>  pop dx
    64 000003D7 59                  <2>  pop cx
    65 000003D8 5B                  <2>  pop bx
    66 000003D9 58                  <2>  pop ax
    71 000003DA E881FF              <1>  call new_line
     5                                    println "galaxy came into our galaxy and"
    70                              <1>  print %1
    54 000003DD 50                  <2>  push ax
    55 000003DE 53                  <2>  push bx
    56 000003DF 51                  <2>  push cx
    57 000003E0 52                  <2>  push dx
    58 000003E1 EB20                <2>  jmp %%endstr
    59 000003E3 67616C617879206361- <2>  %%str: db %1,0
    59 000003EC 6D6520696E746F206F- <2>
    59 000003F5 75722067616C617879- <2>
    59 000003FE 20616E6400          <2>
    60                              <2>  %%endstr:
    61 00000403 BB[E303]            <2>  mov bx,%%str
    62 00000406 E85EFE              <2>  call write_string
    63 00000409 5A                  <2>  pop dx
    64 0000040A 59                  <2>  pop cx
    65 0000040B 5B                  <2>  pop bx
    66 0000040C 58                  <2>  pop ax
    71 0000040D E84EFF              <1>  call new_line
     6                                    println "wanted to destroy the earth."
    70                              <1>  print %1
    54 00000410 50                  <2>  push ax
    55 00000411 53                  <2>  push bx
    56 00000412 51                  <2>  push cx
    57 00000413 52                  <2>  push dx
    58 00000414 EB1D                <2>  jmp %%endstr
    59 00000416 77616E74656420746F- <2>  %%str: db %1,0
    59 0000041F 2064657374726F7920- <2>
    59 00000428 746865206561727468- <2>
    59 00000431 2E00                <2>
    60                              <2>  %%endstr:
    61 00000433 BB[1604]            <2>  mov bx,%%str
    62 00000436 E82EFE              <2>  call write_string
    63 00000439 5A                  <2>  pop dx
    64 0000043A 59                  <2>  pop cx
    65 0000043B 5B                  <2>  pop bx
    66 0000043C 58                  <2>  pop ax
    71 0000043D E81EFF              <1>  call new_line
     7 00000440 F4                        hlt
     8                                  
     9                                  
    10 00000441 00<rep 2CBBFh>          times (180*1024)-($-$$) db 0
