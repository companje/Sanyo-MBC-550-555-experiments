     1                                  org 0x100
     2                                  cpu 8086
     3                                  
     4                                  COLS  equ 72
     5                                  TOP   equ 9*4*COLS+20*4    ; row=9,col=20
     6                                  RED   equ 0xf0
     7                                  GREEN equ 0x0c
     8                                  BLUE  equ 0xf4
     9                                  
    10                                  effect_timeout equ 50      ; every 30 frames another effect
    11                                  isqrt_table    equ 1000    ; available location in code segment
    12                                  
    13                                  ; using dx and bx registers as t,i,x,y variables
    14                                  %define t dh
    15                                  %define i dl
    16                                  %define x bh
    17                                  %define y bl
    18                                  
    19 00000000 EB50                    jmp setup
    20                                  
    21                                  ; some parts of FAT12 table is included here to be able to mount the binary 
    22                                  ; as a diskimage on Mac. This seems also to be needed for FlashFloppy to recognize
    23                                  ; the diskimage. The Sanyo does not need the regular bootsector signature 0x55 0xAA
    24                                  
    25                                  fx_table:      ; the 'effects' table: 8 bytes, overwriting the 'Sanyo1.2' tag
    26                                      ; db ,
    27 00000002 [35][38][3D][42]            db fx0,fx1,fx2,fx3 ;,fx4,fx5,fx6,fx7 
    28                                      %assign num 8-($-fx_table) 
    29 00000006 20<rep 4h>                  times num db 0x20
    30                                  
    31                                      ; db 'Sanyo1.2'
    32 0000000A 0002                        dw 512     ; Number of bytes per sector
    33 0000000C 02                          db 2       ; Number of sectors per cluster
    34 0000000D 01                          db 1       ; Number of FAT copies
    35 0000000E 0002                        dw 512     ; Number of root directory entries
    36 00000010 70                          db 112     ; Total number of sectors in the filesystem
    37 00000011 00                          db 0       ; Media descriptor type
    38 00000012 0002                        dw 512     ; Number of sectors per FAT
    39 00000014 FD02                        dw 765     ; ? Number of sectors per track
    40                                      ; db 0     ; ? Number of heads   (now first byte of sine table)
    41                                      ; db 9     ; ? Number of heads  
    42                                      ; dw 512   ; Number of hidden sectors
    43                                      ; the the last 4 bytes of the FAT12 table are overwritten by the sine table
    44                                  
    45                                  sin_table: ;31 bytes, (input -15..15 index=0..31)
    46 00000016 00FDFAF7F5F3F1F1F1-         db 0,-3,-6,-9,-11,-13,-15,-15,-15,-15,-13,-11,-9,-6,-3,
    46 0000001F F1F3F5F7FAFD       
    47 00000025 000306090B0D0F0F0F-         db 0, 3, 6, 9, 11, 13, 15, 15, 15, 15, 13, 11, 9, 6, 3,0  
    47 0000002E 0F0D0B09060300     
    48                                      ; tried to mirror the second line of the sine table with code 
    49                                      ; but would take a same of amount of bytes
    50                                  
    51                                  fx0: ; x
    52 00000035 88F8                        mov al,x
    53 00000037 C3                          ret
    54                                  
    55                                  fx1: ; y-7
    56 00000038 88D8                        mov al,y
    57 0000003A 2C07                        sub al,7
    58 0000003C C3                          ret
    59                                  
    60                                  fx2: ; y+t
    61 0000003D 88D8                        mov al,y
    62 0000003F 00F0                        add al,t
    63 00000041 C3                          ret
    64                                  
    65                                  fx3: ; y-t
    66 00000042 88D8                        mov al,y
    67 00000044 28F8                        sub al,x
    68 00000046 C3                          ret
    69                                  
    70                                  ; fx4: ; sin(x+y+t)
    71                                  ;     mov al,x
    72                                  ;     add al,y
    73                                  ;     add al,t
    74                                  ;     call sin
    75                                  ;     ret
    76                                  
    77                                  fx5: ; bitmap_data[i+t]
    78 00000047 53                          push bx
    79 00000048 88D0                        mov al,i
    80 0000004A 00F0                        add al,t
    81 0000004C BB[7801]                    mov bx,bitmap_data
    82 0000004F D7                          xlat
    83 00000050 5B                          pop bx
    84 00000051 C3                          ret
    85                                  
    86                                  ; fx6: ; -8*(y-x)+t
    87                                  ;     mov cl,-8
    88                                  ;     mov al,y
    89                                  ;     sub al,x
    90                                  ;     mul cl
    91                                  ;     call limit
    92                                  ;     add al,t
    93                                  ;     ret
    94                                  
    95                                  ; fx7: ; sin(sqrt(x^2+y^2))-t)
    96                                  ;     mov al,i   ; isqrt_table[i] = sqrt(x^2+y^2)
    97                                  ;     push bx
    98                                  ;     mov bx,isqrt_table
    99                                  ;     xlat
   100                                  ;     pop bx
   101                                  ;     sub al,t
   102                                  ;     call sin
   103                                  ;     ret
   104                                  
   105                                  ; sin: ; sine function
   106                                  ;     call wrap
   107                                  ;     push bx
   108                                  ;     add al,15 ; sin(-15) = sin_table[0]
   109                                  ;     mov bx,sin_table
   110                                  ;     xlat 
   111                                  ;     pop bx
   112                                  ;     ret
   113                                  
   114                                  ; wrap: ; while (al>15) al-=15; while (al<-15) al+=15
   115                                  ;     cmp al,15
   116                                  ;     jg .sub16
   117                                  ;     cmp al,-15
   118                                  ;     jl .add16
   119                                  ;     ret
   120                                  ;   .sub16:
   121                                  ;     sub al,31
   122                                  ;     jmp wrap
   123                                  ;   .add16:
   124                                  ;     add al,31
   125                                  ;     jmp wrap
   126                                  
   127                                  ; limit: ; if (al>15) al=15; else if (al<-15) al=-15;
   128                                  ;     cmp al,15
   129                                  ;     jg .pos16
   130                                  ;     cmp al,-15
   131                                  ;     jnl .ret
   132                                  ;     mov al,-15
   133                                  ;     ret
   134                                  ;   .pos16:
   135                                  ;     mov al,15
   136                                  ;   .ret:
   137                                  ;     ret
   138                                  
   139                                  ; calc_isqrt_xx_yy: ; isqrt_table[i] = sqrt(x^2+y^2)
   140                                  ;     push dx
   141                                  ;     push di
   142                                  ;     mov di,isqrt_table      ; di=isqrt_table[0]
   143                                  ;     add di,dx               ; di+=i
   144                                  ;     mov al,x
   145                                  ;     inc al
   146                                  ;     mul al                  ; x*x
   147                                  ;     xchg ax,cx
   148                                  ;     mov al,y
   149                                  ;     inc al
   150                                  ;     mul al                  ; y*y
   151                                  ;     add ax,cx               ; + 
   152                                  ;   .isqrt:  ; while((L+1)^2<=y) L++; return L
   153                                  ;     xchg cx,ax              ; cx=y
   154                                  ;     xor ax,ax               ; ax=L=0
   155                                  ;   .loop:
   156                                  ;     inc ax
   157                                  ;     push ax
   158                                  ;     mul ax
   159                                  ;     cmp ax,cx
   160                                  ;     pop ax
   161                                  ;     jl .loop
   162                                  ;     dec ax
   163                                  ;   .end_isqrt:
   164                                  ;     mov [di],al             ; store al
   165                                  ;     pop di
   166                                  ;     pop dx
   167                                  ;     ret
   168                                  
   169                                  setup:                      ; starting point of code
   170                                      ;no need to clear the screen. ROM BIOS does this already.
   171                                  
   172 00000052 B8000C                      mov ax,GREEN << 8
   173 00000055 50                          push ax
   174 00000056 07                          pop es
   175 00000057 BF0000                      mov di,0
   176 0000005A B90040                      mov cx,0x4000
   177 0000005D B0FF                        mov al,255
   178 0000005F F3AA                        rep stosb
   179                                  
   180 00000061 F4                          hlt
   181                                  
   182                                      ;set ds and es segments to cs
   183 00000062 0E                          push cs
   184 00000063 1F                          pop ds                  ; ds:si in code segment
   185 00000064 0E                          push cs
   186 00000065 07                          pop es                  ; es:di in code segment
   187                                  
   188                                      ; generate 16x8 bitmap data for 16 sizes of dots.
   189                                      ; Because the dots are symmetric we can save at least
   190                                      ; 97 bytes by mirroring the left-top corner 3 times
   191                                  
   192 00000066 E87300                      call generate_chars
   193                                  
   194 00000069 31ED                        xor bp,bp               ; start with effect 0
   195 0000006B 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
   196                                  
   197                                  draw:
   198 0000006D BF700A                      mov di,TOP              ; left top corner to center tixy
   199                                    .dot:
   200 00000070 52                          push dx
   201 00000071 88D0                        mov al,i                ; al=index
   202 00000073 30E4                        xor ah,ah               ; ah=0
   203 00000075 B110                        mov cl,16
   204 00000077 F6F1                        div cl                  ; calculate x and y from i
   205 00000079 93                          xchg ax,bx              ; bh=x, bl=y
   206 0000007A 5A                          pop dx
   207                                  
   208                                      ;on the first frame calc sqrt table for every i
   209                                      ;reusing the i,x,y loop here. this saves some bytes.
   210                                      ; or t,t
   211                                      ; jnz .call_effect
   212                                      ; call calc_isqrt_xx_yy
   213                                    
   214                                    ; .call_effect:
   215                                    ;   push bp                   ; bp contains current effect number
   216                                    ;   mov bp, [fx_table + bp]   ; overwrite bp with address of effect
   217                                    ;   and bp,0xff               ; reduce address to single byte
   218                                    ;   call bp                   ; call effect, al contains result
   219                                    ;   pop bp                    ; restore effect number
   220 0000007B B00F                        mov al,15
   221                                  
   222                                    ; .draw_char_color:
   223                                    ;   cmp al,0
   224                                    ;   pushf
   225                                    ;   jge .red
   226                                    ;   neg al
   227                                  
   228                                    .red:
   229 0000007D B900F0                      mov cx,RED << 8         ; ch=0xf0, cl=0
   230 00000080 E83800                      call draw_char
   231                                      ; popf
   232 00000083 7D02                        jge .green_blue
   233 00000085 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
   234                                  
   235                                    .green_blue:
   236 00000087 B50C                        mov ch,GREEN
   237 00000089 E82F00                      call draw_char
   238 0000008C B5F4                        mov ch,BLUE
   239 0000008E E82A00                      call draw_char
   240                                  
   241                                    .next:  
   242 00000091 FEC2                        inc i                   ; i++
   243 00000093 83C708                      add di,8         
   244 00000096 80FF0F                      cmp x,15
   245 00000099 7CD5                        jl .dot                  ; next col
   246 0000009B 81C72001                    add di,4*COLS       
   247 0000009F 81C7A000                    add di,160
   248 000000A3 80FB0F                      cmp y,15
   249 000000A6 7CC8                        jl .dot                  ; next line
   250 000000A8 FEC6                        inc t
   251 000000AA 80FE32                      cmp t,effect_timeout
   252 000000AD 72BE                        jb draw                 ; next frame
   253 000000AF 45                          inc bp                  ; inc effect
   254 000000B0 30F6                        xor t,t                 ; reset time
   255 000000B2 83FD03                      cmp bp,3
   256 000000B5 7CB6                        jl draw                 ; next effect
   257 000000B7 31ED                        xor bp,bp               ; reset effect
   258 000000B9 EBB2                        jmp draw
   259                                  
   260                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   261 000000BB 50                          push ax
   262 000000BC 57                          push di
   263                                  
   264 000000BD 51                          push cx
   265 000000BE 07                          pop es                  ; es=bp (color channel now cx)
   266 000000BF 0E                          push cs
   267 000000C0 1F                          pop ds                  ; ds=cs
   268                                  
   269 000000C1 B90400                      mov cx,4
   270 000000C4 51                          push cx
   271 000000C5 51                          push cx
   272                                  
   273 000000C6 240F                        and al,15               ; limit al to 15
   274 000000C8 98                          cbw                     ; ah=0
   275                                     
   276 000000C9 D2E0                        shl al,cl               ; al*=16
   277 000000CB 05[7801]                    add ax,bitmap_data
   278 000000CE 96                          xchg si,ax              ; si = source address of rendered bitmap char
   279                                  
   280 000000CF 59                          pop cx                  ;cx=4
   281 000000D0 F3A5                        rep movsw
   282 000000D2 81C71801                    add di,4*COLS-8
   283 000000D6 59                          pop cx                  ;cx=4
   284 000000D7 F3A5                        rep movsw
   285                                  
   286 000000D9 5F                          pop di                    
   287 000000DA 58                          pop ax
   288 000000DB C3                          ret
   289                                  
   290                                  generate_chars:
   291 000000DC BF[7801]                    mov di,bitmap_data      ; dest address of render data
   292 000000DF 30FF                        xor bh,bh
   293                                    
   294                                    .render_char:
   295 000000E1 30E4                        xor ah,ah
   296 000000E3 88F8                        mov al,bh
   297 000000E5 B90400                      mov cx,4                ; cl is also used below
   298 000000E8 F6E1                        mul cl
   299 000000EA 89C6                        mov si,ax
   300 000000EC 81C6[3801]                  add si,img
   301                                    
   302                                    .render_char_part:        ; input requirement at first time cl=4
   303 000000F0 AC                          lodsb                   ; use lodsb instead of movsb to keep a copy in al
   304 000000F1 AA                          stosb                   ; draw in left top nibble
   305 000000F2 53                          push bx                 ; save cur x and y
   306 000000F3 51                          push cx                 ; cur loop counter (4,3,2,1)
   307 000000F4 51                          push cx
   308 000000F5 5B                          pop bx                  ; bx = counter
   309 000000F6 D1E3                        shl bx,1                ; bx *= 2
   310 000000F8 53                          push bx                 ; save counter*2 for right bottom
   311 000000F9 83FB02                      cmp bx,2                ; skip top line of left bottom nibble
   312 000000FC 7403                        je .flip_bits
   313 000000FE 884101                      mov [di+bx+1],al        ; draw in left bottom starting at line 3 instead of 4
   314                                  
   315                                    .flip_bits:                 ; flips all bits dropping highest bit
   316 00000101 B108                        mov cl,8                ; 8 bits to flip
   317 00000103 30E4                        xor ah,ah
   318                                    
   319                                    .flip_bit:
   320 00000105 BB0180                      mov bx,0x8001           ; bl=1, bh=128  bl doubles, bh halves
   321 00000108 D2E3                        shl bl,cl
   322 0000010A 84D8                        test al,bl
   323 0000010C 7406                        jz .next_bit
   324 0000010E 49                          dec cx
   325 0000010F D2EF                        shr bh,cl
   326 00000111 08FC                        or ah,bh
   327 00000113 41                          inc cx
   328                                  
   329                                    .next_bit:
   330 00000114 E2EF                        loop .flip_bit          ; loop 8 bits for flipping
   331 00000116 886503                      mov [di+3],ah           ; draw in right top nibble
   332 00000119 5B                          pop bx                  ; bx = counter*2
   333 0000011A 83FB02                      cmp bx,2                ; skip top line of right bottom nibble
   334 0000011D 7403                        je .flip_done
   335 0000011F 886105                      mov [di+bx+5],ah        ; draw in right bottom starting at line 3 instead of 4
   336                                  
   337                                    .flip_done:
   338 00000122 59                          pop cx                  ; restore loop counter
   339 00000123 5B                          pop bx                  ; restore x and y
   340 00000124 E2CA                        loop .render_char_part
   341                                  
   342                                    .clear_bottom_line:
   343 00000126 83C707                      add di,7
   344 00000129 30C0                        xor al,al
   345 0000012B AA                          stosb                   ; right bottom
   346 0000012C 83C703                      add di,3
   347 0000012F AA                          stosb                   ; left bottom
   348                                  
   349                                    .next_char:
   350 00000130 FEC7                        inc bh                  ; next char
   351 00000132 80FF10                      cmp bh,16
   352 00000135 7CAA                        jl .render_char
   353 00000137 C3                          ret
   354                                  
   355                                  img:
   356 00000138 00000000                    db 0,0,0,0
   357 0000013C 00000001                    db 0,0,0,1
   358 00000140 00000003                    db 0,0,0,3
   359 00000144 00000103                    db 0,0,1,3
   360 00000148 00000307                    db 0,0,3,7
   361 0000014C 0000070F                    db 0,0,7,15
   362 00000150 00030F1F                    db 0,3,15,31
   363 00000154 00071F3F                    db 0,7,31,63
   364 00000158 010F3F3F                    db 1,15,63,63
   365 0000015C 031F3F3F                    db 3,31,63,63
   366 00000160 071F3F7F                    db 7,31,63,127
   367 00000164 071F7F7F                    db 7,31,127,127
   368 00000168 073F7F7F                    db 7,63,127,127
   369 0000016C 0F3F7F7F                    db 15,63,127,127
   370 00000170 0F3F7FFF                    db 15,63,127,255
   371 00000174 1F7FFFFF                    db 31,127,255,255
   372                                  
   373                                  ; %assign num $-$$
   374                                  ; %warning total num
   375                                  
   376                                  bitmap_data:                          ; destination for 128 bytes rendered bitmap data
   377                                      
   378                                  ; times 368640-num db 0                 ; fill up with zeros until file size=360k
