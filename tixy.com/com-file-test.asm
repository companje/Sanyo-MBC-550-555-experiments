; Rick Companje, April 10, 2022
    cpu 8086
    org 0x100

    cols equ 80
    startpos equ 4*24 + 4*cols*8

    mov ax,0x0002
    int 0x10

    mov ch,0  ; t
forT:
    mov cl,0  ; i
    mov dl,0  ; x
    mov dh,0  ; y           
    mov di,startpos

    call clear

forY:
    mov dl,0
forX:
    ; mov al,15
    ; mov al,ch    ; t
    ; and al,7     ; 

    ; add al,dh
    ; sub al,7
    push dx
    ; shl dh,1
    ; shl dl,1
    ; sub dh,ch
    ; add dl,ch
    mov al,dh  ;  x*y+t
    mul dl
    add al,ch
    pop dx

    ; mov al,ch           ; t
    ; times 2 shr al,1    ; /=2
    ; and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
    ; times 2 shl al,1    ; *=4
    ; mov bx,sin
    ; cs xlat                ; extract sin value

    call draw_dot_color2
    inc dl              ; x
    inc cl              ; i
    add di,8
    cmp dl,16
    jl forX
    mov dl,0
    add di,(cols-16)*8    ; skip remaining cols
    inc dh
    cmp dh,16
    jl forY
    inc ch              ; t
    ; jnc forT
    cmp ch,50
    jb forT
    int 0x20

    ; jmp top

; fx0:
;     mov al,ch           ; t
;     times 2 shr al,1    ; /=2
;     and al,15           ; wrap (werkt dit ook voor negatieve getallen?)
;     times 2 shl al,1    ; *=4
;     mov bx,sin
;     cs xlat                ; extract sin value
;     ret
clear:
    push di
    push bx
    push cx
    mov ax,0
    mov bx,0xf400
    mov es,bx
    mov cx,10240/2
    rep stosw
    mov bx,0x3c00
    mov es,bx
    mov cx,10240/2
    rep stosw
    pop cx
    pop bx
    pop di
    ret

draw_dot_color2:
    mov bx,0xf400
    or al,al
    jns .dr
    mov bx,0x3c00
.dr call draw_dot
    ret

draw_dot_color:
    mov bx,0xf000    ; red
    call draw_dot
    or al,al
    jns .draw_blue_green  ; check sign bit for negative number
    mov al,0         ; clear dot on blue and green channel
.draw_blue_green:
    neg al
    mov bx,0xf400    ; blue
    call draw_dot
    mov bx,0x3c00    ; green
    call draw_dot
    ret

draw_dot:
    push di
    push ax
    push cx
    mov ah,al    
    or al,al
    jns .positive
    neg al
.positive:
    mov es,bx    ; vram
    and al,15    ; limit to 15 (4 bits)
    mov cl,8
    mul cl    ; ax=al*8
    mov si,ax
    add si,img
    times 4 cs movsw
    add di,(4*cols)-8
    mov si,ax
    add si,img+128
    times 4 cs movsw
    pop cx
    pop ax
    pop di
    ret

; table: db fx0

; sin:
;     db 0x00,0x01,0x03,0x04,0x06,0x07,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0e,0x0f,0x0f,0x0f
;     db 0x0f,0x0f,0x0f,0x0f,0x0e,0x0e,0x0d,0x0c,0x0b,0x0a,0x09,0x07,0x06,0x04,0x03,0x01
;     db 0x00,0xff,0xfd,0xfc,0xfa,0xf9,0xf7,0xf6,0xf5,0xf4,0xf3,0xf2,0xf2,0xf1,0xf1,0xf1
;     db 0xf1,0xf1,0xf1,0xf1,0xf2,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf9,0xfa,0xfc,0xfd,0xff

img:
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80
    db 0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xc0
    db 0x00,0x00,0x00,0x03,0x00,0x00,0x80,0xe0,0x00,0x00,0x00,0x03,0x00,0x00,0x80,0xe0
    db 0x00,0x00,0x03,0x07,0x00,0x00,0xe0,0xf0,0x00,0x00,0x03,0x07,0x00,0x00,0xe0,0xf0
    db 0x00,0x00,0x07,0x0f,0x00,0x80,0xf0,0xf8,0x00,0x00,0x07,0x0f,0x00,0x80,0xf0,0xf8
    db 0x00,0x03,0x0f,0x1f,0x00,0xe0,0xf8,0xfc,0x00,0x07,0x1f,0x1f,0x00,0xf0,0xfc,0xfc
    db 0x00,0x0f,0x1f,0x3f,0x80,0xf8,0xfc,0xfe,0x00,0x0f,0x3f,0x3f,0x80,0xf8,0xfe,0xfe
    db 0x07,0x1f,0x3f,0x7f,0xf0,0xfc,0xfe,0xff,0x07,0x3f,0x7f,0x7f,0xf0,0xfe,0xff,0xff
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    db 0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00
    db 0x03,0x00,0x00,0x00,0xe0,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0xe0,0x00,0x00,0x00
    db 0x07,0x00,0x00,0x00,0xf0,0x80,0x00,0x00,0x07,0x00,0x00,0x00,0xf0,0x80,0x00,0x00
    db 0x0f,0x03,0x00,0x00,0xf8,0xe0,0x00,0x00,0x1f,0x07,0x00,0x00,0xfc,0xf0,0x00,0x00
    db 0x1f,0x0f,0x00,0x00,0xfc,0xf8,0x80,0x00,0x3f,0x0f,0x00,0x00,0xfe,0xf8,0x80,0x00
    db 0x3f,0x1f,0x07,0x00,0xfe,0xfc,0xf0,0x00,0x7f,0x3f,0x07,0x00,0xff,0xfe,0xf0,0x00

; clearScreen:
;     cld
;     mov ax,0x5555  ; bitmap pattern
;     mov bp,0xf000  ; red + blue
;     mov es,bp
;     mov di,0
;     mov cx,0x4000
;     rep stosw
;     mov bp,0x0c00  ; green
;     mov es,bp
;     mov di,0
;     mov cx,0x2000
;     rep stosw
;     ret

; ; %include "lib.asm"
; incbin "Sanyo-MS-DOS-2.11-minimal.img",($-$$)  ; include default disk image skipping first 512 bytes

