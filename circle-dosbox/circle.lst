     1                                  ; cpu 8086
     2                                  
     3                                  ; It is based on the fact that the square of X can be written as the sum
     4                                  ; for i=0..x-1 of (2i+1), like this :
     5                                  ; 1*1=1  = (2*0+1)
     6                                  ; 2*2=4  = (2*0+1)+(2*1+1)
     7                                  ; 3*3=9  = (2*0+1)+(2*1+1)+(2*2+1)
     8                                  ; etc
     9                                                      ; .MODEL    TINY
    10                                                      ; .286
    11                                                      ; .CODE
    12                                                      ORG       100h
    13 00000000 B81300                  Start:              mov       ax,13h
    14 00000003 CD10                                        int       10h                 ;mode 13h
    15 00000005 6800A0                                      push      0a000h
    16 00000008 07                                          pop       es                  ;es in video segment
    17                                                      
    18                                  
    19 00000009 BAA000                                      mov       dx,160              ;Xc
    20 0000000C BF6400                                      mov       di,100              ;Yc
    21 0000000F B005                                        mov       al,05h              ;Colour
    22 00000011 BB0100                                      mov       bx,1               ;Radius
    23 00000014 E80D00                                      call      Circle              ;Draw circle
    24                                  
    25 00000017 B400                                        mov       ah,0
    26 00000019 CD16                                        int       16h                 ;Wait for key
    27 0000001B B80300                                      mov       ax,3
    28 0000001E CD10                                        int       10h                 ;Mode 3
    29 00000020 B44C                                        mov       ah,4ch
    30 00000022 CD21                                        int       21h                 ;Terminate
    31                                  ;*** Circle
    32                                  ; dx= x coordinate center
    33                                  ; di= y coordinate center
    34                                  ; bx= radius
    35                                  ; al= colour
    36 00000024 BD0000                  Circle:             mov       bp,0                ;X coordinate
    37 00000027 89DE                                        mov       si,bx               ;Y coordinate
    38 00000029 E81100                  c00:                call      _8pixels            ;Set 8 pixels
    39 0000002C 29EB                                        sub       bx,bp               ;D=D-X
    40 0000002E 45                                          inc       bp                  ;X+1
    41 0000002F 29EB                                        sub       bx,bp               ;D=D-(2x+1)
    42 00000031 7F05                                        jg        c01                 ;>> no step for Y
    43 00000033 01F3                                        add       bx,si               ;D=D+Y
    44 00000035 4E                                          dec       si                  ;Y-1
    45 00000036 01F3                                        add       bx,si               ;D=D+(2Y-1)
    46 00000038 39EE                    c01:                cmp       si,bp               ;Check X>Y
    47 0000003A 73ED                                        jae       c00                 ;>> Need more pixels
    48 0000003C C3                                          ret
    49 0000003D E80000                  _8pixels:           call      _4pixels            ;4 pixels
    50 00000040 87EE                    _4pixels:           xchg      bp,si               ;Swap x and y
    51 00000042 E80000                                      call      _2pixels            ;2 pixels
    52 00000045 F7DE                    _2pixels:           neg       si
    53 00000047 57                                          push      di
    54 00000048 01F7                                        add       di,si
    55                                                     
    56 0000004A 69FF4001                                    imul di,320
    57 0000004E 01D7                                        add       di,dx
    58 00000050 268803                                      mov       es:[di+bp],al
    59 00000053 29EF                                        sub       di,bp
    60 00000055 AA                                          stosb
    61 00000056 5F                                          pop       di
    62 00000057 C3                                          ret
    63                                                      
