     1                                  BITS 16
     2                                  
     3                                  ORG 100h
     4                                  
     5 00000000 6800A0                  push 0a000h           ;Video memory graphics segment
     6 00000003 07                      pop es
     7                                  
     8 00000004 B81300                  mov ax, 0013h         ;320x200@8bpp
     9 00000007 CD10                    int 10h
    10                                  
    11 00000009 B90100                  mov cx,1
    12                                  circles:
    13 0000000C 51                      push cx
    14                                  
    15 0000000D 6A04                    push 4              ;color
    16                                  
    17 0000000F 89C8                    mov ax,cx
    18 00000011 D1E0<rep 4h>            times 4 shl ax,1      ; mul 16
    19 00000019 83C032                  add ax,50
    20                                  
    21                                  ; mov ax,150
    22                                  
    23 0000001C 50                      push ax                ;cX
    24                                  ; push 100               ; cX
    25 0000001D 6A63                    push 99               ;cY
    26                                  ; push 2             ;radius
    27                                  ; shr cx,1
    28 0000001F 51                      push cx                ; Radius
    29                                  
    30 00000020 E81500                  call drawFilledCircle
    31 00000023 59                      pop cx
    32                                  
    33 00000024 41                      inc cx
    34 00000025 83F910                  cmp cx,16
    35 00000028 7CE2                    jl circles
    36                                  
    37                                  ;Wait for a key
    38 0000002A 30E4                    xor ah, ah
    39 0000002C CD16                    int 16h
    40                                  
    41                                  ;Restore text mode
    42 0000002E B80300                  mov ax, 0003h
    43 00000031 CD10                    int 10h
    44                                  
    45                                  ;Return
    46 00000033 B8004C                  mov ax, 4c00h
    47 00000036 CD21                    int 21h
    48                                  
    49                                  
    50                                  ;Color
    51                                  ;cX
    52                                  ;cY
    53                                  ;R
    54                                  drawFilledCircle:
    55 00000038 55                       push bp
    56 00000039 89E5                     mov bp, sp
    57                                  
    58 0000003B 83EC02                   sub sp, 02h
    59                                  
    60 0000003E 8B4E04                   mov cx, WORD [bp+04h]   ;R
    61                                  
    62                                   
    63                                  
    64 00000041 89C8                     mov ax, cx              
    65 00000043 F7E0                     mul ax                  ;AX = R^2
    66 00000045 8946FE                   mov WORD [bp-02h], ax   ;[bp-02h] = R^2
    67                                  
    68                                  
    69                                  
    70 00000048 8B4606                   mov ax, WORD [bp+06h]
    71 0000004B 29C8                     sub ax, cx              ;i = cY-R
    72 0000004D 8B5E08                   mov bx, WORD [bp+08h]
    73 00000050 29CB                     sub bx, cx              ;j = cX-R
    74                                  
    75 00000052 D1E1                     shl cx, 1
    76 00000054 89CA                     mov dx, cx              ;DX = Copy of 2R
    77                                  
    78                                  .advance_v:
    79 00000056 51                       push cx
    80 00000057 53                       push bx
    81                                  
    82 00000058 89D1                     mov cx,  dx
    83                                  
    84                                  .advance_h:
    85                                    ;Save values
    86 0000005A 53                        push bx
    87 0000005B 50                        push ax
    88 0000005C 52                        push dx
    89                                  
    90                                    ;Compute (i-y) and (j-x)
    91 0000005D 2B4606                    sub ax, WORD [bp+06h]
    92 00000060 2B5E08                    sub bx, WORD [bp+08h]
    93                                  
    94 00000063 F7E0                      mul ax                  ;Compute (i-y)^2
    95                                  
    96 00000065 50                        push ax
    97 00000066 89D8                      mov ax, bx             
    98 00000068 F7E0                      mul ax
    99 0000006A 5B                        pop bx                  ;Compute (j-x)^2 in ax, (i-y)^2 is in bx now
   100                                  
   101 0000006B 01D8                      add ax, bx              ;(j-x)^2 + (i-y)^2
   102 0000006D 3B46FE                    cmp ax, WORD [bp-02h]   ;;(j-x)^2 + (i-y)^2 <= R^2
   103                                  
   104                                    ;Restore values before jump
   105 00000070 5A                        pop dx
   106 00000071 58                        pop ax
   107 00000072 5B                        pop bx
   108                                  
   109 00000073 7708                      ja .continue            ;Skip pixel if (j-x)^2 + (i-y)^2 > R^2
   110                                  
   111                                    ;Write pixel
   112 00000075 FF760A                    push WORD [bp+0ah]
   113 00000078 53                        push bx
   114 00000079 50                        push ax
   115 0000007A E80F00                    call writePx
   116                                  
   117                                  
   118                                  .continue:
   119                                  
   120                                    ;Advance j
   121 0000007D 43                        inc bx
   122 0000007E E2DA                     loop .advance_h
   123                                  
   124                                   ;Advance i
   125 00000080 40                       inc ax
   126                                  
   127                                  
   128 00000081 5B                       pop bx            ;Restore j
   129 00000082 59                       pop cx            ;Restore counter
   130                                  
   131 00000083 E2D1                    loop .advance_v
   132                                  
   133 00000085 83C402                   add sp, 02h
   134                                  
   135                                  
   136 00000088 5D                       pop bp
   137 00000089 C20800                   ret 08h
   138                                  
   139                                  
   140                                  
   141                                  ;Color
   142                                  ;X
   143                                  ;Y
   144                                  writePx:
   145 0000008C 55                       push bp
   146 0000008D 89E5                     mov bp, sp
   147                                  
   148 0000008F 50                       push ax
   149 00000090 53                       push bx
   150                                  
   151 00000091 8B5E04                   mov bx, WORD [bp+04h]
   152 00000094 89D8                     mov ax, bx
   153 00000096 C1E306                   shl bx, 6
   154 00000099 C1E008                   shl ax, 8
   155 0000009C 01C3                     add bx, ax       ;320 = 256 + 64
   156                                  
   157 0000009E 035E06                   add bx, WORD [bp+06h]
   158 000000A1 8B4608                   mov ax, WORD [bp+08h]
   159                                  
   160                                   ;TODO: Clip
   161                                  
   162 000000A4 268807                   mov BYTE [es:bx], al
   163                                  
   164 000000A7 5B                       pop bx
   165 000000A8 58                       pop ax
   166                                  
   167 000000A9 5D                       pop bp
   168 000000AA C20600                   ret 06h
