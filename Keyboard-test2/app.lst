     1                                  cpu 8086
     2                                  org 0
     3                                  
     4                                  GREEN equ 0x1c00
     5                                  ROM equ 0xFE00
     6                                  FONT equ 0xFF00
     7                                  COLS equ 72
     8                                  ROWS equ 50
     9                                  BYTES_PER_ROW equ 8*72  ; 25 lines
    10                                  
    11 00000000 EB08                    jmp setup
    12                                  
    13 00000002 48656C6C6F00            hello: db "Hello",0
    14 00000008 0000                    count: dw 0
    15                                  
    16                                  setup:
    17                                    ; mov al,0xFF
    18                                    ; out 0x3a,al           ; keyboard
    19                                    ; mov al,0x30
    20                                    ; out 0x3a,al           ; keyboard
    21                                  
    22 0000000A B000                      mov al,0
    23 0000000C E63A                      out 0x3a,al           ; keyboard \force state/
    24 0000000E E63A                      out 0x3a,al           ; keyboard \force state/
    25 00000010 B0FF                      mov al,0xFF
    26 00000012 E63A                      out 0x3a,al           ; keyboard \reset/
    27 00000014 E63A                      out 0x3a,al           ; keyboard \mode/
    28 00000016 B037                      mov al,0x37
    29 00000018 E63A                      out 0x3a,al           ; keyboard \set command
    30                                  
    31 0000001A B8001C                    mov ax,GREEN      
    32 0000001D 8EC0                      mov es,ax
    33 0000001F 31FF                      xor di,di
    34 00000021 31C0                      xor ax,ax
    35 00000023 B94038                    mov cx,14400
    36 00000026 F3AA                      rep stosb
    37                                  
    38 00000028 B005                      mov al, 5
    39 0000002A E610                      out 10h, al               ; select address 0x1c000 as green video page
    40                                  
    41 0000002C E84B00                    call initText
    42                                  
    43                                    ; mov bp,30000
    44 0000002F 31ED                      xor bp,bp
    45                                  draw:
    46 00000031 31FF                      xor di,di
    47 00000033 30E4                      xor ah,ah
    48 00000035 E43A                      in al,0x3a
    49 00000037 50                        push ax
    50 00000038 E87D00                    call DrawBinary
    51 0000003B 45                        inc bp
    52 0000003C 89E8                      mov ax,bp
    53 0000003E BF800D                    mov di,6*BYTES_PER_ROW
    54 00000041 E88800                    call DisplayNAX
    55                                  
    56 00000044 58                        pop ax
    57 00000045 A802                      test al,2
    58 00000047 74E8                      jz draw
    59                                  
    60 00000049 50                        push ax ; status
    61 0000004A 2EFF06[0800]              inc word [cs:count]
    62 0000004F BF0012                    mov di,8*BYTES_PER_ROW
    63 00000052 2EA1[0800]                mov ax,[cs:count]
    64 00000056 E87300                    call DisplayNAX
    65                                  
    66                                    ;status
    67 00000059 BF4014                    mov di,9*BYTES_PER_ROW
    68 0000005C 58                        pop ax
    69 0000005D E85800                    call DrawBinary
    70                                  
    71                                  
    72                                  
    73 00000060 BF4002                    mov di,1*BYTES_PER_ROW
    74 00000063 E438                      in al,0x38  ;get data byte
    75 00000065 E81D00                    call DrawChar
    76 00000068 BF8004                    mov di,2*BYTES_PER_ROW
    77 0000006B E85E00                    call DisplayNAX
    78 0000006E BFC006                    mov di,3*BYTES_PER_ROW
    79 00000071 E84400                    call DrawBinary
    80                                  
    81                                  
    82                                  
    83 00000074 B037                      mov al,0x37
    84 00000076 E63A                      out 0x3a,al ;drop key?
    85                                  
    86                                  
    87 00000078 EBB7                      jmp draw
    88                                  
    89                                  
    90                                  initText:
    91 0000007A B8001C                    mov ax,GREEN
    92 0000007D 8EC0                      mov es,ax
    93 0000007F B800FF                    mov ax,FONT
    94 00000082 8ED8                      mov ds,ax
    95 00000084 C3                        ret
    96                                  
    97                                  DrawChar:   ; ds=FONT, es=GREEN, al=charcode
    98 00000085 50                        push ax
    99 00000086 B408                      mov ah,8
   100 00000088 F6E4                      mul ah
   101 0000008A 89C6                      mov si,ax
   102 0000008C A5                        movsw
   103 0000008D A5                        movsw
   104 0000008E 81C71C01                  add di,0x11c
   105 00000092 A5                        movsw
   106 00000093 A5                        movsw
   107 00000094 81EF2001                  sub di,0x120
   108 00000098 81FF4038                  cmp di,14400
   109 0000009C 7202                      jb .return
   110 0000009E 31FF                      xor di,di      ; move to left top
   111                                  .return
   112 000000A0 58                        pop ax
   113 000000A1 C3                        ret
   114                                  
   115                                  DrawSpace:
   116 000000A2 B020                      mov al,' '
   117 000000A4 E8DEFF                    call DrawChar
   118 000000A7 C3                        ret
   119                                  
   120                                  DisplayStringTL:
   121 000000A8 31FF                      xor di,di
   122                                  DisplayString:
   123 000000AA 2E8A07                    mov al,[cs:bx]
   124 000000AD 43                        inc bx
   125 000000AE 08C0                      or al,al
   126 000000B0 7405                      jz .return
   127 000000B2 E8D0FF                    call DrawChar
   128 000000B5 EBF3                      jmp short DisplayString
   129                                  .return
   130 000000B7 C3                        ret
   131                                  
   132                                  
   133                                  DrawBinary:          ; input AL
   134 000000B8 88C3                      mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   135 000000BA B90800                    mov cx, 8           ; We gaan 8 bits schrijven
   136                                  .lp:
   137 000000BD D0C3                      rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   138 000000BF B80000                    mov ax, 0           ; AH leegmaken
   139 000000C2 1430                      adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   140 000000C4 51                        push cx             ; CX opslaan
   141 000000C5 E8BDFF                    call DrawChar       ; Schrijf het karakter naar het scherm
   142 000000C8 59                        pop cx              ; CX herstellen
   143 000000C9 E2F2                      loop .lp            ; Loop voor alle 8 bits
   144 000000CB C3                        ret
   145                                  
   146                                  DisplayNAX:
   147 000000CC 50                          push ax
   148 000000CD 52                          push dx
   149 000000CE 31D2                        xor dx,dx
   150 000000D0 52                          push dx ;high byte is zero
   151 000000D1 31D2                    .clp    xor dx,dx
   152 000000D3 2EF736[FB00]                cs div word [.base]
   153 000000D8 92                          xchg ax,dx
   154 000000D9 05300E                      add ax,0xe30
   155 000000DC 50                          push ax
   156 000000DD 92                          xchg ax,dx
   157 000000DE 09C0                        or ax,ax
   158 000000E0 75EF                        jnz .clp
   159 000000E2 58                      .dlp    pop ax
   160 000000E3 08E4                        or ah,ah
   161 000000E5 7405                        jz .done
   162                                      ; int 0x29
   163 000000E7 E89BFF                      call DrawChar
   164 000000EA EBF6                        jmp short .dlp
   165 000000EC 5A                      .done   pop dx
   166 000000ED E8B2FF                      call DrawSpace
   167 000000F0 E8AFFF                      call DrawSpace
   168 000000F3 E8ACFF                      call DrawSpace
   169 000000F6 E8A9FF                      call DrawSpace
   170 000000F9 58                          pop ax
   171 000000FA C3                          ret
   172 000000FB 0A00                    .base   dw 10
   173                                  
   174                                  
   175                                  clear_green:
   176 000000FD B9201C                    mov cx,COLS*ROWS*2
   177 00000100 B8001C                    mov ax,GREEN
   178 00000103 8EC0                      mov es,ax
   179 00000105 31FF                      xor di,di
   180 00000107 31C0                      xor ax,ax
   181 00000109 F3AB                      rep stosw         ; clear screen
   182 0000010B 31FF                      xor di,di
   183 0000010D C3                        ret
   184                                  
   185                                  
   186 0000010E 00<rep 2CEF2h>          times (180*1024)-($-$$) db 0
   187                                  
   188                                  
   189                                  
   190                                  
   191                                  
   192                                  ; cpu 8086
   193                                  ; org 0
   194                                  
   195                                  ; GREEN equ 0x1c00
   196                                  ; COLS equ 72
   197                                  ; ROWS equ 50
   198                                  ; FONT equ 0xFF00
   199                                  
   200                                  ; jmp setup
   201                                  
   202                                  ; cursor:
   203                                  ; col: db 0
   204                                  ; row: db 0
   205                                  
   206                                  ; FIXME
   207                                  ; ; text: times COLS*ROW
   208                                  
   209                                  ; setup:
   210                                  ;   mov al,0
   211                                  ;   out 0x3a,al           ; keyboard \force state/
   212                                   
   213                                  ;   mov al,0
   214                                  ;   out 0x3a,al           ; keyboard \force state/
   215                                    
   216                                  ;   mov al,0xFF
   217                                  ;   out 0x3a,al           ; keyboard \reset/
   218                                    
   219                                  ;   mov al,0xFF
   220                                  ;   out 0x3a,al           ; keyboard \mode/
   221                                    
   222                                  ;   mov al,0x37
   223                                  ;   out 0x3a,al           ; keyboard \set command
   224                                  
   225                                  ;   mov al, 5
   226                                  ;   out 10h, al           ; select address 0x1c000 as green video page
   227                                    
   228                                  ;   call clear_green
   229                                  
   230                                  
   231                                  ;   ; mov al,1
   232                                  ;   ; call draw_char
   233                                  ;   ; mov al,1
   234                                  ;   ; call draw_char
   235                                  ;   ; mov al,1
   236                                  ;   ; call draw_char
   237                                  
   238                                  ;   ; call rom_to_vram
   239                                  ;   ; hlt
   240                                  
   241                                  ;   cli
   242                                    
   243                                  ; draw:
   244                                  
   245                                  
   246                                  ;   mov cx,73
   247                                  ; .lp
   248                                  ;   mov al,65
   249                                  ;   call draw_char  
   250                                  ;   loop .lp
   251                                  
   252                                  ;   hlt
   253                                  
   254                                  ;   ; in al,0x3a
   255                                  ;   ; test al,2
   256                                  
   257                                  ;   ; ; jz .jiret
   258                                  
   259                                  ;   ; in al,0x38  ;get data byte
   260                                    
   261                                  ;   ; cmp al,0
   262                                  ;   ; je draw
   263                                  
   264                                  ;   ; cmp al, 0b00011111
   265                                  ;   ; je draw
   266                                  
   267                                  ;   ; ; call draw_char
   268                                  ;   ; call draw_char
   269                                  
   270                                  ;   ; mov al,0x37
   271                                  ;   ; out 0x3a,al ; drop key
   272                                  
   273                                  
   274                                  ;   cmp di,14400
   275                                  ;   jb draw
   276                                  ;   xor di,di
   277                                  ;   jmp draw
   278                                  
   279                                  ; rom_to_vram:
   280                                  ;   mov ax, 0xFE00
   281                                  ;   mov ds, ax       ; DS source segment
   282                                  ;   mov ax, GREEN
   283                                  ;   mov es, ax       ; ES dest segment
   284                                  ;   mov si, 0x1000   ; FONT offset in ROM
   285                                  ;   mov di, 0        ; dest index
   286                                  ;   mov cx, 0x4000   ; 8000 bytes (0x4000 in hexadecimal)
   287                                  ;   rep movsb        ; Kopieer CX bytes van DS:SI naar ES:DI
   288                                  ;   ret
   289                                  
   290                                  
   291                                  ; draw_char:   ; al=char, changes ax,di,si,ds
   292                                  ;   mov si,FONT
   293                                  ;   mov ds,si
   294                                  
   295                                  ;   shl ax,1
   296                                  ;   shl ax,1
   297                                  ;   shl ax,1
   298                                  ;   mov si,ax
   299                                  ;   movsw
   300                                  ;   movsw
   301                                  ;   push di
   302                                  ;   add di,4*COLS-4
   303                                  ;   movsw
   304                                  ;   movsw
   305                                  ;   pop di
   306                                  
   307                                  ;   push cs
   308                                  ;   pop ds
   309                                  
   310                                  ;   inc byte [col]
   311                                  
   312                                  ;   cmp byte [col],25
   313                                  ;   jne .done
   314                                  
   315                                  ;   mov byte [col],0
   316                                  ;   inc byte [row]     ; 1 row = 4 lines
   317                                  ;   inc byte [row]
   318                                  
   319                                  ;   push bx
   320                                  ;   mov bx,[cursor]
   321                                  ;   call calc_di
   322                                  ;   pop bx
   323                                  
   324                                  
   325                                  ; .done
   326                                  ;   ret
   327                                  
   328                                  ; calc_di:          ; input bl,bh [0,0,71,49]
   329                                  ;   mov ax,144      ; 2*72 cols
   330                                  ;   mul bh          ; bh*=144 resultaat in AX
   331                                  ;   shl ax,1        ; verdubbel AX
   332                                  ;   mov di,ax       ; di=ax (=bh*288)
   333                                  ;   shl bl,1        ; bl*=2
   334                                  ;   shl bl,1        ; bl*=2
   335                                  ;   mov bh,0
   336                                  ;   add di,bx       ; di+=bl
   337                                  ;   ret
   338                                  
   339                                  ; clear_green:
   340                                  ;   mov cx,COLS*ROWS*2
   341                                  ;   mov ax,GREEN
   342                                  ;   mov es,ax
   343                                  ;   xor di,di
   344                                  ;   xor ax,ax
   345                                  ;   rep stosw         ; clear screen
   346                                  ;   xor di,di
   347                                  ;   ret
   348                                  
   349                                  ; beep:
   350                                  ;   mov cx,3
   351                                  ; .lp in al,0x3a
   352                                  ;   test al,1
   353                                  ;   jz .lp
   354                                  ;   mov al,0x18
   355                                  ;   out 0x38,al
   356                                  ;   loop .lp
   357                                  ;   ret
   358                                  
   359                                  ; times (180*1024)-($-$$) db 0
   360                                  
