     1                                  ; Disassembling the Sanyo MBC-555 MS-DOS 2.11 floppy bootsector
     2                                  ; Rick Companje, The Netherlands, March 28th, 2022 + November 2024
     3                                  ; reconstructed using ndisasm 
     4                                  ; ndisasm -b16 empty-base.img > tmp.lst                 # this is for disassembling most of the code
     5                                  ; ndisasm -b16 -e 68 -o 68 empty-base.img  >  tmp2.lst  # this part is for the code at 0x44
     6                                  ; analysed using MAME debugger
     7                                  
     8                                  cpu 8086
     9                                  org 0x00
    10                                  
    11                                  PORT_DISK_STATUS_0x08 equ 0x08
    12                                  PORT_DISK_CMD_0x08 equ 0x08
    13                                  PORT_DISK_SECTOR_0x0C equ 0x0C
    14                                  PORT_DISK_DATA_0x0E equ 0x0E
    15                                  PORT_DISK_CONTROL_0x1C equ 0x1C     ; 1C: parallel/drive control
    16                                  PORT_VIDEO_PAGE_0x10 equ 0x10
    17                                  
    18                                  SCREEN_CENTER equ 0x1b50
    19                                  
    20                                  ; een standaard 5,25" floppy van 360KB heeft doorgaans:
    21                                  ; Tracks: 40 tracks per zijde
    22                                  ; Sectors per track: 9 sectoren per track
    23                                  ; Bytes per sector: 512 bytes
    24                                  ; (40 tracks × 9 sectoren × 512 bytes × 2 zijden = 360KB).
    25                                  
    26                                  ; Op een 360KB 5,25" floppy wordt vaak een cluster gevormd door 1 of 2 sectoren.
    27                                  
    28 00000000 E9E400                  jmp begin
    29                                  
    30 00000003 53616E796F312E32        db 'Sanyo1.2'
    31                                  
    32 0000000B 0002                    _0x0b:dw 512     ; bytes per sector
    33 0000000D 02                      _0x0d:db 2       ; sectors per cluster
    34 0000000E 0001                    _0x0e:dw 256     ; reserved sectors
    35 00000010 02                      _0x10:db 2       ; number of FATs
    36 00000011 7000                    _0x11:dw 112     ; max number of root directory entries (0x70)
    37 00000013 D002                    _0x13:dw 720     ; total sector count
    38 00000015 FD                      _0x15:db 0xfd    ; ??? 'ignore according to docs' but used for something: maybe FAT ID 0xFD to indicate 360 KB?
    39 00000016 0200                    _0x16:dw 2       ; sectors per FAT
    40 00000018 0900                    _0x18:dw 9       ; sectors per track
    41 0000001A 0200                    _0x1a:dw 2       ; number of heads
    42 0000001C 00                      _0x1c:db 0       ; -
    43 0000001D 00                      _0x1d:db 0       ; -
    44 0000001E 00                      _0x1e:db 0       ; - used but for what? is set to 1 
    45                                  
    46                                  ; used by bootsector code: 0x15, 0x1e, 0x18
    47                                  
    48 0000001F 001C                    GREEN_PLANE: dw 0x1c00
    49 00000021 00FF                    FONT: dw 0xff00
    50 00000023 20202020202E535953-     BOOT_ERROR: db '     .SYS file(s) not found     ',0x00
    50 0000002C 2066696C6528732920-
    50 00000035 6E6F7420666F756E64-
    50 0000003E 202020202000       
    51                                  
    52                                  _0x44:
    53 00000044 FEC6                        inc dh
    54 00000046 2EA1[1800]                  mov ax,[cs:_0x18]      ; sectors per track ?
    55 0000004A FEC0                        inc al
    56 0000004C 38C6                        cmp dh,al
    57 0000004E 7226                        jc _0x76
    58 00000050 B601                        mov dh,1
    59 00000052 FEC2                        inc dl
    60                                  _0x54:
    61 00000054 88D0                        mov al,dl
    62 00000056 2EF606[1500]01              test byte [cs:_0x15],1  ; 0xFD & 1 ?  check FAT ID ? 0xFD / 11111101 ???
    63 0000005C 7402                        jz _0x60
    64 0000005E D0E8                        shr al,1   ; divide al by 2 ?
    65                                  _0x60:
    66                                      ; al=0x61 ??
    67 00000060 E60E                        out PORT_DISK_DATA_0x0E,al                       ; 0xE  set track number?
    68 00000062 B018                        mov al,0x18
    69                                      out PORT_DISK_CMD,al                        ; floppy command
    69          ******************       error: symbol `PORT_DISK_CMD' not defined
    70                                  
    71 00000064 B000                        mov al,0
    72 00000066 7304                        jnc setDiskControl
    73 00000068 B004                        mov al,4
    74                                  setDiskControl:
    75                                      out PORT_DISK_CONTROL,al                    ; 0 or 4 ?
    75          ******************       error: symbol `PORT_DISK_CONTROL' not defined
    76 0000006A D40A                        aam
    77                                  
    78                                  _0x70:
    79                                      in al,PORT_DISK_STATUS      ; floppy status
    79          ******************       error: symbol `PORT_DISK_STATUS' not defined
    80 0000006C A801                        test al,1
    81 0000006E 75FC                        jnz _0x70
    82                                  _0x76:
    83 00000070 88F0                        mov al,dh
    84                                      out PORT_DISK_SECTOR,al     ; floppy set sector number
    84          ******************       error: symbol `PORT_DISK_SECTOR' not defined
    85                                      
    86 00000072 89D5                        mov bp,dx
    87 00000074 BA0800                      mov dx,0x8                  ; prepare dx=8 for reading disk status with in al,dx
    88 00000077 BEA500                      mov si,0xa5
    89 0000007A B702                        mov bh,0x2
    90 0000007C B396                        mov bl,0x96
    91 0000007E B400                        mov ah,0x0
    92                                  
    93 00000080 B080                        mov al,0x80                  ; read sector
    94                                      out PORT_DISK_CMD,al
    94          ******************       error: symbol `PORT_DISK_CMD' not defined
    95 00000082 89FC                        mov sp,di
    96 00000084 D40A<rep 4h>                times 4 aam      ; delay
    97                                  _0x96:
    98 0000008C EC                          in al,dx         ; dx=8  get disk status
    99 0000008D D0F8                        sar al,1
   100 0000008F 7326                        jnc _0xb7    
   101 00000091 75F9                        jnz _0x96
   102                                  _0x9d:
   103 00000093 EC                          in al,dx
   104 00000094 20D8                        and al,bl
   105 00000096 74FB                        jz _0x9d
   106                                      in al,PORT_DISK_DATA
   106          ******************       error: symbol `PORT_DISK_DATA' not defined
   107 00000098 AA                          stosb
   108                                  _0xa5:
   109 00000099 EC                          in al,dx          ; dx=8  get disk status
   110 0000009A 48                          dec ax
   111 0000009B 74FC                        jz _0xa5
   112 0000009D 38F8                        cmp al,bh
   113 0000009F 7516                        jnz _0xb7
   114                                  _0xad:
   115                                      in al,PORT_DISK_DATA
   115          ******************       error: symbol `PORT_DISK_DATA' not defined
   116 000000A1 AA                          stosb
   117 000000A2 EC                          in al,dx           ; dx=8  get disk status
   118 000000A3 38F8                        cmp al,bh
   119 000000A5 74FA                        jz _0xad
   120 000000A7 FFE6                        jmp si
   121                                  _0xb7:
   122 000000A9 EC                          in al,dx           ; dx=8  get disk status
   123 000000AA 89EA                        mov dx,bp
   124 000000AC A81C                        test al,0x1c
   125 000000AE 7412                        jz _0xc2
   126 000000B0 89E7                        mov di,sp
   127 000000B2 EBBC                        jmp short _0x76
   128                                  _0xc2:
   129 000000B4 E28E                        loop _0x44
   130 000000B6 2EF606[1E00]01              test byte [cs:_0x1e],1
   131                                  
   132 000000BC 7469                        jz _0x127   ; as long as there's no 1 at cs:0x1e repeat loading IO.SYS ?
   133                                  
   134 000000BE EA00004000                  jmp 0x40:0
   135                                  
   136                                  _FILENAME_IO_SYS:    
   137 000000C3 494F20202020202053-         db 'IO      SYS'
   137 000000CC 5953               
   138                                  
   139                                  _FILENAME_MSDOS_SYS: 
   140 000000CE 4D53444F5320202053-         db 'MSDOS   SYS'
   140 000000D7 5953               
   141                                  
   142                                  begin:  ; copies the bootsector to 0020:0000 and continues there
   143 000000D9 FA                          cli
   144 000000DA FC                          cld
   145 000000DB 8CC8                        mov ax,cs
   146 000000DD 8ED8                        mov ds,ax         
   147 000000DF 8ED0                        mov ss,ax         
   148 000000E1 BC0004                      mov sp,0x400
   149                                      
   150 000000E4 31FF                        xor di,di         
   151 000000E6 31F6                        xor si,si         
   152 000000E8 B82000                      mov ax,0x20
   153 000000EB 8EC0                        mov es,ax         ; ES destination segment 0x20
   154 000000ED B90001                      mov cx,0x100      ; 
   155 000000F0 F3A5                        repz movsw        ; copy 0x100 words (512 bytes) from DS:SI to ES:DI
   156                                  
   157 000000F2 06                          push es           ; put 0020 (segment) on the stack
   158 000000F3 B8[0601]                    mov ax,begin2
   159 000000F6 50                          push ax           ; put 0106 (offset) on the stack
   160 000000F7 CB                          retf              ; 'jump' to 0020:0106
   161                                  
   162                                  ; it continues here but now the bootsector code has been moved to 0020:0106
   163                                  begin2:               
   164 000000F8 8CC8                        mov ax,cs
   165 000000FA 8ED8                        mov ds,ax
   166 000000FC B80000                      mov ax,0
   167 000000FF 8EC0                        mov es,ax
   168 00000101 BF0000                      mov di,0
   169 00000104 BA0004                      mov dx,0x400      ; stack?
   170                                  
   171 00000107 2EF606[1500]02              test byte [cs:_0x15],2  ;  0xFD (11111101 & 2) ?
   172 0000010D 7512                        jnz _0x121
   173 0000010F FEC6                        inc dh
   174 00000111 FEC6                        inc dh     ; now dx=0x600
   175                                  _0x121:
   176 00000113 B90100                      mov cx,1
   177 00000116 E93BFF                      jmp _0x54
   178                                  _0x127:
   179 00000119 8CC8                        mov ax,cs
   180 0000011B 8ED8                        mov ds,ax
   181 0000011D 31C0                        xor ax,ax
   182 0000011F 8EC0                        mov es,ax
   183 00000121 89C7                        mov di,ax
   184 00000123 89C3                        mov bx,ax
   185 00000125 B20F                        mov dl,0x0f    ; now dx=0x60f
   186                                  
   187                                  _find_IO_SYS:
   188 00000127 BE[C300]                    mov si, _FILENAME_IO_SYS
   189 0000012A EB17                        jmp short _filenameCompare
   190                                  _0x13a:
   191 0000012C 08DB                        or bl,bl
   192 0000012E 752B                        jnz _0x15b
   193 00000130 B301                        mov bl,1
   194                                  _find_MSDOS_SYS:
   195 00000132 BE[CE00]                    mov si, _FILENAME_MSDOS_SYS
   196                                  _filenameCompare:
   197 00000135 89FD                        mov bp,di
   198 00000137 B90B00                      mov cx,0xb           ; 11 characters 'FILENAMEEXT'
   199 0000013A F3A6                        repe cmpsb           ; compares string at SI with DI. it searches for IO.SYS of MSDOS.SYS in the directory
   200 0000013C 89EF                        mov di,bp
   201 0000013E 74EC                        jz _0x13a
   202 00000140 83C720                      add di,byte +0x20    ; skip 32 bytes (date, filesize, attributes etc) to check the next filename in the directory
   203 00000143 FECA                        dec dl
   204 00000145 744B                        jz _printBootError
   205 00000147 08DB                        or bl,bl    
   206 00000149 74DC                        jz _find_IO_SYS
   207 0000014B EBE5                        jmp short _find_MSDOS_SYS
   208                                  
   209                                  _0x15b:
   210 0000014D 2EC606[1E00]01              mov byte [cs:_0x1e],1      ; write 1 to cs:001e
   211 00000153 B84000                      mov ax,0x40                ; segment where IO.SYS gets loaded
   212 00000156 8EC0                        mov es,ax
   213 00000158 BF0000                      mov di,0                   ; offset for IO.SYS
   214 0000015B B80700                      mov ax,7
   215 0000015E 2EF606[1500]01              test byte [cs:_0x15],1     ; 0xFD (11111101 & 1) ?
   216 00000164 7411                        jz _0x177
   217 00000166 B80A00                      mov ax,0xa
   218                                  _0x177:
   219 00000169 B208                        mov dl,8
   220 0000016B 2EF606[1500]02              test byte [cs:_0x15],2     ; 0xFD (11111101 & 2) ?
   221 00000171 7513                        jnz _0x186
   222 00000173 B209                        mov dl,9
   223 00000175 83C002                      add ax,2
   224                                  _0x186:                        ; dl is 8 or 9 here? based on the value at 0x15
   225 00000178 F6F2                        div dl
   226 0000017A FEC4                        inc ah
   227 0000017C 89C2                        mov dx,ax
   228 0000017E B95400                      mov cx,0x54
   229 00000181 E9D0FE                      jmp _0x54
   230                                  
   231                                  
   232                                  _printBootError:
   233 00000184 2E8E06[1F00]                mov es,[cs:GREEN_PLANE]      ; segment green video plane
   234 00000189 31C0                        xor ax,ax                    
   235 0000018B 31FF                        xor di,di                    ; left top on screen
   236 0000018D B90040                      mov cx,0x4000
   237 00000190 F3AB                        rep stosw                    ; clear screen by putting 16k of zeroes at ES:DI
   238 00000192 B005                        mov al,5
   239                                      out PORT_VIDEO_PAGE,al       ; select green page 0x5 - address 0x1C000(?) 
   239          ******************       error: symbol `PORT_VIDEO_PAGE' not defined
   240 00000194 2E8E1E[2100]                mov ds,[cs:FONT]             ; segment of font in ROM
   241 00000199 BA501B                      mov dx,SCREEN_CENTER         ; center of the screen for ES:DI
   242 0000019C 31DB                        xor bx,bx
   243                                  _0x1ae:
   244 0000019E 2E8A87[2300]                mov al,[cs:bx+BOOT_ERROR]    ; boot error text: '.SYS file(s) not found'
   245 000001A3 43                          inc bx
   246 000001A4 08C0                        or al,al                     ; if al=0 then...
   247                                  
   248                                  _haltAfterPrintBootError:
   249 000001A6 74FE                        jz _haltAfterPrintBootError  ;  ...then halt else continue
   250                                  
   251                                      ;continue if more letters of the boot error are to be printed
   252 000001A8 B108                        mov cl,8
   253 000001AA F6E1                        mul cl                       ; multiply ax by 8: get character from FONT table (8 bytes per char)
   254 000001AC 89C6                        mov si,ax
   255 000001AE 89D7                        mov di,dx                    ; position on the screen 0x1b50 is center
   256 000001B0 2E8E06[1F00]                mov es,[cs:GREEN_PLANE]      ; segment green video plane
   257 000001B5 B502                        mov ch,2
   258                                  _writeHalfChar:
   259 000001B7 B102                        mov cl,2
   260                                  _writeQuarterChar:
   261 000001B9 AD                          lodsw                        ; load char from FONT table
   262 000001BA 268905                      mov [es:di],ax            
   263 000001BD 47                          inc di    
   264 000001BE 47                          inc di                       ; write 2 lines of the char the char (2 bytes) to the screen
   265 000001BF FEC9                        dec cl    
   266 000001C1 75F6                        jnz _writeQuarterChar        ; repeat next 2 lines of the char
   267 000001C3 81C71C01                    add di,0x11c                 ; goto to next row of 4 lines to print bottom part of the char
   268 000001C7 FECD                        dec ch    
   269 000001C9 75EC                        jnz _writeHalfChar           ; write bottom part of the char to the screen
   270                                  
   271                                  
   272                                  
   273                                  
   274 000001CB 83C204                      add dx,byte +0x4              
   275 000001CE EBCE                        jmp short _0x1ae              
   276 000001D0 E0(6B)                      loopne 0x16b               ; incorrect address...?                                     
   277 000001D2 46                          inc si    
   278 000001D3 F0                          db 0xf0                    ; ????? debug.com shows 'LOCK'
   279 000001D4 8B46F4                      mov ax,[bp-0xc]                  
   280 000001D7 B107                        mov cl,7        
   281 000001D9 D3E8                        shr ax,cl       
   282 000001DB 8946F2                      mov [bp-0xe],ax             
   283 000001DE FF76EC                      push word [bp-0x14]                 
   284 000001E1 8A1E0E16                    mov bl,[0x160e]             
   285 000001E5 B700                        mov bh,0        
   286 000001E7 D1E3                        shl bx,1
   287 000001E9 FFB72E0A                    push word [bx+0xa2e]                  
   288                                      ; call 0x0000:0x000a       ; call IO.SYS  ?      
   289 000001ED 9A0A00                      db 0x9a,0x0a,0x00          ; missing two bytes here for call . Are those bytes outside the bootsector?
   290                                  
   291                                  ; %assign num $-$$
   292                                  ; times 368640-num db 0
   293                                  
   294 000001F0 <bin 59E10h>            incbin "Sanyo-MS-DOS-2.11-minimal.img",($-$$)  ; include default disk image skipping first 512 bytes
   295                                  
   296                                  
   297                                  
   298                                  
