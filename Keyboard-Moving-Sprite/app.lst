     1                                  %include "sanyo.asm"
     1                              <1> org 0
     2                              <1> cpu 8086
     3                              <1> 
     4 00000000 EB2B                <1> jmp boot
     5                              <1> 
     6                              <1> NUM_SECTORS equ 40          ; number of sectors to read
     7                              <1> BAR_WIDTH equ 30
     8                              <1> COLS  equ 72
     9                              <1> ROWS  equ 50
    10                              <1> LINES equ 200
    11                              <1> CENTER equ COLS*LINES/2+COLS*4/2
    12                              <1> RED   equ 0xf000
    13                              <1> GREEN equ 0x1c00
    14                              <1> BLUE  equ 0xf400
    15                              <1> DST   equ 0x38
    16                              <1> XD    equ 4
    17                              <1> YD    equ COLS*XD
    18                              <1> FONT equ 0xFF00
    19                              <1> BYTES_PER_ROW equ 8*COLS  ; 25 lines
    20                              <1> Color.R equ 0b100
    21                              <1> Color.G equ 0b010
    22                              <1> Color.B equ 0b001
    23                              <1> Color.W equ 0b111
    24                              <1> Color.C equ 0b011
    25                              <1> Color.M equ 0b101
    26                              <1> Color.Y equ 0b110
    27                              <1> Color.K equ 0b000
    28                              <1> CTRL equ 0b0000100000000000
    29                              <1> KEY_LEFT  equ 0b00011100
    30                              <1> KEY_RIGHT equ 0b00011101
    31                              <1> KEY_UP    equ 0b00011110
    32                              <1> KEY_DOWN  equ 0b00011111
    33                              <1> 
    34                              <1> cursor:
    35 00000002 00                  <1> .col: db 0
    36 00000003 00                  <1> .row: db 0
    37                              <1> 
    38                              <1> key:
    39 00000004 00                  <1>   .code db 0
    40 00000005 00                  <1>   .ctrl db 0
    41                              <1> 
    42                              <1> %macro set_cursor 2
    43                              <1>   ; mov di,%1 * BYTES_PER_ROW + %2 * 4  ; zero based
    44                              <1>   mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4   ; one based
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> %macro print 1
    48                              <1>   push ax
    49                              <1>   push bx
    50                              <1>   push cx
    51                              <1>   push dx
    52                              <1>   jmp %%endstr 
    53                              <1>   %%str: db %1,0
    54                              <1>   %%endstr: 
    55                              <1>   mov bx,%%str
    56                              <1>   call write_string
    57                              <1>   pop dx
    58                              <1>   pop cx
    59                              <1>   pop bx
    60                              <1>   pop ax
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> %macro register_interrupt 1
    64                              <1>   mov ax,%1
    65                              <1>   stosw
    66                              <1>   mov ax,cs
    67                              <1>   stosw
    68                              <1> %endmacro
    69                              <1> 
    70                              <1> ; int0: hlt
    71                              <1> ; int1: hlt
    72                              <1> ; int2: hlt
    73                              <1> ; int3: hlt
    74                              <1> ; int4: hlt
    75                              <1> 
    76                              <1> int0:; int0: Division by zero
    77 00000006 FC                  <1>   cld
    78 00000007 B800F4              <1>   mov ax,BLUE
    79 0000000A 8EC0                <1>   mov es,ax
    80 0000000C 31FF                <1>   xor di,di
    81 0000000E B9201C              <1>   mov cx,7200
    82 00000011 B8FFFF              <1>   mov ax,-1
    83 00000014 F3AB                <1>   rep stosw
    84 00000016 F4                  <1>   hlt
    85                              <1> 
    86                              <1>   ; set_cursor 5,5
    87                              <1>   ; print "Division by zero"
    88                              <1>   ; hlt
    89                              <1> 
    90                              <1> int1:; int1: Single step debugging
    91 00000017 B001                <1>   mov al,1
    92 00000019 EB09                <1>   jmp int_msg
    93                              <1> int2:; int2: Non maskable interrupt
    94 0000001B B002                <1>   mov al,2
    95 0000001D EB05                <1>   jmp int_msg
    96                              <1> int3:; int3: For one-byte interrupt
    97 0000001F F4                  <1>   hlt
    98                              <1>   ; push ax
    99                              <1>   ; push bx
   100                              <1>   ; push cx
   101                              <1>   ; push dx
   102                              <1>   ; push si
   103                              <1>   ; push di
   104                              <1>   ; push bp
   105                              <1>   ; push ds
   106                              <1>   ; push es
   107                              <1> 
   108                              <1>   ; ; mov di,10*4
   109                              <1>   ; ; set_cursor 5,5
   110                              <1>   ; xor di,di
   111                              <1>   ; print "int3:"
   112                              <1>   ; ; mov ax,cx
   113                              <1>   ; ; call write_number_word
   114                              <1> 
   115                              <1>   ; pop es
   116                              <1>   ; pop ds
   117                              <1>   ; pop bp
   118                              <1>   ; pop di
   119                              <1>   ; pop si
   120                              <1>   ; pop dx
   121                              <1>   ; pop cx
   122                              <1>   ; pop bx
   123                              <1>   ; pop ax
   124                              <1>   ; iret
   125                              <1> 
   126                              <1> int4:; int4: Signed overflow
   127 00000020 B004                <1>   mov al,4
   128 00000022 EB00                <1>   jmp int_msg
   129                              <1> int_msg:
   130 00000024 BFF401              <1>   mov di,500
   131                              <1>   ; xor di,di
   132                              <1>   ; mov ax,di
   133                              <1>   ; mov cx,8*72  
   134                              <1>   ; rep stosw
   135                              <1>   ; xor di,di
   136                              <1>   ; push ax
   137                              <1>   ; print "int: "
   138                              <1>   ; pop ax
   139 00000027 0430                <1>   add al,'0'
   140 00000029 E8FF00              <1>   call write_char
   141                              <1>   ; print "      "
   142                              <1>   
   143 0000002C F4                  <1>   hlt
   144                              <1> 
   145                              <1> boot:
   146 0000002D FA                  <1>   cli
   147 0000002E FC                  <1>   cld
   148 0000002F E8E600              <1>   call clear_green    
   149                              <1> 
   150                              <1>   ; init video      
   151 00000032 B005                <1>   mov al, 5
   152 00000034 E610                <1>   out 10h, al           ; select address 0x1c000 as green video page
   153                              <1>  
   154                              <1>   ; register interrupts
   155 00000036 31FF                <1>   xor di,di ; offset 0
   156 00000038 8EC7                <1>   mov es,di ; segment 0
   157                              <1>   register_interrupt int0
    64 0000003A B8[0600]            <2>  mov ax,%1
    65 0000003D AB                  <2>  stosw
    66 0000003E 8CC8                <2>  mov ax,cs
    67 00000040 AB                  <2>  stosw
   158                              <1>   register_interrupt int1
    64 00000041 B8[1700]            <2>  mov ax,%1
    65 00000044 AB                  <2>  stosw
    66 00000045 8CC8                <2>  mov ax,cs
    67 00000047 AB                  <2>  stosw
   159                              <1>   register_interrupt int2
    64 00000048 B8[1B00]            <2>  mov ax,%1
    65 0000004B AB                  <2>  stosw
    66 0000004C 8CC8                <2>  mov ax,cs
    67 0000004E AB                  <2>  stosw
   160                              <1>   register_interrupt int3
    64 0000004F B8[1F00]            <2>  mov ax,%1
    65 00000052 AB                  <2>  stosw
    66 00000053 8CC8                <2>  mov ax,cs
    67 00000055 AB                  <2>  stosw
   161                              <1>   register_interrupt int4
    64 00000056 B8[2000]            <2>  mov ax,%1
    65 00000059 AB                  <2>  stosw
    66 0000005A 8CC8                <2>  mov ax,cs
    67 0000005C AB                  <2>  stosw
   162                              <1> 
   163                              <1> 
   164                              <1>   ; init other hardware
   165 0000005D B000                <1>   mov al,0
   166 0000005F E63A                <1>   out 0x3a,al           ; keyboard \force state/
   167 00000061 E63A                <1>   out 0x3a,al           ; keyboard \force state/
   168 00000063 B0FF                <1>   mov al,0xFF
   169 00000065 E63A                <1>   out 0x3a,al           ; keyboard \reset/
   170 00000067 E63A                <1>   out 0x3a,al           ; keyboard \mode/
   171 00000069 B037                <1>   mov al,0x37
   172 0000006B E63A                <1>   out 0x3a,al           ; keyboard \set command
   173                              <1> 
   174 0000006D B8001C              <1>   mov ax,GREEN      
   175 00000070 8ED8                <1>   mov ds,ax                 ; GREEN video segment used for progress bar
   176 00000072 B83800              <1>   mov ax,DST                
   177 00000075 8EC0                <1>   mov es,ax                 ; DST segment used for storing data read from disk
   178 00000077 BF0000              <1>   mov di,0                  ;
   179 0000007A B200                <1>   mov dl,0                  ; track=0
   180 0000007C B601                <1>   mov dh,1                  ; sector=1
   181 0000007E B92800              <1>   mov cx,NUM_SECTORS        ; read 48h (72) sectors (36864 bytes)
   182 00000081 EB0B                <1>   jmp move_head
   183                              <1> 
   184                              <1> ; ───────────────────────────────────────────────────────────────────────────
   185                              <1> 
   186                              <1> next_sector:
   187 00000083 FEC6                <1>   inc dh                    ; sector++
   188 00000085 80FE0A              <1>   cmp dh,10
   189 00000088 7218                <1>   jb read_sector            ; if (dh<9) read_sector
   190 0000008A B601                <1>   mov dh,1
   191 0000008C FEC2                <1>   inc dl                    ; else track++ ; sector=1
   192                              <1> 
   193                              <1> move_head:
   194 0000008E 88D0                <1>   mov al,dl
   195 00000090 E60E                <1>   out 0Eh,al               ; set track number
   196 00000092 B018                <1>   mov al,18h     
   197 00000094 E608                <1>   out 8,al                 ; seek track, load head
   198 00000096 B000                <1>   mov al,0
   199 00000098 E61C                <1>   out 1Ch,al               ; set desired drive/side
   200 0000009A D40A                <1>   aam
   201                              <1> 
   202                              <1> head_moving:
   203 0000009C E408                <1>   in al,8
   204 0000009E A801                <1>   test al,1
   205 000000A0 75FA                <1>   jnz head_moving
   206                              <1> 
   207                              <1> read_sector:
   208 000000A2 88F0                <1>   mov al,dh
   209 000000A4 E60C                <1>   out 0Ch,al                ; sector number
   210 000000A6 B702                <1>   mov bh,2                  ; 00000010b
   211 000000A8 B396                <1>   mov bl,96h                ; 10010110b
   212 000000AA B400                <1>   mov ah,0
   213 000000AC B080                <1>   mov al,80h
   214 000000AE E608                <1>   out 8,al                  ; read sector
   215 000000B0 D40A<rep 4h>        <1>   times 4 aam               ; wait
   216                              <1> 
   217                              <1> check_status_1:
   218 000000B8 E408                <1>   in al,8                   ; read status
   219 000000BA D0F8                <1>   sar al,1                  ; status/=2
   220 000000BC 731F                <1>   jnb check_status_3
   221 000000BE 75F8                <1>   jnz check_status_1
   222                              <1> 
   223                              <1> wait_for_data:
   224 000000C0 E408                <1>   in al,8                   ; read status
   225 000000C2 20D8                <1>   and al,bl                 ; 96h
   226 000000C4 74FA                <1>   jz wait_for_data
   227                              <1> 
   228                              <1> store_byte_1:
   229 000000C6 E40E                <1>   in al,0Eh
   230 000000C8 AA                  <1>   stosb
   231                              <1> 
   232                              <1> check_status_2:
   233 000000C9 E408                <1>   in al,8                   ; read status
   234 000000CB 48                  <1>   dec ax                    ; status--
   235 000000CC 74FB                <1>   jz check_status_2         ; if (status==0) repeat
   236 000000CE 38F8                <1>   cmp al, bh                ; bh=2
   237 000000D0 750B                <1>   jnz check_status_3        ; if (status==1) 
   238                              <1> 
   239                              <1> store_byte_2:
   240 000000D2 E40E                <1>   in al,0Eh  
   241 000000D4 AA                  <1>   stosb
   242                              <1> 
   243                              <1> check_status_4:
   244 000000D5 E408                <1>   in al,8                   ; read status
   245 000000D7 38F8                <1>   cmp al, bh                ; bh=2
   246 000000D9 74F7                <1>   jz store_byte_2           ; if (status==2) repeat
   247 000000DB EBEC                <1>   jmp check_status_2        ; else: was jmp SI
   248                              <1> 
   249                              <1> ; ───────────────────────────────────────────────────────────────────────────
   250                              <1> 
   251                              <1> check_status_3:
   252 000000DD E408                <1>   in al, 8                  ; read status
   253 000000DF A81C                <1>   test al, 1Ch              ; 00011100
   254 000000E1 7402                <1>   jz while_sectors
   255 000000E3 EBBD                <1>   jmp read_sector
   256                              <1> 
   257                              <1> ; ───────────────────────────────────────────────────────────────────────────
   258                              <1> 
   259                              <1> while_sectors:
   260 000000E5 E80F00              <1>   call progress_bar
   261 000000E8 E299                <1>   loop next_sector
   262                              <1> 
   263                              <1> done_reading:
   264 000000EA 0E                  <1>   push cs
   265 000000EB 17                  <1>   pop ss
   266 000000EC BC0000              <1>   mov sp,0
   267 000000EF E82600              <1>   call clear_green
   268 000000F2 0E                  <1>   push cs
   269 000000F3 1F                  <1>   pop ds
   270 000000F4 E96402              <1>   jmp setup
   271                              <1> 
   272                              <1> ; ───────────────────────────────────────────────────────────────────────────
   273                              <1> 
   274                              <1> progress_bar:
   275                              <1>   ;dit kan veel korter als NUM_SECTORS een vaste waarde heeft.
   276 000000F7 52                  <1>   push dx
   277 000000F8 53                  <1>   push bx
   278 000000F9 31D2                <1>   xor dx,dx
   279 000000FB B81E00              <1>   mov ax,BAR_WIDTH
   280 000000FE BB2800              <1>   mov bx,NUM_SECTORS    
   281 00000101 F7E1                <1>   mul cx
   282 00000103 F7F3                <1>   div bx
   283 00000105 5B                  <1>   pop bx
   284 00000106 5A                  <1>   pop dx
   285 00000107 89C6                <1>   mov si,ax                 ; ax is nu 0..BAR_WIDTH
   286 00000109 D1E6                <1>   shl si,1                  ; *=2
   287 0000010B D1E6                <1>   shl si,1                  ; *=2  
   288 0000010D BDEC1C              <1>   mov bp,CENTER+BAR_WIDTH*2
   289 00000110 29F5                <1>   sub bp,si
   290 00000112 3EC64600FF          <1>   mov byte [ds:bp],-1
   291 00000117 C3                  <1>   ret
   292                              <1> 
   293                              <1> ; clear_red:
   294                              <1> ;   mov ax,RED
   295                              <1> ;   call clear_channel
   296                              <1> ;   ret
   297                              <1> 
   298                              <1> clear_green:
   299 00000118 B8001C              <1>   mov ax,GREEN
   300 0000011B E80100              <1>   call clear_channel
   301 0000011E C3                  <1>   ret
   302                              <1> 
   303                              <1> ; clear_blue:
   304                              <1> ;   mov ax,BLUE
   305                              <1> ;   call clear_channel
   306                              <1> ;   ret
   307                              <1> 
   308                              <1> ; clear_screen:
   309                              <1> ;   call clear_red
   310                              <1> ;   call clear_green
   311                              <1> ;   call clear_blue
   312                              <1> ;   ret
   313                              <1> 
   314                              <1> clear_channel:
   315 0000011F 8EC0                <1>   mov es,ax
   316 00000121 B9201C              <1>   mov cx,COLS*ROWS*2
   317 00000124 31FF                <1>   xor di,di
   318 00000126 31C0                <1>   xor ax,ax
   319 00000128 F3AB                <1>   rep stosw         ; clear screen
   320 0000012A C3                  <1>   ret
   321                              <1> 
   322                              <1> ; ───────────────────────────────────────────────────────────────────────────
   323                              <1> 
   324                              <1> ; write_char:   ; ds=FONT, es=GREEN, al=charcode
   325                              <1> ;   ; zou ik hier ds moeten pushen? omdat je er vanuit wilt gaan dat DS en CS altijd gelijk zijn
   326                              <1> ;   ; je zou de huidige kleur op een adres willen bewaren. nu doet ie alleen maar groen.
   327                              <1> ;   ; deze functie zou ook korter/lichter kunnen/moeten. wellicht twee functies maken. een slimme en een domme snelle..
   328                              <1> 
   329                              <1> ;   push ds
   330                              <1> ;   push es
   331                              <1> ;   push ax
   332                              <1> ;   push bx
   333                              <1> ;   push cx
   334                              <1> 
   335                              <1> ;   push ax
   336                              <1> ;   mov ax,GREEN
   337                              <1> ;   mov es,ax
   338                              <1> ;   mov ax,FONT
   339                              <1> ;   mov ds,ax
   340                              <1> ;   pop ax
   341                              <1> 
   342                              <1> ;   ; mov ax,65*8
   343                              <1> ;   ; mov al,'x'
   344                              <1> ;   mov ah,8
   345                              <1> ;   mul ah        ; ax=al*ah
   346                              <1> 
   347                              <1> ;   mov si,ax
   348                              <1> ;   movsw
   349                              <1> ;   movsw
   350                              <1> ;   add di,0x11c
   351                              <1> ;   movsw
   352                              <1> ;   movsw
   353                              <1> ;   mov bx,288
   354                              <1> ;   sub di,bx
   355                              <1>   
   356                              <1> ;   ; pop ax
   357                              <1> ;   ; pop es
   358                              <1> ;   ; pop ds
   359                              <1> ;   ; ret
   360                              <1> 
   361                              <1> 
   362                              <1> ;   ; row snap
   363                              <1> ;   xor dx,dx
   364                              <1> ;   mov ax,di
   365                              <1> ;   div bx
   366                              <1> ;   cmp dx,0
   367                              <1> ;   jne .return
   368                              <1> ;   add di,bx
   369                              <1> 
   370                              <1> 
   371                              <1> ;   ; wrap to top
   372                              <1> ;   cmp di,14400   ; dit later oplossen met cursor positie
   373                              <1> ;   jb .return
   374                              <1> ;   ; xor di,di      ; move to left top. change later to scroll
   375                              <1> 
   376                              <1> ;   ; TODO: call scroll_down
   377                              <1> ;   ; std
   378                              <1> ;   ; push di
   379                              <1> ;   ; push cx
   380                              <1> ;   ; mov cx,4*72*24
   381                              <1> ;   ; mov ax,0
   382                              <1> ;   ; rep stosw
   383                              <1> ;   ; pop cx
   384                              <1> ;   ; pop di
   385                              <1> ;   ; cld
   386                              <1> 
   387                              <1> ;   ; DONE: clear last line
   388                              <1> ;   sub di,bx
   389                              <1> ;   sub di,bx
   390                              <1> ;   push di
   391                              <1> ;   push cx
   392                              <1> ;   mov cx,COLS*ROWS*2
   393                              <1> ;   xor ax,ax
   394                              <1> ;   rep stosw         ; clear screen
   395                              <1> ;   pop cx
   396                              <1> ;   pop di
   397                              <1> 
   398                              <1> ; .return
   399                              <1> ;   push bx
   400                              <1> ;   push cx
   401                              <1> ;   pop ax
   402                              <1> ;   pop es
   403                              <1> ;   pop ds
   404                              <1> ;   ret
   405                              <1> 
   406                              <1> ; ; ───────────────────────────────────────────────────────────────────────────
   407                              <1> 
   408                              <1> write_char:   ; ds=FONT, es=GREEN, al=charcode
   409 0000012B 52                  <1>   push dx
   410 0000012C 1E                  <1>   push ds
   411 0000012D 06                  <1>   push es
   412 0000012E 50                  <1>   push ax
   413 0000012F 53                  <1>   push bx
   414 00000130 31D2                <1>   xor dx,dx
   415 00000132 50                  <1>   push ax  ; voor character pop
   416 00000133 B8001C              <1>   mov ax,GREEN
   417 00000136 8EC0                <1>   mov es,ax
   418 00000138 B800FF              <1>   mov ax,FONT
   419 0000013B 8ED8                <1>   mov ds,ax
   420 0000013D 58                  <1>   pop ax
   421 0000013E B408                <1>   mov ah,8
   422 00000140 F6E4                <1>   mul ah        ; al*=ah
   423 00000142 89C6                <1>   mov si,ax  
   424                              <1> 
   425 00000144 A5                  <1>   movsw
   426 00000145 A5                  <1>   movsw
   427 00000146 81C71C01            <1>   add di,0x11c
   428 0000014A A5                  <1>   movsw
   429 0000014B A5                  <1>   movsw
   430 0000014C 81EF2001            <1>   sub di,0x120
   431                              <1> 
   432                              <1> 
   433                              <1>   ; cmp di,14400   ; dit later oplossen met cursor positie
   434                              <1>   ; jb .return
   435                              <1>   ; xor di,di      ; move to left top. change later to scroll
   436                              <1> 
   437                              <1>   ; row snap
   438 00000150 BB2001              <1>   mov bx,288   ; /////////// dit gaf problemen waarsch omdat bx niet gepushed werd
   439 00000153 31D2                <1>   xor dx,dx
   440 00000155 89F8                <1>   mov ax,di
   441 00000157 F7F3                <1>   div bx       ; ///dit ook als BX 0 is
   442 00000159 83FA00              <1>   cmp dx,0
   443 0000015C 7502                <1>   jne .return
   444 0000015E 01DF                <1>   add di,bx
   445                              <1> 
   446                              <1> .return
   447 00000160 5B                  <1>   pop bx
   448 00000161 58                  <1>   pop ax
   449 00000162 07                  <1>   pop es
   450 00000163 1F                  <1>   pop ds
   451 00000164 5A                  <1>   pop dx
   452 00000165 C3                  <1>   ret
   453                              <1> 
   454                              <1> write_string:
   455 00000166 2E8A07              <1>   mov al,[cs:bx]
   456 00000169 43                  <1>   inc bx
   457 0000016A 08C0                <1>   or al,al
   458 0000016C 7405                <1>   jz .return
   459 0000016E E8BAFF              <1>   call write_char
   460 00000171 EBF3                <1>   jmp short write_string
   461                              <1> .return
   462 00000173 C3                  <1>   ret
   463                              <1> 
   464                              <1> ; ───────────────────────────────────────────────────────────────────────────
   465                              <1> 
   466                              <1> write_binary_byte:    ; input AL
   467 00000174 50                  <1>   push ax
   468 00000175 88C3                <1>   mov bl, al          ; Kopieer AL naar BL (we werken op BL)
   469 00000177 B90800              <1>   mov cx, 8           ; We gaan 8 bits schrijven
   470                              <1> .lp:
   471 0000017A D0C3                <1>   rol bl, 1           ; Rotate BL naar links (hoogste bit komt in Carry Flag)
   472 0000017C B80000              <1>   mov ax, 0           ; AH leegmaken
   473 0000017F 1430                <1>   adc al, 48          ; Als Carry Flag 1 is, wordt '1', anders '0'  
   474 00000181 51                  <1>   push cx             ; CX opslaan
   475 00000182 E8A6FF              <1>   call write_char      ; Schrijf het karakter naar het scherm
   476 00000185 59                  <1>   pop cx              ; CX herstellen
   477 00000186 E2F2                <1>   loop .lp            ; Loop voor alle 8 bits
   478 00000188 58                  <1>   pop ax
   479 00000189 C3                  <1>   ret
   480                              <1> 
   481                              <1> ; ───────────────────────────────────────────────────────────────────────────
   482                              <1> 
   483                              <1> write_binary_word:    ; input AX
   484 0000018A 50                  <1>   push ax
   485 0000018B 52                  <1>   push dx            ; DX opslaan (we gebruiken het later)
   486 0000018C 89C2                <1>   mov dx, ax         ; Kopieer AX naar DX (we werken op DX)
   487 0000018E B91000              <1>   mov cx, 16         ; We gaan 16 bits schrijven
   488                              <1> .lp:
   489 00000191 D1C2                <1>   rol dx, 1          ; Rotate DX naar links (hoogste bit komt in Carry Flag)
   490 00000193 B80000              <1>   mov ax, 0          ; AH leegmaken
   491 00000196 1430                <1>   adc al, 48         ; Als Carry Flag 1 is, wordt '1', anders '0'  
   492 00000198 51                  <1>   push cx            ; CX opslaan
   493 00000199 E88FFF              <1>   call write_char    ; Schrijf het karakter naar het scherm
   494 0000019C 59                  <1>   pop cx             ; CX herstellen
   495 0000019D E2F2                <1>   loop .lp           ; Loop voor alle 16 bits
   496 0000019F 5A                  <1>   pop dx             ; DX herstellen
   497 000001A0 58                  <1>   pop ax
   498 000001A1 C3                  <1>   ret
   499                              <1> 
   500                              <1> 
   501                              <1> ; ───────────────────────────────────────────────────────────────────────────
   502                              <1> 
   503                              <1> write_number_word:
   504 000001A2 50                  <1>     push ax
   505 000001A3 52                  <1>     push dx
   506 000001A4 31D2                <1>     xor dx,dx
   507 000001A6 52                  <1>     push dx ;high byte is zero
   508 000001A7 31D2                <1> .clp xor dx,dx
   509 000001A9 2EF736[C501]        <1>     cs div word [.base]
   510 000001AE 92                  <1>     xchg ax,dx
   511 000001AF 05300E              <1>     add ax,0xe30
   512 000001B2 50                  <1>     push ax
   513 000001B3 92                  <1>     xchg ax,dx
   514 000001B4 09C0                <1>     or ax,ax
   515 000001B6 75EF                <1>     jnz .clp
   516 000001B8 58                  <1> .dlp pop ax
   517 000001B9 08E4                <1>     or ah,ah
   518 000001BB 7405                <1>     jz .done
   519 000001BD E86BFF              <1>     call write_char
   520 000001C0 EBF6                <1>     jmp short .dlp
   521 000001C2 5A                  <1> .done pop dx
   522 000001C3 58                  <1>     pop ax
   523 000001C4 C3                  <1>     ret
   524 000001C5 0A00                <1> .base dw 10
   525                              <1> 
   526                              <1> ; ───────────────────────────────────────────────────────────────────────────
   527                              <1> 
   528                              <1> write_signed_number_word:  
   529                              <1>     ; push ax
   530                              <1>     ; push bx
   531                              <1>     ; push cx
   532                              <1>     ; push dx  
   533                              <1>     
   534 000001C7 09C0                <1>     or ax,ax
   535 000001C9 790A                <1>     jns .write_return        ; if >0 write and return
   536 000001CB 50                  <1>     push ax
   537 000001CC B82D00              <1>     mov ax,'-'
   538 000001CF E859FF              <1>     call write_char
   539 000001D2 58                  <1>     pop ax
   540 000001D3 F7D8                <1>     neg ax                   ; destroys ax when negative
   541                              <1> .write_return:
   542 000001D5 E8CAFF              <1>     call write_number_word
   543                              <1>     
   544                              <1>     ; push dx
   545                              <1>     ; push cx
   546                              <1>     ; push bx
   547                              <1>     ; push ax
   548                              <1> 
   549 000001D8 C3                  <1>     ret
   550                              <1> 
   551                              <1> ; ───────────────────────────────────────────────────────────────────────────
   552                              <1> 
   553                              <1> check_keys:
   554 000001D9 E43A                <1>   in al,0x3a        ; get keyboard status
   555 000001DB 88C4                <1>   mov ah,al
   556 000001DD 2408                <1>   and al,0b00001000 ; keep only 1 for 'ctrl'
   557 000001DF 2EA2[0500]          <1>   mov [cs:key.ctrl],al
   558 000001E3 F6C402              <1>   test ah,2         ; keypressed flag is in ah, not in al anymore
   559 000001E6 7410                <1>   jz .return
   560 000001E8 E438                <1>   in al,0x38        ; get data byte from keyboard  
   561 000001EA 2EA2[0400]          <1>   mov [cs:key.code],al
   562 000001EE B037                <1>   mov al,0x37
   563 000001F0 E63A                <1>   out 0x3a,al       ; drop key?  
   564 000001F2 0C01                <1>   or al,1           ; set zero flag to false to indicate a keypress
   565 000001F4 2EA1[0400]          <1>   mov ax,[cs:key]   ; ctrl status in ah, keycode in al, ZF low means a key was pressed
   566 000001F8 C3                  <1> .return ret
   567                              <1> 
   568                              <1> 
   569                              <1> 
   570                              <1> ;fillscreen:  ; al=lower 3 bits = Color RGBWCMYK - 4th bit = method???? - support for mask?? - or dither pattern??
   571                              <1> ;   ret
   572                              <1> 
   573                              <1> ;fillarea (minx,miny,maxx,maxy) color, pattern
   574                              <1> 
   575                              <1> ;rect (x,y,width,height) stroke color, strokeweight, fill
   576                              <1> ; much faster and simpler on the grid than off the grid
   577                              <1> ; zou je de randen buiten het grid vooraf of naderhand kunnen doen. en het deel op het grid met de snelle methode
   578                              <1> 
   579                              <1> 
   580                              <1> ; wide font by stretching the font horizontally using bitshift
   581                              <1> 
   582                              <1> 
   583                              <1> ; fill_white:
   584                              <1> ;   mov ax,0xffff
   585                              <1> ;   call fill_red
   586                              <1> ;   call fill_green
   587                              <1> ;   call fill_blue
   588                              <1> ;   ret
   589                              <1> 
   590                              <1> ; fill_pink:
   591                              <1> ;   mov ax,0xffff
   592                              <1> ;   call fill_red
   593                              <1> ;   mov ah,0b01010101
   594                              <1> ;   mov al,0b10101010
   595                              <1> ;   call fill_green
   596                              <1> ;   call fill_blue
   597                              <1> ;   ret
   598                              <1> 
   599                              <1> ; fill_pink2:
   600                              <1> ;   mov ax,0xffff
   601                              <1> ;   call fill_red
   602                              <1> ;   mov ah,0b11001100
   603                              <1> ;   mov al,0b00110011
   604                              <1> ;   call fill_green
   605                              <1> ;   call fill_blue
   606                              <1> ;   ret
   607                              <1> 
   608                              <1> ; fill_pink3:
   609                              <1> ;   mov ax,0xffff
   610                              <1> ;   call fill_red
   611                              <1> ;   mov ah,0b00010001
   612                              <1> ;   mov al,0b01000100
   613                              <1> ;   call fill_green
   614                              <1> ;   call fill_blue
   615                              <1> ;   ret
   616                              <1> 
   617                              <1> ; fill_pink4:
   618                              <1> ;   mov ax,0xffff
   619                              <1> ;   call fill_red
   620                              <1> ;   mov ah,0b11110111
   621                              <1> ;   mov al,0b01111111
   622                              <1> ;   call fill_green
   623                              <1> ;   call fill_blue
   624                              <1> ;   ret
   625                              <1> 
   626                              <1> ; fill_red:
   627                              <1> ;   mov bx,RED
   628                              <1> ;   call fill_channel
   629                              <1> ;   ret
   630                              <1> ; fill_green:
   631                              <1> ;   mov bx,GREEN
   632                              <1> ;   call fill_channel
   633                              <1> ;   ret
   634                              <1> ; fill_blue:
   635                              <1> ;   mov bx,BLUE
   636                              <1> ;   call fill_channel
   637                              <1> ;   ret
   638                              <1> 
   639                              <1> ; fill_channel: ;ax=pattern
   640                              <1> ;   mov es,bx
   641                              <1> ;   mov cx,COLS*ROWS*2
   642                              <1> ;   xor di,di
   643                              <1> ;   rep stosw
   644                              <1> ;   ret
   645                              <1> 
   646                              <1> ; ───────────────────────────────────────────────────────────────────────────
   647                              <1> 
   648                              <1> ; clear_area: ; ax=channel, bx=area, di=start pos
   649                              <1> ;   push bx
   650                              <1> ;   push di
   651                              <1> ;   mov es,ax
   652                              <1> ;   xor cx,cx
   653                              <1> ;   mov cl,bh        ; rows (bl)
   654                              <1> ; .rows_loop:
   655                              <1> ;   push cx
   656                              <1> ;   xor cx,cx
   657                              <1> ;   mov cl,bl        ; cols (bh)
   658                              <1> ; .cols_loop:
   659                              <1> ;   mov ax,0
   660                              <1> ;   stosw
   661                              <1> ;   stosw
   662                              <1> ;   loop .cols_loop
   663                              <1> ;   add di,COLS*4    ; one row down
   664                              <1> ;   mov ah,0
   665                              <1> ;   mov al,bl
   666                              <1> ;   times 2 shl ax,1
   667                              <1> ;   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   668                              <1> ;   pop cx
   669                              <1> ;   loop .rows_loop
   670                              <1> ;   pop di
   671                              <1> ;   pop bx
   672                              <1> ;   ret
   673                              <1> 
   674                              <1> ; ───────────────────────────────────────────────────────────────────────────
   675                              <1> 
   676                              <1> ; fill_rect_black: 
   677                              <1> ;   mov ax,RED
   678                              <1> ;   call clear_area
   679                              <1> ;   mov ax,GREEN
   680                              <1> ;   call clear_area
   681                              <1> ;   mov ax,BLUE
   682                              <1> ;   call clear_area
   683                              <1> ;   ret
   684                              <1> 
   685                              <1> ; ───────────────────────────────────────────────────────────────────────────
   686                              <1> 
   687                              <1> draw_spr:
   688 000001F9 8B1C                <1>   mov bx,[si]
   689 000001FB 46<rep 2h>          <1>   times 2 inc si
   690                              <1> draw_pic:
   691 000001FD B800F0              <1>   mov ax, RED
   692 00000200 E80D00              <1>   call draw_channel
   693 00000203 B8001C              <1>   mov ax, GREEN
   694 00000206 E80700              <1>   call draw_channel
   695 00000209 B800F4              <1>   mov ax, BLUE
   696 0000020C E80100              <1>   call draw_channel
   697 0000020F C3                  <1>   ret
   698                              <1> 
   699                              <1> ; ───────────────────────────────────────────────────────────────────────────
   700                              <1> 
   701                              <1> draw_channel:
   702 00000210 57                  <1>   push di
   703 00000211 8EC0                <1>   mov es,ax
   704 00000213 31C9                <1>   xor cx,cx
   705 00000215 88F9                <1>   mov cl,bh        ; rows (bl)
   706                              <1> .rows_loop:
   707 00000217 51                  <1>   push cx
   708 00000218 31C9                <1>   xor cx,cx
   709 0000021A 88D9                <1>   mov cl,bl        ; cols (bh)
   710                              <1> .cols_loop:
   711 0000021C A5                  <1>   movsw
   712 0000021D A5                  <1>   movsw
   713 0000021E E2FC                <1>   loop .cols_loop
   714 00000220 81C72001            <1>   add di,COLS*4    ; one row down
   715 00000224 B400                <1>   mov ah,0
   716 00000226 88D8                <1>   mov al,bl
   717 00000228 D1E0<rep 2h>        <1>   times 2 shl ax,1
   718 0000022C 29C7                <1>   sub di,ax       ; di-=4*bh   ; bh cols to the left on the new row
   719 0000022E 59                  <1>   pop cx
   720 0000022F E2E6                <1>   loop .rows_loop
   721 00000231 5F                  <1>   pop di
   722 00000232 C3                  <1>   ret
   723                              <1> 
   724                              <1> ; ───────────────────────────────────────────────────────────────────────────
   725                              <1> 
   726                              <1> calc_di_from_bx:  ; input bl,bh [0,0,71,49]
   727 00000233 B89000              <1>   mov ax,144      ; 2*72 cols
   728 00000236 F6E7                <1>   mul bh          ; bh*=144 resultaat in AX
   729 00000238 D1E0                <1>   shl ax,1        ; verdubbel AX
   730 0000023A 89C7                <1>   mov di,ax       ; di=ax (=bh*288)
   731 0000023C D0E3                <1>   shl bl,1        ; bl*=2
   732 0000023E D0E3                <1>   shl bl,1        ; bl*=2
   733 00000240 B700                <1>   mov bh,0
   734 00000242 01DF                <1>   add di,bx       ; di+=bl
   735 00000244 C3                  <1>   ret
   736                              <1> 
   737                              <1> ; ───────────────────────────────────────────────────────────────────────────
   738                              <1> 
   739                              <1> new_line:
   740 00000245 50                  <1>   push ax
   741 00000246 53                  <1>   push bx
   742 00000247 52                  <1>   push dx
   743 00000248 BB2001              <1>   mov bx,288
   744 0000024B 31D2                <1>   xor dx,dx
   745 0000024D 89F8                <1>   mov ax,di
   746 0000024F F7F3                <1>   div bx
   747 00000251 31D2                <1>   xor dx,dx
   748 00000253 BB2001              <1>   mov bx,288
   749 00000256 40                  <1>   inc ax
   750 00000257 F7E3                <1>   mul bx
   751 00000259 052001              <1>   add ax,288
   752 0000025C 89C7                <1>   mov di,ax
   753 0000025E 5A                  <1>   pop dx
   754 0000025F 5B                  <1>   pop bx
   755 00000260 58                  <1>   pop ax
   756 00000261 C3                  <1>   ret
   757                              <1> 
   758                              <1> 
   759                              <1> ; calc_di_from_cursor:  ; input cursor, output di
   760                              <1> ;   mov ax,[cursor] 
   761                              <1> ;   sub ax,0x0101   ; cursor is 1 based
   762                              <1> ;   xchg ax,bx      ; bx=ax
   763                              <1> ;   mov ax,144      ; 2*72 cols
   764                              <1> ;   mul bh          ; bh*=144 resultaat in AX
   765                              <1> ;   shl ax,1        ; verdubbel AX
   766                              <1> ;   shl ax,1        ; verdubbel AX
   767                              <1> ;   mov di,ax       ; di=ax (=bh*288)
   768                              <1> ;   shl bl,1        ; bl*=2
   769                              <1> ;   shl bl,1        ; bl*=2
   770                              <1> ;   mov bh,0
   771                              <1> ;   add di,bx       ; di+=bl
   772                              <1> ;   ret
   773                              <1> 
   774                              <1> 
   775                              <1> 
   776                              <1> 
   777                              <1> ; als je cursor gebruikt is dit missch niet nodig.
   778                              <1> ; row_snap:  ; this code detects if DI is in between rows. When DI goes to the next half row it converts it to a whole row.
   779                              <1> ;   push ax
   780                              <1> ;   push bx
   781                              <1> ;   push dx
   782                              <1> ;   mov bx,288
   783                              <1> ;   mov ax,di
   784                              <1> ;   cwd ; xor dx,dx
   785                              <1> ;   div bx
   786                              <1> ;   jnp .done  ; if ax%288==0 
   787                              <1> ;   add di,bx
   788                              <1> ;   .done
   789                              <1> ;   ; add di,dx
   790                              <1> ;   pop dx
   791                              <1> ;   pop bx
   792                              <1> ;   pop ax
   793                              <1> ;   ret
   794                              <1> 
   795                              <1> 
   796                              <1> ; ; ───────────────────────────────────────────────────────────────────────────
   797                              <1> 
   798                              <1> ; calc_di_from_cursor_index:  ; index is cursor index from 0 tot 72*25
   799                              <1> ;   push ax
   800                              <1> ;   push bx
   801                              <1> ;   push dx
   802                              <1> ;   xor dx,dx
   803                              <1> ;   mov ax,[cursor.index]
   804                              <1> ;   mov bx,72
   805                              <1> ;   div bx       ; ax=rows
   806                              <1> ;   push dx      ; dx=cols
   807                              <1> ;   xor dx,dx    ; clear dx for multiplication
   808                              <1> ;   mov bx,576
   809                              <1> ;   mul bx       ; ax contains DI position for row
   810                              <1> ;   mov di,ax
   811                              <1> ;   pop ax       ; ax now contains cols
   812                              <1> ;   shl ax,1     ; *=2
   813                              <1> ;   shl ax,1     ; *=2
   814                              <1> ;   add di,ax
   815                              <1> ;   pop dx
   816                              <1> ;   pop bx
   817                              <1> ;   pop ax
   818                              <1> ;   ret
   819                              <1> 
   820                              <1> ; ───────────────────────────────────────────────────────────────────────────
   821                              <1> 
   822                              <1> 
   823                              <1> ; set_cursor:
   824                              <1> ; cursor_next_char
   825                              <1> 
   826                              <1> 
   827                              <1> 
   828                              <1> ; times (512)-($-$$) db 0             ; doesn't fit in the bootsector anymore
   829                              <1> 
     2                                  %include "atan.asm"
     1                              <1> atan2: ; input bx=y, ax=x
     2 00000262 83F800              <1>   cmp ax,0
     3 00000265 750D                <1>   jnz .x_not_0
     4                              <1> .x_eq_0:
     5 00000267 83FB00              <1>   cmp bx,0
     6 0000026A 7C04                <1>   jl .y_lte_0
     7                              <1> .y_gt_0:
     8 0000026C B85A00              <1>   mov ax,90
     9 0000026F C3                  <1>   ret
    10                              <1> .y_lte_0:
    11 00000270 B8A6FF              <1>   mov ax,-90
    12 00000273 C3                  <1>   ret
    13                              <1> .x_not_0:
    14 00000274 50                  <1>   push ax
    15 00000275 50                  <1>   push ax   ; keep a copy of x
    16 00000276 99                  <1>   cwd       ; dx=0
    17 00000277 B96F00              <1>   mov cx,111
    18 0000027A F7E9                <1>   imul cx
    19 0000027C 59                  <1>   pop cx;   ; restore x
    20 0000027D 99                  <1>   cwd
    21 0000027E F7F9                <1>   idiv cx   ; ax/=x
    22 00000280 99                  <1>   cwd
    23 00000281 E81400              <1>   call atan
    24 00000284 59                  <1>   pop cx;   ; restore x
    25                              <1> 
    26 00000285 83F900              <1>   cmp cx,0
    27 00000288 7C01                <1>   jl .x_lt_0
    28 0000028A C3                  <1>   ret
    29                              <1> 
    30                              <1> .x_lt_0:
    31 0000028B 83FB00              <1>   cmp bx,0
    32 0000028E 7D04                <1>   jge .y_gte_0
    33 00000290 2DB400              <1>   sub ax,180
    34 00000293 C3                  <1>   ret
    35                              <1> 
    36                              <1> .y_gte_0:
    37 00000294 05B400              <1>   add ax,180
    38 00000297 C3                  <1>   ret
    39                              <1> 
    40                              <1> ; ───────────────────────────────────────────────────────────────────────────
    41                              <1> 
    42                              <1> 
    43                              <1> atan: ; cx=z, return value in ax, bx destroyed, cx destroyed, dx destroyed
    44 00000298 89C1                <1>   mov cx,ax           ; z
    45 0000029A 99                  <1>   cwd
    46                              <1> 
    47 0000029B 83F96F              <1>   cmp cx,111
    48 0000029E 7F29                <1>   jg .if_z_gt_scale   ; if (z>111)
    49                              <1> 
    50 000002A0 83F991              <1>   cmp cx,-111         ; if (z<-111) 
    51 000002A3 7C34                <1>   jl .if_z_lt_minus_scale
    52                              <1> 
    53 000002A5 99                  <1>   cwd
    54 000002A6 F7E8                <1>   imul ax             ; ax *= ax  (z*z)
    55 000002A8 BB4D01              <1>   mov bx,333     
    56 000002AB F7FB                <1>   idiv bx             ; ax /= 333   Taylor-benadering
    57 000002AD 99                  <1>   cwd
    58 000002AE 89C3                <1>   mov bx,ax
    59 000002B0 B86F00              <1>   mov ax,111
    60 000002B3 29D8                <1>   sub ax,bx           ; ax-=111  
    61 000002B5 BBB400              <1>   mov bx,180
    62 000002B8 F7EB                <1>   imul bx             ; ax*=180 
    63 000002BA F7E9                <1>   imul cx             ; ax*=z
    64 000002BC BB6F00              <1>   mov bx,111
    65 000002BF F7FB                <1>   idiv bx             ; ax/=111
    66 000002C1 BB3A01              <1>   mov bx,314
    67 000002C4 99                  <1>   cwd
    68 000002C5 F7FB                <1>   idiv bx             ; ax/=314
    69 000002C7 99                  <1>   cwd
    70 000002C8 C3                  <1>   ret
    71                              <1> 
    72                              <1> .if_z_gt_scale:
    73 000002C9 B82130              <1>   mov ax,12321        ; 12321 = 111*111 (squared scale)
    74 000002CC F7F9                <1>   idiv cx             ; ax/=z
    75 000002CE E8C7FF              <1>   call atan           ; recursion
    76 000002D1 89C3                <1>   mov bx,ax
    77 000002D3 B85A00              <1>   mov ax,90
    78 000002D6 29D8                <1>   sub ax,bx
    79 000002D8 C3                  <1>   ret
    80                              <1> 
    81                              <1> .if_z_lt_minus_scale:
    82 000002D9 B82130              <1>   mov ax,12321        ; 12321 = 111*111 (squared scale)
    83 000002DC F7F9                <1>   idiv cx             ; ax/=z
    84 000002DE E8B7FF              <1>   call atan           ; recursion
    85 000002E1 89C3                <1>   mov bx,ax
    86 000002E3 B8A6FF              <1>   mov ax,-90
    87 000002E6 29D8                <1>   sub ax,bx
    88 000002E8 C3                  <1>   ret
    89                              <1> 
    90                              <1> 
    91                              <1> 
    92                              <1> 
    93                              <1> %macro _atan2 2
    94                              <1>   mov ax,%1
    95                              <1>   mov bx,%2
    96                              <1>   call __atan2
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> __atan2:
   100 000002E9 50                  <1>   push ax
   101 000002EA 53                  <1>   push bx
   102                              <1>   print "atan2(x="
    48 000002EB 50                  <2>  push ax
    49 000002EC 53                  <2>  push bx
    50 000002ED 51                  <2>  push cx
    51 000002EE 52                  <2>  push dx
    52 000002EF EB09                <2>  jmp %%endstr
    53 000002F1 6174616E3228783D00  <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 000002FA BB[F102]            <2>  mov bx,%%str
    56 000002FD E866FE              <2>  call write_string
    57 00000300 5A                  <2>  pop dx
    58 00000301 59                  <2>  pop cx
    59 00000302 5B                  <2>  pop bx
    60 00000303 58                  <2>  pop ax
   103 00000304 E8C0FE              <1>   call write_signed_number_word
   104                              <1>   print ",y="
    48 00000307 50                  <2>  push ax
    49 00000308 53                  <2>  push bx
    50 00000309 51                  <2>  push cx
    51 0000030A 52                  <2>  push dx
    52 0000030B EB04                <2>  jmp %%endstr
    53 0000030D 2C793D00            <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 00000311 BB[0D03]            <2>  mov bx,%%str
    56 00000314 E84FFE              <2>  call write_string
    57 00000317 5A                  <2>  pop dx
    58 00000318 59                  <2>  pop cx
    59 00000319 5B                  <2>  pop bx
    60 0000031A 58                  <2>  pop ax
   105 0000031B 58                  <1>   pop ax
   106 0000031C 53                  <1>   push bx
   107 0000031D E8A7FE              <1>   call write_signed_number_word
   108                              <1>   print ")="
    48 00000320 50                  <2>  push ax
    49 00000321 53                  <2>  push bx
    50 00000322 51                  <2>  push cx
    51 00000323 52                  <2>  push dx
    52 00000324 EB03                <2>  jmp %%endstr
    53 00000326 293D00              <2>  %%str: db %1,0
    54                              <2>  %%endstr:
    55 00000329 BB[2603]            <2>  mov bx,%%str
    56 0000032C E837FE              <2>  call write_string
    57 0000032F 5A                  <2>  pop dx
    58 00000330 59                  <2>  pop cx
    59 00000331 5B                  <2>  pop bx
    60 00000332 58                  <2>  pop ax
   109 00000333 5B                  <1>   pop bx
   110 00000334 58                  <1>   pop ax
   111 00000335 E82AFF              <1>   call atan2
   112 00000338 E88CFE              <1>   call write_signed_number_word
   113 0000033B B020                <1>   mov al,' '
   114 0000033D E8EBFD              <1>   call write_char
   115 00000340 E802FF              <1>   call new_line
   116 00000343 C3                  <1>   ret
   117                              <1> 
   118                              <1> 
     3                                  
     4                                  ship:
     5                                   .pos:
     6 00000344 0090                     .pos.x: dw 73728/2
     7 00000346 D06B                     .pos.y: dw 51200/2 + 2000
     8                                   .vel: 
     9 00000348 F6FF                     .vel.x: dw -10
    10 0000034A 0000                     .vel.y: dw 0
    11 0000034C 0000                     .vel.flags: dw 0
    12                                   .acc:
    13 0000034E 0000                     .acc.x: dw 0
    14 00000350 0000                     .acc.y: dw 0
    15                                   .forces:
    16 00000352 0000                     .forces.x: dw 0
    17 00000354 0000                     .forces.y: dw 0
    18 00000356 0000                     .angle: dw 0
    19 00000358 0000                     .prev_di: dw 0
    20                                  
    21 0000035A 02                      color: db Color.G
    22                                  FRICTION equ 94
    23                                  
    24                                  setup:
    25                                    set_cursor 1,1
    43                              <1> 
    44 0000035B BF0000              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
    26                                  
    27                                    _atan2 100, 0
    94 0000035E B86400              <1>  mov ax,%1
    95 00000361 BB0000              <1>  mov bx,%2
    96 00000364 E882FF              <1>  call __atan2
    28                                    _atan2 96, 25
    94 00000367 B86000              <1>  mov ax,%1
    95 0000036A BB1900              <1>  mov bx,%2
    96 0000036D E879FF              <1>  call __atan2
    29                                    _atan2 86, 50
    94 00000370 B85600              <1>  mov ax,%1
    95 00000373 BB3200              <1>  mov bx,%2
    96 00000376 E870FF              <1>  call __atan2
    30                                    _atan2 70, 70
    94 00000379 B84600              <1>  mov ax,%1
    95 0000037C BB4600              <1>  mov bx,%2
    96 0000037F E867FF              <1>  call __atan2
    31                                    _atan2 49, 86
    94 00000382 B83100              <1>  mov ax,%1
    95 00000385 BB5600              <1>  mov bx,%2
    96 00000388 E85EFF              <1>  call __atan2
    32                                    _atan2 25, 96
    94 0000038B B81900              <1>  mov ax,%1
    95 0000038E BB6000              <1>  mov bx,%2
    96 00000391 E855FF              <1>  call __atan2
    33                                    _atan2 0, 100
    94 00000394 B80000              <1>  mov ax,%1
    95 00000397 BB6400              <1>  mov bx,%2
    96 0000039A E84CFF              <1>  call __atan2
    34                                    _atan2 -25, 96  
    94 0000039D B8E7FF              <1>  mov ax,%1
    95 000003A0 BB6000              <1>  mov bx,%2
    96 000003A3 E843FF              <1>  call __atan2
    35                                    _atan2 -50, 86  
    94 000003A6 B8CEFF              <1>  mov ax,%1
    95 000003A9 BB5600              <1>  mov bx,%2
    96 000003AC E83AFF              <1>  call __atan2
    36                                    _atan2 -70, 70 
    94 000003AF B8BAFF              <1>  mov ax,%1
    95 000003B2 BB4600              <1>  mov bx,%2
    96 000003B5 E831FF              <1>  call __atan2
    37                                    _atan2 -86, 50 
    94 000003B8 B8AAFF              <1>  mov ax,%1
    95 000003BB BB3200              <1>  mov bx,%2
    96 000003BE E828FF              <1>  call __atan2
    38                                    _atan2 -96, 25 
    94 000003C1 B8A0FF              <1>  mov ax,%1
    95 000003C4 BB1900              <1>  mov bx,%2
    96 000003C7 E81FFF              <1>  call __atan2
    39                                    _atan2 -100, 0 
    94 000003CA B89CFF              <1>  mov ax,%1
    95 000003CD BB0000              <1>  mov bx,%2
    96 000003D0 E816FF              <1>  call __atan2
    40                                    _atan2 -96, -25 
    94 000003D3 B8A0FF              <1>  mov ax,%1
    95 000003D6 BBE7FF              <1>  mov bx,%2
    96 000003D9 E80DFF              <1>  call __atan2
    41                                    _atan2 -86, -49 
    94 000003DC B8AAFF              <1>  mov ax,%1
    95 000003DF BBCFFF              <1>  mov bx,%2
    96 000003E2 E804FF              <1>  call __atan2
    42                                    _atan2 -70, -70 
    94 000003E5 B8BAFF              <1>  mov ax,%1
    95 000003E8 BBBAFF              <1>  mov bx,%2
    96 000003EB E8FBFE              <1>  call __atan2
    43                                    _atan2 -49, -86 
    94 000003EE B8CFFF              <1>  mov ax,%1
    95 000003F1 BBAAFF              <1>  mov bx,%2
    96 000003F4 E8F2FE              <1>  call __atan2
    44                                    _atan2 -25, -96 
    94 000003F7 B8E7FF              <1>  mov ax,%1
    95 000003FA BBA0FF              <1>  mov bx,%2
    96 000003FD E8E9FE              <1>  call __atan2
    45                                    _atan2 0, -100 
    94 00000400 B80000              <1>  mov ax,%1
    95 00000403 BB9CFF              <1>  mov bx,%2
    96 00000406 E8E0FE              <1>  call __atan2
    46                                    _atan2 25, -96 
    94 00000409 B81900              <1>  mov ax,%1
    95 0000040C BBA0FF              <1>  mov bx,%2
    96 0000040F E8D7FE              <1>  call __atan2
    47                                    _atan2 49, -86 
    94 00000412 B83100              <1>  mov ax,%1
    95 00000415 BBAAFF              <1>  mov bx,%2
    96 00000418 E8CEFE              <1>  call __atan2
    48                                    _atan2 70, -70 
    94 0000041B B84600              <1>  mov ax,%1
    95 0000041E BBBAFF              <1>  mov bx,%2
    96 00000421 E8C5FE              <1>  call __atan2
    49                                    _atan2 86, -50 
    94 00000424 B85600              <1>  mov ax,%1
    95 00000427 BBCEFF              <1>  mov bx,%2
    96 0000042A E8BCFE              <1>  call __atan2
    50                                    _atan2 96, -25 
    94 0000042D B86000              <1>  mov ax,%1
    95 00000430 BBE7FF              <1>  mov bx,%2
    96 00000433 E8B3FE              <1>  call __atan2
    51                                  
    52                                  
    53                                  
    54                                  
    55                                  
    56                                    ; mov ax,1234
    57                                    ; call write_signed_number_word
    58                                  
    59                                    ; xor di,di
    60                                    ; mov cx,1000
    61                                    ; mov ax,FONT
    62                                    ; mov ds,ax
    63                                    ; ; mov ax,-1
    64                                    ; rep movsw
    65                                  
    66                                  
    67                                  
    68                                  ;   cli
    69                                  ;   cld
    70                                  ; push cs
    71                                  ; pop ds
    72                                  ; xor bx,bx
    73                                  ; xor dx,dx
    74                                  ; xor cx,cx
    75                                  ; xor ax,ax
    76                                  ; xor bp,bp
    77                                  
    78                                  ;   hlt
    79                                  ;   xor dx,dx
    80                                  ;   add di,3*8
    81                                  
    82                                  ;   mov cx,10
    83                                  ;   div cx
    84                                  ;   ; push ax
    85                                  ;   push ax ;xxxxx
    86                                  
    87                                    ; mov ax,88
    88                                    ; call write_number_word
    89                                    ; print "  "
    90                                    ; xor di,di
    91                                    ; mov ax,'X'
    92                                    ; push ax
    93                                    ; mov ax,GREEN
    94                                    ; mov es,ax
    95                                    ; mov ax,FONT
    96                                    ; mov ds,ax
    97                                    ; pop ax
    98                                    ; mov ah,8
    99                                    ; mul ah        ; al*=ah
   100                                    ; mov si,ax
   101                                    ; movsw
   102                                    ; movsw
   103                                    ; add di,0x11c
   104                                    ; movsw
   105                                    ; movsw
   106                                    ; sub di,0x120
   107                                  
   108                                    ; mov ax,'8'
   109                                    ; push ax
   110                                    ; mov ax,GREEN
   111                                    ; mov es,ax
   112                                    ; mov ax,FONT
   113                                    ; mov ds,ax
   114                                    ; pop ax
   115                                    ; mov ah,8
   116                                    ; mul ah        ; al*=ah
   117                                    ; mov si,ax
   118                                    ; movsw
   119                                    ; movsw
   120                                    ; add di,0x11c
   121                                    ; movsw
   122                                    ; movsw
   123                                    ; sub di,0x120
   124                                  
   125                                  
   126                                  
   127                                  
   128 00000436 F4                        hlt
   129                                    
   130 00000437 31ED                      xor bp,bp
   131 00000439 EB76                      jmp draw
   132                                  
   133                                  ; ───────────────────────────────────────────────────────────────────────────
   134                                  
   135                                  
   136                                  
   137                                  
   138                                  
   139                                  update_ship:
   140                                    
   141                                    ; x+=vx
   142 0000043B A1[4403]                  mov ax,[ship.pos.x]       ; 0..73728  (65536)
   143 0000043E 0306[4803]                add ax,[ship.vel.x]
   144 00000442 A3[4403]                  mov [ship.pos.x],ax
   145                                  
   146                                    ; y+=vy
   147 00000445 A1[4603]                  mov ax,[ship.pos.y]       ; 0..51200  (=1024*50)
   148 00000448 0306[4A03]                add ax,[ship.vel.y]
   149 0000044C A3[4603]                  mov [ship.pos.y],ax
   150                                  
   151                                    ; vx*=98%
   152 0000044F A1[4803]                  mov ax, [ship.vel.x]
   153 00000452 99                        cwd                 ; Convert word to double word (sign-extend AX into DX)
   154 00000453 B95E00                    mov cx, FRICTION
   155 00000456 F7E9                      imul cx             ; Signed multiplication
   156 00000458 B96400                    mov cx, 100
   157 0000045B F7F9                      idiv cx             ; Signed division
   158 0000045D A3[4803]                  mov [ship.vel.x], ax
   159                                  
   160                                    ; vy*=98%
   161 00000460 A1[4A03]                  mov ax, [ship.vel.y]
   162 00000463 99                        cwd                 ; Convert word to double word (sign-extend AX into DX)
   163 00000464 B95E00                    mov cx, FRICTION
   164 00000467 F7E9                      imul cx             ; Signed multiplication
   165 00000469 B96400                    mov cx, 100
   166 0000046C F7F9                      idiv cx             ; Signed division
   167 0000046E A3[4A03]                  mov [ship.vel.y], ax
   168                                  
   169 00000471 C3                        ret
   170                                  
   171                                  ; ───────────────────────────────────────────────────────────────────────────
   172                                  
   173                                  draw_ship:
   174                                  
   175 00000472 A1[4403]                  mov ax,[ship.pos.x]
   176 00000475 8B1E[4603]                mov bx,[ship.pos.y]
   177 00000479 E82D01                    call world2screen
   178 0000047C E8B4FD                    call calc_di_from_bx
   179                                  
   180 0000047F 393E[5803]                cmp [ship.prev_di],di
   181 00000483 742B                      je .return
   182                                  
   183                                    ; call world2screen ; ax and bx are already set by pop bx, pop ax
   184                                    ; call calc_di_from_bx
   185                                  
   186 00000485 8B3E[5803]                mov di,[ship.prev_di]
   187                                    
   188 00000489 BB0808                    mov bx,0x0808  ; rows,cols
   189                                    ; call fill_rect_black
   190                                  
   191 0000048C A1[4403]                  mov ax,[ship.pos.x]
   192 0000048F 8B1E[4603]                mov bx,[ship.pos.y]
   193 00000493 E81301                    call world2screen
   194 00000496 E89AFD                    call calc_di_from_bx
   195 00000499 893E[5803]                mov [ship.prev_di],di
   196                                  
   197                                  
   198 0000049D BE[B608]                  mov si,img_up
   199 000004A0 A1[4403]                  mov ax,[ship.pos.x]
   200 000004A3 8B1E[4603]                mov bx,[ship.pos.y]
   201 000004A7 E8FF00                    call world2screen ; ax and bx are already set by pop bx, pop ax
   202 000004AA E886FD                    call calc_di_from_bx
   203 000004AD E849FD                    call draw_spr
   204                                  
   205                                  .return
   206 000004B0 C3                        ret
   207                                  
   208                                  ; ───────────────────────────────────────────────────────────────────────────
   209                                  
   210                                  draw:
   211 000004B1 0E                        push cs
   212 000004B2 1F                        pop ds   ; make sure DS is set to CS for data lookups like [ship.pos.x]
   213                                  
   214 000004B3 E885FF                    call update_ship
   215 000004B6 E8B9FF                    call draw_ship
   216                                  
   217 000004B9 E8E500                    call _wait
   218                                  
   219 000004BC 45                        inc bp
   220                                  
   221                                    set_cursor 12,45
    43                              <1> 
    44 000004BD BF7019              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   222                                    print "frame: "
    48 000004C0 50                  <1>  push ax
    49 000004C1 53                  <1>  push bx
    50 000004C2 51                  <1>  push cx
    51 000004C3 52                  <1>  push dx
    52 000004C4 EB08                <1>  jmp %%endstr
    53 000004C6 6672616D653A2000    <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 000004CE BB[C604]            <1>  mov bx,%%str
    56 000004D1 E892FC              <1>  call write_string
    57 000004D4 5A                  <1>  pop dx
    58 000004D5 59                  <1>  pop cx
    59 000004D6 5B                  <1>  pop bx
    60 000004D7 58                  <1>  pop ax
   223 000004D8 89E8                      mov ax,bp
   224 000004DA E8C5FC                    call write_number_word     ; draw frame counter
   225                                    print "  "
    48 000004DD 50                  <1>  push ax
    49 000004DE 53                  <1>  push bx
    50 000004DF 51                  <1>  push cx
    51 000004E0 52                  <1>  push dx
    52 000004E1 EB03                <1>  jmp %%endstr
    53 000004E3 202000              <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 000004E6 BB[E304]            <1>  mov bx,%%str
    56 000004E9 E87AFC              <1>  call write_string
    57 000004EC 5A                  <1>  pop dx
    58 000004ED 59                  <1>  pop cx
    59 000004EE 5B                  <1>  pop bx
    60 000004EF 58                  <1>  pop ax
   226                                  
   227                                    set_cursor 13,45
    43                              <1> 
    44 000004F0 BFB01B              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   228                                    print "vx: "
    48 000004F3 50                  <1>  push ax
    49 000004F4 53                  <1>  push bx
    50 000004F5 51                  <1>  push cx
    51 000004F6 52                  <1>  push dx
    52 000004F7 EB05                <1>  jmp %%endstr
    53 000004F9 76783A2000          <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 000004FE BB[F904]            <1>  mov bx,%%str
    56 00000501 E862FC              <1>  call write_string
    57 00000504 5A                  <1>  pop dx
    58 00000505 59                  <1>  pop cx
    59 00000506 5B                  <1>  pop bx
    60 00000507 58                  <1>  pop ax
   229 00000508 A1[4803]                  mov ax,[ship.vel.x]  
   230 0000050B E8B9FC                    call write_signed_number_word
   231                                    print "  "
    48 0000050E 50                  <1>  push ax
    49 0000050F 53                  <1>  push bx
    50 00000510 51                  <1>  push cx
    51 00000511 52                  <1>  push dx
    52 00000512 EB03                <1>  jmp %%endstr
    53 00000514 202000              <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 00000517 BB[1405]            <1>  mov bx,%%str
    56 0000051A E849FC              <1>  call write_string
    57 0000051D 5A                  <1>  pop dx
    58 0000051E 59                  <1>  pop cx
    59 0000051F 5B                  <1>  pop bx
    60 00000520 58                  <1>  pop ax
   232                                  
   233                                    set_cursor 14,45
    43                              <1> 
    44 00000521 BFF01D              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   234                                    print "vy: "
    48 00000524 50                  <1>  push ax
    49 00000525 53                  <1>  push bx
    50 00000526 51                  <1>  push cx
    51 00000527 52                  <1>  push dx
    52 00000528 EB05                <1>  jmp %%endstr
    53 0000052A 76793A2000          <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 0000052F BB[2A05]            <1>  mov bx,%%str
    56 00000532 E831FC              <1>  call write_string
    57 00000535 5A                  <1>  pop dx
    58 00000536 59                  <1>  pop cx
    59 00000537 5B                  <1>  pop bx
    60 00000538 58                  <1>  pop ax
   235 00000539 A1[4A03]                  mov ax,[ship.vel.y]
   236 0000053C E888FC                    call write_signed_number_word     ; draw vy
   237                                    print "  "
    48 0000053F 50                  <1>  push ax
    49 00000540 53                  <1>  push bx
    50 00000541 51                  <1>  push cx
    51 00000542 52                  <1>  push dx
    52 00000543 EB03                <1>  jmp %%endstr
    53 00000545 202000              <1>  %%str: db %1,0
    54                              <1>  %%endstr:
    55 00000548 BB[4505]            <1>  mov bx,%%str
    56 0000054B E818FC              <1>  call write_string
    57 0000054E 5A                  <1>  pop dx
    58 0000054F 59                  <1>  pop cx
    59 00000550 5B                  <1>  pop bx
    60 00000551 58                  <1>  pop ax
   238                                  
   239 00000552 E884FC                    call check_keys
   240 00000555 7503                      jnz on_key
   241                                    ;else
   242 00000557 E957FF                    jmp draw          ; this code is only getting called when no key is pressed
   243                                  
   244                                  ; ───────────────────────────────────────────────────────────────────────────
   245                                  
   246                                  on_key:
   247                                    set_cursor 2,10
    43                              <1> 
    44 0000055A BF6402              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   248 0000055D A1[0400]                  mov ax,[key]
   249 00000560 E827FC                    call write_binary_word
   250 00000563 83F877                    cmp ax,'w'
   251 00000566 7412                      je on_key_w
   252 00000568 83F861                    cmp ax,'a'
   253 0000056B 7415                      je on_key_a
   254 0000056D 83F873                    cmp ax,'s'
   255 00000570 7418                      je on_key_s
   256 00000572 83F864                    cmp ax,'d'
   257 00000575 741B                      je on_key_d
   258                                  .done
   259 00000577 E937FF                    jmp draw  ; no ret here because onkey is called by jnz
   260                                  
   261                                  
   262                                  STEP equ 500
   263                                  
   264                                  ; ───────────────────────────────────────────────────────────────────────────
   265                                  
   266                                  on_key_w:
   267 0000057A 812E[4A03]F401            sub word [ship.vel.y], STEP
   268 00000580 EBF5                      jmp on_key.done
   269                                  
   270                                  ; ───────────────────────────────────────────────────────────────────────────
   271                                  
   272                                  on_key_a:
   273 00000582 812E[4803]F401            sub word [ship.vel.x], STEP
   274 00000588 EBED                      jmp on_key.done
   275                                  
   276                                  ; ───────────────────────────────────────────────────────────────────────────
   277                                  
   278                                  on_key_s:
   279 0000058A 8106[4A03]F401            add word [ship.vel.y], STEP
   280 00000590 EBE5                      jmp on_key.done
   281                                  
   282                                  ; ───────────────────────────────────────────────────────────────────────────
   283                                  
   284                                  on_key_d:
   285 00000592 8106[4803]F401            add word [ship.vel.x], STEP
   286 00000598 EBDD                      jmp on_key.done
   287                                  
   288                                  ; ───────────────────────────────────────────────────────────────────────────
   289                                  
   290                                  print_msg:
   291                                    set_cursor 1,10
    43                              <1> 
    44 0000059A BF2400              <1>  mov di,(%1-1) * BYTES_PER_ROW + (%2-1) * 4
   292 0000059D E8C6FB                    call write_string
   293 000005A0 C3                        ret
   294                                  
   295                                  ; ───────────────────────────────────────────────────────────────────────────
   296                                  
   297                                  _wait:
   298                                    DELAY EQU 250
   299 000005A1 B9FA00                    mov cx,DELAY
   300 000005A4 D40A                      .lp aam
   301 000005A6 E2FC                      loop .lp
   302 000005A8 C3                        ret
   303                                  
   304                                  ; ───────────────────────────────────────────────────────────────────────────
   305                                  
   306                                  world2screen:  ; input (ax,bx) = (world.x, world.y)   ; screen (row,col)
   307                                    ; WORLD:
   308                                    ;   0..73728  (65536) -> col
   309                                    ;   0..51200  (=1024*50) -> row
   310                                    ; SCREEN (ROW,COL):
   311                                    ;   0..49 (row)
   312                                    ;   0..71 (col)
   313 000005A9 B10A                      mov cl,10
   314 000005AB D3EB                      shr bx,cl   ; //bl=row 0..49
   315 000005AD D3E8                      shr ax,cl   ; 
   316 000005AF 88C7                      mov bh,al   ; //bh=col 0..71
   317 000005B1 86DF                      xchg bh,bl
   318 000005B3 C3                        ret
   319                                  
   320                                  ; ───────────────────────────────────────────────────────────────────────────
   321                                  
   322                                  ; FIXME
   323 000005B4 <bin 302h>              img_NONE: incbin "data/ship-24.spr"
   324                                  
   325                                  
   326                                  img_up:
   327 000008B6 <bin 302h>              img1: incbin "data/ship-1.spr" ;up
   328 00000BB8 <bin 302h>              img2: incbin "data/ship-2.spr"
   329 00000EBA <bin 302h>              img3: incbin "data/ship-3.spr"
   330                                  img_up_right:
   331 000011BC <bin 302h>              img4: incbin "data/ship-4.spr" ;up-right
   332 000014BE <bin 302h>              img5: incbin "data/ship-5.spr"
   333 000017C0 <bin 302h>              img6: incbin "data/ship-6.spr"
   334                                  img_right:
   335 00001AC2 <bin 302h>              img7: incbin "data/ship-7.spr" ;right
   336 00001DC4 <bin 302h>              img8: incbin "data/ship-8.spr"
   337 000020C6 <bin 302h>              img9: incbin "data/ship-9.spr"
   338                                  img_down_right:
   339 000023C8 <bin 302h>              img10: incbin "data/ship-10.spr" ;down-right
   340 000026CA <bin 302h>              img11: incbin "data/ship-11.spr"
   341 000029CC <bin 302h>              img12: incbin "data/ship-12.spr"
   342                                  img_down:
   343 00002CCE <bin 302h>              img13: incbin "data/ship-13.spr" ;down
   344 00002FD0 <bin 302h>              img14: incbin "data/ship-14.spr"
   345 000032D2 <bin 302h>              img15: incbin "data/ship-15.spr"
   346                                  img_down_left:
   347 000035D4 <bin 302h>              img16: incbin "data/ship-16.spr" ;down-left
   348 000038D6 <bin 302h>              img17: incbin "data/ship-17.spr"
   349 00003BD8 <bin 302h>              img18: incbin "data/ship-18.spr"
   350                                  img_left:
   351 00003EDA <bin 302h>              img19: incbin "data/ship-19.spr" ;left
   352 000041DC <bin 302h>              img20: incbin "data/ship-20.spr"
   353 000044DE <bin 302h>              img21: incbin "data/ship-21.spr"
   354                                  img_up_left:
   355 000047E0 <bin 302h>              img22: incbin "data/ship-22.spr" ;up-left
   356 00004AE2 <bin 302h>              img23: incbin "data/ship-23.spr"
   357 00004DE4 <bin 302h>              img24: incbin "data/ship-24.spr"
   358                                  
   359                                  
   360                                  
   361 000050E6 00<rep 27F1Ah>          times (180*1024)-($-$$) db 0
   362                                  
   363                                  
   364                                  
